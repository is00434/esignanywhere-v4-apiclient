/*
 * eSignAnywhere.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package osplus.esignanywhere.v4.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Configure fontsettings for some formfields.
 */
@ApiModel(description = "Configure fontsettings for some formfields.")
@JsonPropertyOrder({
  FontSettingsAdvanced.JSON_PROPERTY_FONT_FAMILY,
  FontSettingsAdvanced.JSON_PROPERTY_TEXT_ALIGN,
  FontSettingsAdvanced.JSON_PROPERTY_TEXT_COLOR,
  FontSettingsAdvanced.JSON_PROPERTY_NAME,
  FontSettingsAdvanced.JSON_PROPERTY_SIZE,
  FontSettingsAdvanced.JSON_PROPERTY_IS_BOLD,
  FontSettingsAdvanced.JSON_PROPERTY_IS_ITALIC
})
@JsonTypeName("FontSettingsAdvanced")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-02-13T11:25:21.496783+01:00[Europe/Berlin]")
public class FontSettingsAdvanced {
  public static final String JSON_PROPERTY_FONT_FAMILY = "FontFamily";
  private String fontFamily;

  /**
   * Alignment of the text.
   */
  public enum TextAlignEnum {
    LEFT("Left"),
    
    RIGHT("Right"),
    
    CENTER("Center");

    private String value;

    TextAlignEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TextAlignEnum fromValue(String value) {
      for (TextAlignEnum b : TextAlignEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TEXT_ALIGN = "TextAlign";
  private TextAlignEnum textAlign;

  public static final String JSON_PROPERTY_TEXT_COLOR = "TextColor";
  private TextColor textColor;

  public static final String JSON_PROPERTY_NAME = "Name";
  private String name;

  public static final String JSON_PROPERTY_SIZE = "Size";
  private Double size;

  public static final String JSON_PROPERTY_IS_BOLD = "IsBold";
  private Boolean isBold;

  public static final String JSON_PROPERTY_IS_ITALIC = "IsItalic";
  private Boolean isItalic;


  public FontSettingsAdvanced fontFamily(String fontFamily) {
    
    this.fontFamily = fontFamily;
    return this;
  }

   /**
   * Defines the font-family.
   * @return fontFamily
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the font-family.")
  @JsonProperty(JSON_PROPERTY_FONT_FAMILY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFontFamily() {
    return fontFamily;
  }


  public void setFontFamily(String fontFamily) {
    this.fontFamily = fontFamily;
  }


  public FontSettingsAdvanced textAlign(TextAlignEnum textAlign) {
    
    this.textAlign = textAlign;
    return this;
  }

   /**
   * Alignment of the text.
   * @return textAlign
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Alignment of the text.")
  @JsonProperty(JSON_PROPERTY_TEXT_ALIGN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TextAlignEnum getTextAlign() {
    return textAlign;
  }


  public void setTextAlign(TextAlignEnum textAlign) {
    this.textAlign = textAlign;
  }


  public FontSettingsAdvanced textColor(TextColor textColor) {
    
    this.textColor = textColor;
    return this;
  }

   /**
   * Get textColor
   * @return textColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TEXT_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TextColor getTextColor() {
    return textColor;
  }


  public void setTextColor(TextColor textColor) {
    this.textColor = textColor;
  }


  public FontSettingsAdvanced name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Naming of the font.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Naming of the font.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public FontSettingsAdvanced size(Double size) {
    
    this.size = size;
    return this;
  }

   /**
   * Define the size.
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define the size.")
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getSize() {
    return size;
  }


  public void setSize(Double size) {
    this.size = size;
  }


  public FontSettingsAdvanced isBold(Boolean isBold) {
    
    this.isBold = isBold;
    return this;
  }

   /**
   * Define if the font-style should be bold.
   * @return isBold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define if the font-style should be bold.")
  @JsonProperty(JSON_PROPERTY_IS_BOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsBold() {
    return isBold;
  }


  public void setIsBold(Boolean isBold) {
    this.isBold = isBold;
  }


  public FontSettingsAdvanced isItalic(Boolean isItalic) {
    
    this.isItalic = isItalic;
    return this;
  }

   /**
   * Define if the font-style should be italic.
   * @return isItalic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define if the font-style should be italic.")
  @JsonProperty(JSON_PROPERTY_IS_ITALIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsItalic() {
    return isItalic;
  }


  public void setIsItalic(Boolean isItalic) {
    this.isItalic = isItalic;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FontSettingsAdvanced fontSettingsAdvanced = (FontSettingsAdvanced) o;
    return Objects.equals(this.fontFamily, fontSettingsAdvanced.fontFamily) &&
        Objects.equals(this.textAlign, fontSettingsAdvanced.textAlign) &&
        Objects.equals(this.textColor, fontSettingsAdvanced.textColor) &&
        Objects.equals(this.name, fontSettingsAdvanced.name) &&
        Objects.equals(this.size, fontSettingsAdvanced.size) &&
        Objects.equals(this.isBold, fontSettingsAdvanced.isBold) &&
        Objects.equals(this.isItalic, fontSettingsAdvanced.isItalic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fontFamily, textAlign, textColor, name, size, isBold, isItalic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FontSettingsAdvanced {\n");
    sb.append("    fontFamily: ").append(toIndentedString(fontFamily)).append("\n");
    sb.append("    textAlign: ").append(toIndentedString(textAlign)).append("\n");
    sb.append("    textColor: ").append(toIndentedString(textColor)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    isBold: ").append(toIndentedString(isBold)).append("\n");
    sb.append("    isItalic: ").append(toIndentedString(isItalic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

