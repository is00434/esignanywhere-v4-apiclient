/*
 * eSignAnywhere.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package osplus.esignanywhere.v4.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModelProperty;

/**
 * DisclaimerDocument
 */
@JsonPropertyOrder({
  DisclaimerDocument.JSON_PROPERTY_DOCUMENT_ID,
  DisclaimerDocument.JSON_PROPERTY_DISCLAIMER_TYPE
})
@JsonTypeName("DisclaimerDocument")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-02-28T10:42:13.714738+01:00[Europe/Berlin]")
public class DisclaimerDocument {
  public static final String JSON_PROPERTY_DOCUMENT_ID = "DocumentId";
  private String documentId;

  /**
   * The type of the document.
   */
  public enum DisclaimerTypeEnum {
    DISPOSABLEDISCLAIMER("DisposableDisclaimer");

    private String value;

    DisclaimerTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DisclaimerTypeEnum fromValue(String value) {
      for (DisclaimerTypeEnum b : DisclaimerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DISCLAIMER_TYPE = "DisclaimerType";
  private DisclaimerTypeEnum disclaimerType;


  public DisclaimerDocument documentId(String documentId) {
    
    this.documentId = documentId;
    return this;
  }

   /**
   * The Id of the document for downloading.
   * @return documentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Id of the document for downloading.")
  @JsonProperty(JSON_PROPERTY_DOCUMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDocumentId() {
    return documentId;
  }


  public void setDocumentId(String documentId) {
    this.documentId = documentId;
  }


  public DisclaimerDocument disclaimerType(DisclaimerTypeEnum disclaimerType) {
    
    this.disclaimerType = disclaimerType;
    return this;
  }

   /**
   * The type of the document.
   * @return disclaimerType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of the document.")
  @JsonProperty(JSON_PROPERTY_DISCLAIMER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DisclaimerTypeEnum getDisclaimerType() {
    return disclaimerType;
  }


  public void setDisclaimerType(DisclaimerTypeEnum disclaimerType) {
    this.disclaimerType = disclaimerType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DisclaimerDocument disclaimerDocument = (DisclaimerDocument) o;
    return Objects.equals(this.documentId, disclaimerDocument.documentId) &&
        Objects.equals(this.disclaimerType, disclaimerDocument.disclaimerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentId, disclaimerType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DisclaimerDocument {\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    disclaimerType: ").append(toIndentedString(disclaimerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

