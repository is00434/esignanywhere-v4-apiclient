/*
 * eSignAnywhere.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package osplus.esignanywhere.v4.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Configure the
 */
@ApiModel(description = "Configure the")
@JsonPropertyOrder({
  SigningCertificateDescriptor.JSON_PROPERTY_IDENTIFIER,
  SigningCertificateDescriptor.JSON_PROPERTY_TYPE,
  SigningCertificateDescriptor.JSON_PROPERTY_CSP
})
@JsonTypeName("SigningCertificateDescriptor")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-02-28T10:42:13.714738+01:00[Europe/Berlin]")
public class SigningCertificateDescriptor {
  public static final String JSON_PROPERTY_IDENTIFIER = "Identifier";
  private String identifier;

  /**
   * Defines which type should be used.
   */
  public enum TypeEnum {
    SHA1THUMBPRINT("Sha1Thumbprint"),
    
    SUBJECT("Subject");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "Type";
  private TypeEnum type;

  /**
   * Defines which Csp type should be used.
   */
  public enum CspEnum {
    DEFAULT("Default"),
    
    CUSTOM("Custom");

    private String value;

    CspEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CspEnum fromValue(String value) {
      for (CspEnum b : CspEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CSP = "Csp";
  private CspEnum csp;


  public SigningCertificateDescriptor identifier(String identifier) {
    
    this.identifier = identifier;
    return this;
  }

   /**
   * Identifier for this
   * @return identifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifier for this")
  @JsonProperty(JSON_PROPERTY_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIdentifier() {
    return identifier;
  }


  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public SigningCertificateDescriptor type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Defines which type should be used.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines which type should be used.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public SigningCertificateDescriptor csp(CspEnum csp) {
    
    this.csp = csp;
    return this;
  }

   /**
   * Defines which Csp type should be used.
   * @return csp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines which Csp type should be used.")
  @JsonProperty(JSON_PROPERTY_CSP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CspEnum getCsp() {
    return csp;
  }


  public void setCsp(CspEnum csp) {
    this.csp = csp;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SigningCertificateDescriptor signingCertificateDescriptor = (SigningCertificateDescriptor) o;
    return Objects.equals(this.identifier, signingCertificateDescriptor.identifier) &&
        Objects.equals(this.type, signingCertificateDescriptor.type) &&
        Objects.equals(this.csp, signingCertificateDescriptor.csp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifier, type, csp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SigningCertificateDescriptor {\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    csp: ").append(toIndentedString(csp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

