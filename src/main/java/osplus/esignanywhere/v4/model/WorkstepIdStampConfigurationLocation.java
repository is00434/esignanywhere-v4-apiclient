/*
 * eSignAnywhere.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package osplus.esignanywhere.v4.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import osplus.esignanywhere.v4.model.Size;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Defines the location of WorkstepIdStampConfiguration.
 */
@ApiModel(description = "Defines the location of WorkstepIdStampConfiguration.")
@JsonPropertyOrder({
  WorkstepIdStampConfigurationLocation.JSON_PROPERTY_SIZE,
  WorkstepIdStampConfigurationLocation.JSON_PROPERTY_MARGIN_LEFT,
  WorkstepIdStampConfigurationLocation.JSON_PROPERTY_MARGIN_TOP
})
@JsonTypeName("WorkstepIdStampConfigurationLocation")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-02-13T11:25:21.496783+01:00[Europe/Berlin]")
public class WorkstepIdStampConfigurationLocation {
  public static final String JSON_PROPERTY_SIZE = "Size";
  private Size size;

  public static final String JSON_PROPERTY_MARGIN_LEFT = "MarginLeft";
  private Double marginLeft;

  public static final String JSON_PROPERTY_MARGIN_TOP = "MarginTop";
  private Double marginTop;


  public WorkstepIdStampConfigurationLocation size(Size size) {
    
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Size getSize() {
    return size;
  }


  public void setSize(Size size) {
    this.size = size;
  }


  public WorkstepIdStampConfigurationLocation marginLeft(Double marginLeft) {
    
    this.marginLeft = marginLeft;
    return this;
  }

   /**
   * Maring from left.
   * @return marginLeft
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maring from left.")
  @JsonProperty(JSON_PROPERTY_MARGIN_LEFT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getMarginLeft() {
    return marginLeft;
  }


  public void setMarginLeft(Double marginLeft) {
    this.marginLeft = marginLeft;
  }


  public WorkstepIdStampConfigurationLocation marginTop(Double marginTop) {
    
    this.marginTop = marginTop;
    return this;
  }

   /**
   * Margin from top.
   * @return marginTop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Margin from top.")
  @JsonProperty(JSON_PROPERTY_MARGIN_TOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getMarginTop() {
    return marginTop;
  }


  public void setMarginTop(Double marginTop) {
    this.marginTop = marginTop;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkstepIdStampConfigurationLocation workstepIdStampConfigurationLocation = (WorkstepIdStampConfigurationLocation) o;
    return Objects.equals(this.size, workstepIdStampConfigurationLocation.size) &&
        Objects.equals(this.marginLeft, workstepIdStampConfigurationLocation.marginLeft) &&
        Objects.equals(this.marginTop, workstepIdStampConfigurationLocation.marginTop);
  }

  @Override
  public int hashCode() {
    return Objects.hash(size, marginLeft, marginTop);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkstepIdStampConfigurationLocation {\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    marginLeft: ").append(toIndentedString(marginLeft)).append("\n");
    sb.append("    marginTop: ").append(toIndentedString(marginTop)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

