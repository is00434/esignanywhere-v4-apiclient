/*
 * eSignAnywhere.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package osplus.esignanywhere.v4.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * TransactionCodeAndLocalCertificate SigType.
 */
@ApiModel(description = "TransactionCodeAndLocalCertificate SigType.")
@JsonPropertyOrder({
  SigTypeTransactionCodeAndLocalCertificate.JSON_PROPERTY_TR_MOD_TYPE,
  SigTypeTransactionCodeAndLocalCertificate.JSON_PROPERTY_TR_MOD_TYPE_ID,
  SigTypeTransactionCodeAndLocalCertificate.JSON_PROPERTY_TR_VALIDITY_IN_SECONDS,
  SigTypeTransactionCodeAndLocalCertificate.JSON_PROPERTY_LY,
  SigTypeTransactionCodeAndLocalCertificate.JSON_PROPERTY_TR_CONF_ID_ISSUE_CERTIFICATE,
  SigTypeTransactionCodeAndLocalCertificate.JSON_PROPERTY_TR_CONF_ID,
  SigTypeTransactionCodeAndLocalCertificate.JSON_PROPERTY_IS_PHONE_NUMBER_REQUIRED,
  SigTypeTransactionCodeAndLocalCertificate.JSON_PROPERTY_ID,
  SigTypeTransactionCodeAndLocalCertificate.JSON_PROPERTY_DISCRIMINATOR_TYPE,
  SigTypeTransactionCodeAndLocalCertificate.JSON_PROPERTY_PREFERRED,
  SigTypeTransactionCodeAndLocalCertificate.JSON_PROPERTY_STAMP_IMPRINT_CONFIGURATION
})
@JsonTypeName("SigTypeTransactionCodeAndLocalCertificate")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-02-28T10:42:13.714738+01:00[Europe/Berlin]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "DiscriminatorType", visible = true)

public class SigTypeTransactionCodeAndLocalCertificate extends SigType {
  public static final String JSON_PROPERTY_TR_MOD_TYPE = "TrModType";
  private String trModType;

  public static final String JSON_PROPERTY_TR_MOD_TYPE_ID = "TrModTypeId";
  private String trModTypeId;

  public static final String JSON_PROPERTY_TR_VALIDITY_IN_SECONDS = "TrValidityInSeconds";
  private Integer trValidityInSeconds = 300;

  public static final String JSON_PROPERTY_LY = "Ly";
  private String ly = "";

  public static final String JSON_PROPERTY_TR_CONF_ID_ISSUE_CERTIFICATE = "TrConfIdIssueCertificate";
  private String trConfIdIssueCertificate;

  public static final String JSON_PROPERTY_TR_CONF_ID = "TrConfId";
  private String trConfId;

  public static final String JSON_PROPERTY_IS_PHONE_NUMBER_REQUIRED = "IsPhoneNumberRequired";
  private Boolean isPhoneNumberRequired;

  public static final String JSON_PROPERTY_ID = "Id";
  private String id;

  public static final String JSON_PROPERTY_DISCRIMINATOR_TYPE = "DiscriminatorType";
  protected String discriminatorType;

  public static final String JSON_PROPERTY_PREFERRED = "Preferred";
  private Boolean preferred;

  public static final String JSON_PROPERTY_STAMP_IMPRINT_CONFIGURATION = "StampImprintConfiguration";
  private StampImprintConfiguration stampImprintConfiguration;


  public SigTypeTransactionCodeAndLocalCertificate trModType(String trModType) {
    
    this.trModType = trModType;
    return this;
  }

   /**
   * Transaction code modul type.
   * @return trModType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction code modul type.")
  @JsonProperty(JSON_PROPERTY_TR_MOD_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTrModType() {
    return trModType;
  }


  public void setTrModType(String trModType) {
    this.trModType = trModType;
  }


  public SigTypeTransactionCodeAndLocalCertificate trModTypeId(String trModTypeId) {
    
    this.trModTypeId = trModTypeId;
    return this;
  }

   /**
   * Transaction code modul type identifier.
   * @return trModTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction code modul type identifier.")
  @JsonProperty(JSON_PROPERTY_TR_MOD_TYPE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTrModTypeId() {
    return trModTypeId;
  }


  public void setTrModTypeId(String trModTypeId) {
    this.trModTypeId = trModTypeId;
  }


  public SigTypeTransactionCodeAndLocalCertificate trValidityInSeconds(Integer trValidityInSeconds) {
    
    this.trValidityInSeconds = trValidityInSeconds;
    return this;
  }

   /**
   * Validation of transaction in seconds.
   * @return trValidityInSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Validation of transaction in seconds.")
  @JsonProperty(JSON_PROPERTY_TR_VALIDITY_IN_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTrValidityInSeconds() {
    return trValidityInSeconds;
  }


  public void setTrValidityInSeconds(Integer trValidityInSeconds) {
    this.trValidityInSeconds = trValidityInSeconds;
  }


  public SigTypeTransactionCodeAndLocalCertificate ly(String ly) {
    
    this.ly = ly;
    return this;
  }

   /**
   * Layout of the transaction code.
   * @return ly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Layout of the transaction code.")
  @JsonProperty(JSON_PROPERTY_LY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLy() {
    return ly;
  }


  public void setLy(String ly) {
    this.ly = ly;
  }


  public SigTypeTransactionCodeAndLocalCertificate trConfIdIssueCertificate(String trConfIdIssueCertificate) {
    
    this.trConfIdIssueCertificate = trConfIdIssueCertificate;
    return this;
  }

   /**
   * Reference to transaction code configuration for issuing the certificate and signing.
   * @return trConfIdIssueCertificate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Reference to transaction code configuration for issuing the certificate and signing.")
  @JsonProperty(JSON_PROPERTY_TR_CONF_ID_ISSUE_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTrConfIdIssueCertificate() {
    return trConfIdIssueCertificate;
  }


  public void setTrConfIdIssueCertificate(String trConfIdIssueCertificate) {
    this.trConfIdIssueCertificate = trConfIdIssueCertificate;
  }


  public SigTypeTransactionCodeAndLocalCertificate trConfId(String trConfId) {
    
    this.trConfId = trConfId;
    return this;
  }

   /**
   * Reference to transcation code configuration id for signing.
   * @return trConfId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Reference to transcation code configuration id for signing.")
  @JsonProperty(JSON_PROPERTY_TR_CONF_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTrConfId() {
    return trConfId;
  }


  public void setTrConfId(String trConfId) {
    this.trConfId = trConfId;
  }


  public SigTypeTransactionCodeAndLocalCertificate isPhoneNumberRequired(Boolean isPhoneNumberRequired) {
    
    this.isPhoneNumberRequired = isPhoneNumberRequired;
    return this;
  }

   /**
   * Define if the phonenumber should be required.
   * @return isPhoneNumberRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define if the phonenumber should be required.")
  @JsonProperty(JSON_PROPERTY_IS_PHONE_NUMBER_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsPhoneNumberRequired() {
    return isPhoneNumberRequired;
  }


  public void setIsPhoneNumberRequired(Boolean isPhoneNumberRequired) {
    this.isPhoneNumberRequired = isPhoneNumberRequired;
  }


  public SigTypeTransactionCodeAndLocalCertificate id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Define a identifier.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define a identifier.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public SigTypeTransactionCodeAndLocalCertificate discriminatorType(String discriminatorType) {
    
    this.discriminatorType = discriminatorType;
    return this;
  }

   /**
   * Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
   * @return discriminatorType
  **/
  @ApiModelProperty(required = true, value = "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.")
  @JsonProperty(JSON_PROPERTY_DISCRIMINATOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDiscriminatorType() {
    return discriminatorType;
  }


  public void setDiscriminatorType(String discriminatorType) {
    this.discriminatorType = discriminatorType;
  }


  public SigTypeTransactionCodeAndLocalCertificate preferred(Boolean preferred) {
    
    this.preferred = preferred;
    return this;
  }

   /**
   * Define if this SigType is the preferred one.
   * @return preferred
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define if this SigType is the preferred one.")
  @JsonProperty(JSON_PROPERTY_PREFERRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPreferred() {
    return preferred;
  }


  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }


  public SigTypeTransactionCodeAndLocalCertificate stampImprintConfiguration(StampImprintConfiguration stampImprintConfiguration) {
    
    this.stampImprintConfiguration = stampImprintConfiguration;
    return this;
  }

   /**
   * Get stampImprintConfiguration
   * @return stampImprintConfiguration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_STAMP_IMPRINT_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StampImprintConfiguration getStampImprintConfiguration() {
    return stampImprintConfiguration;
  }


  public void setStampImprintConfiguration(StampImprintConfiguration stampImprintConfiguration) {
    this.stampImprintConfiguration = stampImprintConfiguration;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SigTypeTransactionCodeAndLocalCertificate sigTypeTransactionCodeAndLocalCertificate = (SigTypeTransactionCodeAndLocalCertificate) o;
    return Objects.equals(this.trModType, sigTypeTransactionCodeAndLocalCertificate.trModType) &&
        Objects.equals(this.trModTypeId, sigTypeTransactionCodeAndLocalCertificate.trModTypeId) &&
        Objects.equals(this.trValidityInSeconds, sigTypeTransactionCodeAndLocalCertificate.trValidityInSeconds) &&
        Objects.equals(this.ly, sigTypeTransactionCodeAndLocalCertificate.ly) &&
        Objects.equals(this.trConfIdIssueCertificate, sigTypeTransactionCodeAndLocalCertificate.trConfIdIssueCertificate) &&
        Objects.equals(this.trConfId, sigTypeTransactionCodeAndLocalCertificate.trConfId) &&
        Objects.equals(this.isPhoneNumberRequired, sigTypeTransactionCodeAndLocalCertificate.isPhoneNumberRequired) &&
        Objects.equals(this.id, sigTypeTransactionCodeAndLocalCertificate.id) &&
        Objects.equals(this.discriminatorType, sigTypeTransactionCodeAndLocalCertificate.discriminatorType) &&
        Objects.equals(this.preferred, sigTypeTransactionCodeAndLocalCertificate.preferred) &&
        Objects.equals(this.stampImprintConfiguration, sigTypeTransactionCodeAndLocalCertificate.stampImprintConfiguration) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trModType, trModTypeId, trValidityInSeconds, ly, trConfIdIssueCertificate, trConfId, isPhoneNumberRequired, id, discriminatorType, preferred, stampImprintConfiguration, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SigTypeTransactionCodeAndLocalCertificate {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    trModType: ").append(toIndentedString(trModType)).append("\n");
    sb.append("    trModTypeId: ").append(toIndentedString(trModTypeId)).append("\n");
    sb.append("    trValidityInSeconds: ").append(toIndentedString(trValidityInSeconds)).append("\n");
    sb.append("    ly: ").append(toIndentedString(ly)).append("\n");
    sb.append("    trConfIdIssueCertificate: ").append(toIndentedString(trConfIdIssueCertificate)).append("\n");
    sb.append("    trConfId: ").append(toIndentedString(trConfId)).append("\n");
    sb.append("    isPhoneNumberRequired: ").append(toIndentedString(isPhoneNumberRequired)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    discriminatorType: ").append(toIndentedString(discriminatorType)).append("\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("    stampImprintConfiguration: ").append(toIndentedString(stampImprintConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

