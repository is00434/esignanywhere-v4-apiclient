/*
 * eSignAnywhere.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package osplus.esignanywhere.v4.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModelProperty;

/**
 * PictureAnnotationConfigurationAllOf
 */
@JsonPropertyOrder({
  PictureAnnotationConfigurationAllOf.JSON_PROPERTY_COLOR_DEPTH,
  PictureAnnotationConfigurationAllOf.JSON_PROPERTY_PAGE_NUMBER,
  PictureAnnotationConfigurationAllOf.JSON_PROPERTY_MIN_RESOLUTION,
  PictureAnnotationConfigurationAllOf.JSON_PROPERTY_MAX_RESOLUTION,
  PictureAnnotationConfigurationAllOf.JSON_PROPERTY_NAME,
  PictureAnnotationConfigurationAllOf.JSON_PROPERTY_POSITION,
  PictureAnnotationConfigurationAllOf.JSON_PROPERTY_SIZE,
  PictureAnnotationConfigurationAllOf.JSON_PROPERTY_ADD_AS_ATTACHMENT,
  PictureAnnotationConfigurationAllOf.JSON_PROPERTY_IS_REQUIRED,
  PictureAnnotationConfigurationAllOf.JSON_PROPERTY_ID,
  PictureAnnotationConfigurationAllOf.JSON_PROPERTY_DISPLAY_NAME,
  PictureAnnotationConfigurationAllOf.JSON_PROPERTY_DOC_REF_NUMBER,
  PictureAnnotationConfigurationAllOf.JSON_PROPERTY_ADDITIONAL_INFORMATION,
  PictureAnnotationConfigurationAllOf.JSON_PROPERTY_BATCH_ID,
  PictureAnnotationConfigurationAllOf.JSON_PROPERTY_DISCRIMINATOR_TYPE
})
@JsonTypeName("PictureAnnotationConfiguration_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-02-13T11:25:21.496783+01:00[Europe/Berlin]")
public class PictureAnnotationConfigurationAllOf {
  /**
   * Gets or Sets colorDepth
   */
  public enum ColorDepthEnum {
    COLOR16M("Color16M"),
    
    GRAYSCALE256("Grayscale256");

    private String value;

    ColorDepthEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ColorDepthEnum fromValue(String value) {
      for (ColorDepthEnum b : ColorDepthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_COLOR_DEPTH = "ColorDepth";
  private ColorDepthEnum colorDepth = ColorDepthEnum.COLOR16M;

  public static final String JSON_PROPERTY_PAGE_NUMBER = "PageNumber";
  private Integer pageNumber;

  public static final String JSON_PROPERTY_MIN_RESOLUTION = "MinResolution";
  private Integer minResolution = -1;

  public static final String JSON_PROPERTY_MAX_RESOLUTION = "MaxResolution";
  private Integer maxResolution = -1;

  public static final String JSON_PROPERTY_NAME = "Name";
  private String name;

  public static final String JSON_PROPERTY_POSITION = "Position";
  private Position position;

  public static final String JSON_PROPERTY_SIZE = "Size";
  private Size size;

  public static final String JSON_PROPERTY_ADD_AS_ATTACHMENT = "AddAsAttachment";
  private Boolean addAsAttachment = false;

  public static final String JSON_PROPERTY_IS_REQUIRED = "IsRequired";
  private Boolean isRequired = false;

  public static final String JSON_PROPERTY_ID = "Id";
  private String id;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "DisplayName";
  private String displayName;

  public static final String JSON_PROPERTY_DOC_REF_NUMBER = "DocRefNumber";
  private Integer docRefNumber;

  public static final String JSON_PROPERTY_ADDITIONAL_INFORMATION = "AdditionalInformation";
  private String additionalInformation;

  public static final String JSON_PROPERTY_BATCH_ID = "BatchId";
  private String batchId;

  public static final String JSON_PROPERTY_DISCRIMINATOR_TYPE = "DiscriminatorType";
  private String discriminatorType;


  public PictureAnnotationConfigurationAllOf colorDepth(ColorDepthEnum colorDepth) {
    
    this.colorDepth = colorDepth;
    return this;
  }

   /**
   * Get colorDepth
   * @return colorDepth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_COLOR_DEPTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ColorDepthEnum getColorDepth() {
    return colorDepth;
  }


  public void setColorDepth(ColorDepthEnum colorDepth) {
    this.colorDepth = colorDepth;
  }


  public PictureAnnotationConfigurationAllOf pageNumber(Integer pageNumber) {
    
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * The page number this element is on.
   * @return pageNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The page number this element is on.")
  @JsonProperty(JSON_PROPERTY_PAGE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPageNumber() {
    return pageNumber;
  }


  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }


  public PictureAnnotationConfigurationAllOf minResolution(Integer minResolution) {
    
    this.minResolution = minResolution;
    return this;
  }

   /**
   * Minimum resolution of the picture based on the target size. Default -1, means no min resolution.
   * @return minResolution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Minimum resolution of the picture based on the target size. Default -1, means no min resolution.")
  @JsonProperty(JSON_PROPERTY_MIN_RESOLUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMinResolution() {
    return minResolution;
  }


  public void setMinResolution(Integer minResolution) {
    this.minResolution = minResolution;
  }


  public PictureAnnotationConfigurationAllOf maxResolution(Integer maxResolution) {
    
    this.maxResolution = maxResolution;
    return this;
  }

   /**
   * Maximum resolution of the picture based on the target size. Default -1, mans no max resolution.
   * @return maxResolution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum resolution of the picture based on the target size. Default -1, mans no max resolution.")
  @JsonProperty(JSON_PROPERTY_MAX_RESOLUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMaxResolution() {
    return maxResolution;
  }


  public void setMaxResolution(Integer maxResolution) {
    this.maxResolution = maxResolution;
  }


  public PictureAnnotationConfigurationAllOf name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Defines the name that is used for the attachment.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the name that is used for the attachment.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public PictureAnnotationConfigurationAllOf position(Position position) {
    
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Position getPosition() {
    return position;
  }


  public void setPosition(Position position) {
    this.position = position;
  }


  public PictureAnnotationConfigurationAllOf size(Size size) {
    
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Size getSize() {
    return size;
  }


  public void setSize(Size size) {
    this.size = size;
  }


  public PictureAnnotationConfigurationAllOf addAsAttachment(Boolean addAsAttachment) {
    
    this.addAsAttachment = addAsAttachment;
    return this;
  }

   /**
   * Define if the picture should be added as attachment to the document as well.
   * @return addAsAttachment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define if the picture should be added as attachment to the document as well.")
  @JsonProperty(JSON_PROPERTY_ADD_AS_ATTACHMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAddAsAttachment() {
    return addAsAttachment;
  }


  public void setAddAsAttachment(Boolean addAsAttachment) {
    this.addAsAttachment = addAsAttachment;
  }


  public PictureAnnotationConfigurationAllOf isRequired(Boolean isRequired) {
    
    this.isRequired = isRequired;
    return this;
  }

   /**
   * Define if the task is required.
   * @return isRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define if the task is required.")
  @JsonProperty(JSON_PROPERTY_IS_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsRequired() {
    return isRequired;
  }


  public void setIsRequired(Boolean isRequired) {
    this.isRequired = isRequired;
  }


  public PictureAnnotationConfigurationAllOf id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Define the identifier for the task.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define the identifier for the task.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public PictureAnnotationConfigurationAllOf displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Define the name to be displayed.
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define the name to be displayed.")
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public PictureAnnotationConfigurationAllOf docRefNumber(Integer docRefNumber) {
    
    this.docRefNumber = docRefNumber;
    return this;
  }

   /**
   * Document number of the task.
   * @return docRefNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Document number of the task.")
  @JsonProperty(JSON_PROPERTY_DOC_REF_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDocRefNumber() {
    return docRefNumber;
  }


  public void setDocRefNumber(Integer docRefNumber) {
    this.docRefNumber = docRefNumber;
  }


  public PictureAnnotationConfigurationAllOf additionalInformation(String additionalInformation) {
    
    this.additionalInformation = additionalInformation;
    return this;
  }

   /**
   * Additional information for the client
   * @return additionalInformation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional information for the client")
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdditionalInformation() {
    return additionalInformation;
  }


  public void setAdditionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
  }


  public PictureAnnotationConfigurationAllOf batchId(String batchId) {
    
    this.batchId = batchId;
    return this;
  }

   /**
   * Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).
   * @return batchId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).")
  @JsonProperty(JSON_PROPERTY_BATCH_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBatchId() {
    return batchId;
  }


  public void setBatchId(String batchId) {
    this.batchId = batchId;
  }


  public PictureAnnotationConfigurationAllOf discriminatorType(String discriminatorType) {
    
    this.discriminatorType = discriminatorType;
    return this;
  }

   /**
   * Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
   * @return discriminatorType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.")
  @JsonProperty(JSON_PROPERTY_DISCRIMINATOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDiscriminatorType() {
    return discriminatorType;
  }


  public void setDiscriminatorType(String discriminatorType) {
    this.discriminatorType = discriminatorType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PictureAnnotationConfigurationAllOf pictureAnnotationConfigurationAllOf = (PictureAnnotationConfigurationAllOf) o;
    return Objects.equals(this.colorDepth, pictureAnnotationConfigurationAllOf.colorDepth) &&
        Objects.equals(this.pageNumber, pictureAnnotationConfigurationAllOf.pageNumber) &&
        Objects.equals(this.minResolution, pictureAnnotationConfigurationAllOf.minResolution) &&
        Objects.equals(this.maxResolution, pictureAnnotationConfigurationAllOf.maxResolution) &&
        Objects.equals(this.name, pictureAnnotationConfigurationAllOf.name) &&
        Objects.equals(this.position, pictureAnnotationConfigurationAllOf.position) &&
        Objects.equals(this.size, pictureAnnotationConfigurationAllOf.size) &&
        Objects.equals(this.addAsAttachment, pictureAnnotationConfigurationAllOf.addAsAttachment) &&
        Objects.equals(this.isRequired, pictureAnnotationConfigurationAllOf.isRequired) &&
        Objects.equals(this.id, pictureAnnotationConfigurationAllOf.id) &&
        Objects.equals(this.displayName, pictureAnnotationConfigurationAllOf.displayName) &&
        Objects.equals(this.docRefNumber, pictureAnnotationConfigurationAllOf.docRefNumber) &&
        Objects.equals(this.additionalInformation, pictureAnnotationConfigurationAllOf.additionalInformation) &&
        Objects.equals(this.batchId, pictureAnnotationConfigurationAllOf.batchId) &&
        Objects.equals(this.discriminatorType, pictureAnnotationConfigurationAllOf.discriminatorType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorDepth, pageNumber, minResolution, maxResolution, name, position, size, addAsAttachment, isRequired, id, displayName, docRefNumber, additionalInformation, batchId, discriminatorType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PictureAnnotationConfigurationAllOf {\n");
    sb.append("    colorDepth: ").append(toIndentedString(colorDepth)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    minResolution: ").append(toIndentedString(minResolution)).append("\n");
    sb.append("    maxResolution: ").append(toIndentedString(maxResolution)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    addAsAttachment: ").append(toIndentedString(addAsAttachment)).append("\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    docRefNumber: ").append(toIndentedString(docRefNumber)).append("\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    discriminatorType: ").append(toIndentedString(discriminatorType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

