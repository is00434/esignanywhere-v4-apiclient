/*
 * eSignAnywhere.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package osplus.esignanywhere.v4.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * FormFieldValidation for numbers.
 */
@ApiModel(description = "FormFieldValidation for numbers.")
@JsonPropertyOrder({
  FormFieldValidationNumber.JSON_PROPERTY_DECIMAL_PLACES,
  FormFieldValidationNumber.JSON_PROPERTY_DECIMAL_SEPARATOR,
  FormFieldValidationNumber.JSON_PROPERTY_THOUSANDS_SEPARATOR,
  FormFieldValidationNumber.JSON_PROPERTY_SYMBOL,
  FormFieldValidationNumber.JSON_PROPERTY_SYMBOL_LOCATION,
  FormFieldValidationNumber.JSON_PROPERTY_RANGE,
  FormFieldValidationNumber.JSON_PROPERTY_DISCRIMINATOR_TYPE
})
@JsonTypeName("FormFieldValidationNumber")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-02-28T10:42:13.714738+01:00[Europe/Berlin]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "DiscriminatorType", visible = true)

public class FormFieldValidationNumber extends FormFieldValidation {
  public static final String JSON_PROPERTY_DECIMAL_PLACES = "DecimalPlaces";
  private Integer decimalPlaces;

  /**
   * Defines the decimal separator. Must be different to ThousandsSeparator. Required if DecimalPlaces is greater than 0.
   */
  public enum DecimalSeparatorEnum {
    COMMA("Comma"),
    
    POINT("Point"),
    
    APOSTROPHE("Apostrophe");

    private String value;

    DecimalSeparatorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DecimalSeparatorEnum fromValue(String value) {
      for (DecimalSeparatorEnum b : DecimalSeparatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DECIMAL_SEPARATOR = "DecimalSeparator";
  private DecimalSeparatorEnum decimalSeparator;

  /**
   * Defines the thousands separator. Must be different to DecimalSeparator.
   */
  public enum ThousandsSeparatorEnum {
    COMMA("Comma"),
    
    POINT("Point"),
    
    APOSTROPHE("Apostrophe"),
    
    BLANK("Blank");

    private String value;

    ThousandsSeparatorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ThousandsSeparatorEnum fromValue(String value) {
      for (ThousandsSeparatorEnum b : ThousandsSeparatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_THOUSANDS_SEPARATOR = "ThousandsSeparator";
  private ThousandsSeparatorEnum thousandsSeparator;

  public static final String JSON_PROPERTY_SYMBOL = "Symbol";
  private String symbol;

  /**
   * Defines the location of this symbol. Required if Symbol is set.
   */
  public enum SymbolLocationEnum {
    START("Start"),
    
    STARTWITHBLANK("StartWithBlank"),
    
    END("End"),
    
    ENDWITHBLANK("EndWithBlank");

    private String value;

    SymbolLocationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SymbolLocationEnum fromValue(String value) {
      for (SymbolLocationEnum b : SymbolLocationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SYMBOL_LOCATION = "SymbolLocation";
  private SymbolLocationEnum symbolLocation;

  public static final String JSON_PROPERTY_RANGE = "Range";
  private FormFieldValidationRange range;

  public static final String JSON_PROPERTY_DISCRIMINATOR_TYPE = "DiscriminatorType";
  protected String discriminatorType;


  public FormFieldValidationNumber decimalPlaces(Integer decimalPlaces) {
    
    this.decimalPlaces = decimalPlaces;
    return this;
  }

   /**
   * Defines the allowed decimal places.
   * @return decimalPlaces
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the allowed decimal places.")
  @JsonProperty(JSON_PROPERTY_DECIMAL_PLACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDecimalPlaces() {
    return decimalPlaces;
  }


  public void setDecimalPlaces(Integer decimalPlaces) {
    this.decimalPlaces = decimalPlaces;
  }


  public FormFieldValidationNumber decimalSeparator(DecimalSeparatorEnum decimalSeparator) {
    
    this.decimalSeparator = decimalSeparator;
    return this;
  }

   /**
   * Defines the decimal separator. Must be different to ThousandsSeparator. Required if DecimalPlaces is greater than 0.
   * @return decimalSeparator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the decimal separator. Must be different to ThousandsSeparator. Required if DecimalPlaces is greater than 0.")
  @JsonProperty(JSON_PROPERTY_DECIMAL_SEPARATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DecimalSeparatorEnum getDecimalSeparator() {
    return decimalSeparator;
  }


  public void setDecimalSeparator(DecimalSeparatorEnum decimalSeparator) {
    this.decimalSeparator = decimalSeparator;
  }


  public FormFieldValidationNumber thousandsSeparator(ThousandsSeparatorEnum thousandsSeparator) {
    
    this.thousandsSeparator = thousandsSeparator;
    return this;
  }

   /**
   * Defines the thousands separator. Must be different to DecimalSeparator.
   * @return thousandsSeparator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the thousands separator. Must be different to DecimalSeparator.")
  @JsonProperty(JSON_PROPERTY_THOUSANDS_SEPARATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ThousandsSeparatorEnum getThousandsSeparator() {
    return thousandsSeparator;
  }


  public void setThousandsSeparator(ThousandsSeparatorEnum thousandsSeparator) {
    this.thousandsSeparator = thousandsSeparator;
  }


  public FormFieldValidationNumber symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Defines the symbol for this number. E.g. currency.
   * @return symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the symbol for this number. E.g. currency.")
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public FormFieldValidationNumber symbolLocation(SymbolLocationEnum symbolLocation) {
    
    this.symbolLocation = symbolLocation;
    return this;
  }

   /**
   * Defines the location of this symbol. Required if Symbol is set.
   * @return symbolLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the location of this symbol. Required if Symbol is set.")
  @JsonProperty(JSON_PROPERTY_SYMBOL_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SymbolLocationEnum getSymbolLocation() {
    return symbolLocation;
  }


  public void setSymbolLocation(SymbolLocationEnum symbolLocation) {
    this.symbolLocation = symbolLocation;
  }


  public FormFieldValidationNumber range(FormFieldValidationRange range) {
    
    this.range = range;
    return this;
  }

   /**
   * Get range
   * @return range
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FormFieldValidationRange getRange() {
    return range;
  }


  public void setRange(FormFieldValidationRange range) {
    this.range = range;
  }


  public FormFieldValidationNumber discriminatorType(String discriminatorType) {
    
    this.discriminatorType = discriminatorType;
    return this;
  }

   /**
   * Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
   * @return discriminatorType
  **/
  @ApiModelProperty(required = true, value = "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.")
  @JsonProperty(JSON_PROPERTY_DISCRIMINATOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDiscriminatorType() {
    return discriminatorType;
  }


  public void setDiscriminatorType(String discriminatorType) {
    this.discriminatorType = discriminatorType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormFieldValidationNumber formFieldValidationNumber = (FormFieldValidationNumber) o;
    return Objects.equals(this.decimalPlaces, formFieldValidationNumber.decimalPlaces) &&
        Objects.equals(this.decimalSeparator, formFieldValidationNumber.decimalSeparator) &&
        Objects.equals(this.thousandsSeparator, formFieldValidationNumber.thousandsSeparator) &&
        Objects.equals(this.symbol, formFieldValidationNumber.symbol) &&
        Objects.equals(this.symbolLocation, formFieldValidationNumber.symbolLocation) &&
        Objects.equals(this.range, formFieldValidationNumber.range) &&
        Objects.equals(this.discriminatorType, formFieldValidationNumber.discriminatorType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(decimalPlaces, decimalSeparator, thousandsSeparator, symbol, symbolLocation, range, discriminatorType, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormFieldValidationNumber {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    decimalPlaces: ").append(toIndentedString(decimalPlaces)).append("\n");
    sb.append("    decimalSeparator: ").append(toIndentedString(decimalSeparator)).append("\n");
    sb.append("    thousandsSeparator: ").append(toIndentedString(thousandsSeparator)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    symbolLocation: ").append(toIndentedString(symbolLocation)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    discriminatorType: ").append(toIndentedString(discriminatorType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

