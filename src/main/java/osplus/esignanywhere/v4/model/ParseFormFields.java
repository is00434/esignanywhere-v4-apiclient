/*
 * eSignAnywhere.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package osplus.esignanywhere.v4.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Configuration for parsing the form fields.
 */
@ApiModel(description = "Configuration for parsing the form fields.")
@JsonPropertyOrder({
  ParseFormFields.JSON_PROPERTY_MAP_REQUIRED_FIELDS_TO_REQUIRED_TASK,
  ParseFormFields.JSON_PROPERTY_FORMS_GROUPING,
  ParseFormFields.JSON_PROPERTY_RETURN_SIMPLIFIED_CONFIG,
  ParseFormFields.JSON_PROPERTY_ADD_KEEP_EXISTING_VALUE_FLAG,
  ParseFormFields.JSON_PROPERTY_PARSE_FORM_FIELD
})
@JsonTypeName("ParseFormFields")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-02-28T10:42:13.714738+01:00[Europe/Berlin]")
public class ParseFormFields {
  public static final String JSON_PROPERTY_MAP_REQUIRED_FIELDS_TO_REQUIRED_TASK = "MapRequiredFieldsToRequiredTask";
  private Boolean mapRequiredFieldsToRequiredTask;

  /**
   * Defines how the forms are grouped.
   */
  public enum FormsGroupingEnum {
    PERPAGE("PerPage"),
    
    PERDOCUMENT("PerDocument"),
    
    PERENVELOPE("PerEnvelope");

    private String value;

    FormsGroupingEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FormsGroupingEnum fromValue(String value) {
      for (FormsGroupingEnum b : FormsGroupingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FORMS_GROUPING = "FormsGrouping";
  private FormsGroupingEnum formsGrouping = FormsGroupingEnum.PERPAGE;

  public static final String JSON_PROPERTY_RETURN_SIMPLIFIED_CONFIG = "ReturnSimplifiedConfig";
  private Boolean returnSimplifiedConfig = true;

  public static final String JSON_PROPERTY_ADD_KEEP_EXISTING_VALUE_FLAG = "AddKeepExistingValueFlag";
  private Boolean addKeepExistingValueFlag = true;

  public static final String JSON_PROPERTY_PARSE_FORM_FIELD = "ParseFormField";
  private Boolean parseFormField = true;


  public ParseFormFields mapRequiredFieldsToRequiredTask(Boolean mapRequiredFieldsToRequiredTask) {
    
    this.mapRequiredFieldsToRequiredTask = mapRequiredFieldsToRequiredTask;
    return this;
  }

   /**
   * Maps required fields to required task.
   * @return mapRequiredFieldsToRequiredTask
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maps required fields to required task.")
  @JsonProperty(JSON_PROPERTY_MAP_REQUIRED_FIELDS_TO_REQUIRED_TASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMapRequiredFieldsToRequiredTask() {
    return mapRequiredFieldsToRequiredTask;
  }


  public void setMapRequiredFieldsToRequiredTask(Boolean mapRequiredFieldsToRequiredTask) {
    this.mapRequiredFieldsToRequiredTask = mapRequiredFieldsToRequiredTask;
  }


  public ParseFormFields formsGrouping(FormsGroupingEnum formsGrouping) {
    
    this.formsGrouping = formsGrouping;
    return this;
  }

   /**
   * Defines how the forms are grouped.
   * @return formsGrouping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines how the forms are grouped.")
  @JsonProperty(JSON_PROPERTY_FORMS_GROUPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FormsGroupingEnum getFormsGrouping() {
    return formsGrouping;
  }


  public void setFormsGrouping(FormsGroupingEnum formsGrouping) {
    this.formsGrouping = formsGrouping;
  }


  public ParseFormFields returnSimplifiedConfig(Boolean returnSimplifiedConfig) {
    
    this.returnSimplifiedConfig = returnSimplifiedConfig;
    return this;
  }

   /**
   * Defines if the simplified configuration should be returned.
   * @return returnSimplifiedConfig
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines if the simplified configuration should be returned.")
  @JsonProperty(JSON_PROPERTY_RETURN_SIMPLIFIED_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getReturnSimplifiedConfig() {
    return returnSimplifiedConfig;
  }


  public void setReturnSimplifiedConfig(Boolean returnSimplifiedConfig) {
    this.returnSimplifiedConfig = returnSimplifiedConfig;
  }


  public ParseFormFields addKeepExistingValueFlag(Boolean addKeepExistingValueFlag) {
    
    this.addKeepExistingValueFlag = addKeepExistingValueFlag;
    return this;
  }

   /**
   * Adds KeepExisitingValue flag.
   * @return addKeepExistingValueFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Adds KeepExisitingValue flag.")
  @JsonProperty(JSON_PROPERTY_ADD_KEEP_EXISTING_VALUE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAddKeepExistingValueFlag() {
    return addKeepExistingValueFlag;
  }


  public void setAddKeepExistingValueFlag(Boolean addKeepExistingValueFlag) {
    this.addKeepExistingValueFlag = addKeepExistingValueFlag;
  }


  public ParseFormFields parseFormField(Boolean parseFormField) {
    
    this.parseFormField = parseFormField;
    return this;
  }

   /**
   * Defines if form fields should be parsed.
   * @return parseFormField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines if form fields should be parsed.")
  @JsonProperty(JSON_PROPERTY_PARSE_FORM_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getParseFormField() {
    return parseFormField;
  }


  public void setParseFormField(Boolean parseFormField) {
    this.parseFormField = parseFormField;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParseFormFields parseFormFields = (ParseFormFields) o;
    return Objects.equals(this.mapRequiredFieldsToRequiredTask, parseFormFields.mapRequiredFieldsToRequiredTask) &&
        Objects.equals(this.formsGrouping, parseFormFields.formsGrouping) &&
        Objects.equals(this.returnSimplifiedConfig, parseFormFields.returnSimplifiedConfig) &&
        Objects.equals(this.addKeepExistingValueFlag, parseFormFields.addKeepExistingValueFlag) &&
        Objects.equals(this.parseFormField, parseFormFields.parseFormField);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mapRequiredFieldsToRequiredTask, formsGrouping, returnSimplifiedConfig, addKeepExistingValueFlag, parseFormField);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParseFormFields {\n");
    sb.append("    mapRequiredFieldsToRequiredTask: ").append(toIndentedString(mapRequiredFieldsToRequiredTask)).append("\n");
    sb.append("    formsGrouping: ").append(toIndentedString(formsGrouping)).append("\n");
    sb.append("    returnSimplifiedConfig: ").append(toIndentedString(returnSimplifiedConfig)).append("\n");
    sb.append("    addKeepExistingValueFlag: ").append(toIndentedString(addKeepExistingValueFlag)).append("\n");
    sb.append("    parseFormField: ").append(toIndentedString(parseFormField)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

