/*
 * eSignAnywhere.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package osplus.esignanywhere.v4.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Automatic signature SigType.
 */
@ApiModel(description = "Automatic signature SigType.")
@JsonPropertyOrder({
  SigTypeAutomaticSignature.JSON_PROPERTY_TR_MOD_TYPE,
  SigTypeAutomaticSignature.JSON_PROPERTY_SEALING_PROFILE_ID,
  SigTypeAutomaticSignature.JSON_PROPERTY_RENDERING_LANGUAGE,
  SigTypeAutomaticSignature.JSON_PROPERTY_ID,
  SigTypeAutomaticSignature.JSON_PROPERTY_DISCRIMINATOR_TYPE,
  SigTypeAutomaticSignature.JSON_PROPERTY_PREFERRED,
  SigTypeAutomaticSignature.JSON_PROPERTY_STAMP_IMPRINT_CONFIGURATION
})
@JsonTypeName("SigTypeAutomaticSignature")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-02-28T10:42:13.714738+01:00[Europe/Berlin]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "DiscriminatorType", visible = true)

public class SigTypeAutomaticSignature extends SigType {
  public static final String JSON_PROPERTY_TR_MOD_TYPE = "TrModType";
  private String trModType;

  public static final String JSON_PROPERTY_SEALING_PROFILE_ID = "SealingProfileId";
  private String sealingProfileId;

  public static final String JSON_PROPERTY_RENDERING_LANGUAGE = "RenderingLanguage";
  private String renderingLanguage;

  public static final String JSON_PROPERTY_ID = "Id";
  private String id;

  public static final String JSON_PROPERTY_DISCRIMINATOR_TYPE = "DiscriminatorType";
  protected String discriminatorType;

  public static final String JSON_PROPERTY_PREFERRED = "Preferred";
  private Boolean preferred;

  public static final String JSON_PROPERTY_STAMP_IMPRINT_CONFIGURATION = "StampImprintConfiguration";
  private StampImprintConfiguration stampImprintConfiguration;


  public SigTypeAutomaticSignature trModType(String trModType) {
    
    this.trModType = trModType;
    return this;
  }

   /**
   * Transaction code modul type.
   * @return trModType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction code modul type.")
  @JsonProperty(JSON_PROPERTY_TR_MOD_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTrModType() {
    return trModType;
  }


  public void setTrModType(String trModType) {
    this.trModType = trModType;
  }


  public SigTypeAutomaticSignature sealingProfileId(String sealingProfileId) {
    
    this.sealingProfileId = sealingProfileId;
    return this;
  }

   /**
   * Get sealingProfileId
   * @return sealingProfileId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SEALING_PROFILE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSealingProfileId() {
    return sealingProfileId;
  }


  public void setSealingProfileId(String sealingProfileId) {
    this.sealingProfileId = sealingProfileId;
  }


  public SigTypeAutomaticSignature renderingLanguage(String renderingLanguage) {
    
    this.renderingLanguage = renderingLanguage;
    return this;
  }

   /**
   * ISO language code
   * @return renderingLanguage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO language code")
  @JsonProperty(JSON_PROPERTY_RENDERING_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRenderingLanguage() {
    return renderingLanguage;
  }


  public void setRenderingLanguage(String renderingLanguage) {
    this.renderingLanguage = renderingLanguage;
  }


  public SigTypeAutomaticSignature id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Define a identifier.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define a identifier.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public SigTypeAutomaticSignature discriminatorType(String discriminatorType) {
    
    this.discriminatorType = discriminatorType;
    return this;
  }

   /**
   * Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
   * @return discriminatorType
  **/
  @ApiModelProperty(required = true, value = "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.")
  @JsonProperty(JSON_PROPERTY_DISCRIMINATOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDiscriminatorType() {
    return discriminatorType;
  }


  public void setDiscriminatorType(String discriminatorType) {
    this.discriminatorType = discriminatorType;
  }


  public SigTypeAutomaticSignature preferred(Boolean preferred) {
    
    this.preferred = preferred;
    return this;
  }

   /**
   * Define if this SigType is the preferred one.
   * @return preferred
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define if this SigType is the preferred one.")
  @JsonProperty(JSON_PROPERTY_PREFERRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPreferred() {
    return preferred;
  }


  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }


  public SigTypeAutomaticSignature stampImprintConfiguration(StampImprintConfiguration stampImprintConfiguration) {
    
    this.stampImprintConfiguration = stampImprintConfiguration;
    return this;
  }

   /**
   * Get stampImprintConfiguration
   * @return stampImprintConfiguration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_STAMP_IMPRINT_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StampImprintConfiguration getStampImprintConfiguration() {
    return stampImprintConfiguration;
  }


  public void setStampImprintConfiguration(StampImprintConfiguration stampImprintConfiguration) {
    this.stampImprintConfiguration = stampImprintConfiguration;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SigTypeAutomaticSignature sigTypeAutomaticSignature = (SigTypeAutomaticSignature) o;
    return Objects.equals(this.trModType, sigTypeAutomaticSignature.trModType) &&
        Objects.equals(this.sealingProfileId, sigTypeAutomaticSignature.sealingProfileId) &&
        Objects.equals(this.renderingLanguage, sigTypeAutomaticSignature.renderingLanguage) &&
        Objects.equals(this.id, sigTypeAutomaticSignature.id) &&
        Objects.equals(this.discriminatorType, sigTypeAutomaticSignature.discriminatorType) &&
        Objects.equals(this.preferred, sigTypeAutomaticSignature.preferred) &&
        Objects.equals(this.stampImprintConfiguration, sigTypeAutomaticSignature.stampImprintConfiguration) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trModType, sealingProfileId, renderingLanguage, id, discriminatorType, preferred, stampImprintConfiguration, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SigTypeAutomaticSignature {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    trModType: ").append(toIndentedString(trModType)).append("\n");
    sb.append("    sealingProfileId: ").append(toIndentedString(sealingProfileId)).append("\n");
    sb.append("    renderingLanguage: ").append(toIndentedString(renderingLanguage)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    discriminatorType: ").append(toIndentedString(discriminatorType)).append("\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("    stampImprintConfiguration: ").append(toIndentedString(stampImprintConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

