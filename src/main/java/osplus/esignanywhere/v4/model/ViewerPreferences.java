/*
 * eSignAnywhere.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package osplus.esignanywhere.v4.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * The Viewer Preferences can be used to adapt the appearance and the behavior of the SignAnyWhere Viewer.
 */
@ApiModel(description = "The Viewer Preferences can be used to adapt the appearance and the behavior of the SignAnyWhere Viewer.")
@JsonPropertyOrder({
  ViewerPreferences.JSON_PROPERTY_SHOW_PAGE_NAVIGATION_BAR,
  ViewerPreferences.JSON_PROPERTY_SHOW_THUMBNAILS,
  ViewerPreferences.JSON_PROPERTY_SKIP_FINISH_CONFIRM_DIALOG,
  ViewerPreferences.JSON_PROPERTY_SKIP_DOCUMENT_DIALOG,
  ViewerPreferences.JSON_PROPERTY_SHOW_IMAGES_IN_FULL_WIDTH,
  ViewerPreferences.JSON_PROPERTY_DISABLE_GEOLOCATION,
  ViewerPreferences.JSON_PROPERTY_SHOW_DOCUMENT_DOWNLOAD_DIALOG_AFTER_AUTOMATIC_FINISH,
  ViewerPreferences.JSON_PROPERTY_ATTACHMENTS_MAX_FILE_SIZE,
  ViewerPreferences.JSON_PROPERTY_SKIP_PREVIEW_IMAGE_ON_DISPOSABLE_CERTIFICATE,
  ViewerPreferences.JSON_PROPERTY_LOAD_CUSTOM_JS,
  ViewerPreferences.JSON_PROPERTY_ALLOW_CUSTOM_BUTTONS,
  ViewerPreferences.JSON_PROPERTY_GUIDING_BEHAVIOR,
  ViewerPreferences.JSON_PROPERTY_FORM_FIELDS_GUIDING_BEHAVIOR,
  ViewerPreferences.JSON_PROPERTY_SHOW_VERSION_NUMBER,
  ViewerPreferences.JSON_PROPERTY_ENABLE_WARNING_POPUP_ON_LEAVE,
  ViewerPreferences.JSON_PROPERTY_WARNING_POPUP_DISPLAY_AFTER,
  ViewerPreferences.JSON_PROPERTY_FINISH_WORKSTEP_ON_OPEN,
  ViewerPreferences.JSON_PROPERTY_AUTO_FINISH_AFTER_REQUIRED_TASKS_DONE,
  ViewerPreferences.JSON_PROPERTY_GUIDING_BEHAVIOR_ON_FINISHED_TASK,
  ViewerPreferences.JSON_PROPERTY_SKIP_THANK_YOU_DIALOG,
  ViewerPreferences.JSON_PROPERTY_NATIVE_APPS_URL_SCHEME,
  ViewerPreferences.JSON_PROPERTY_DOCUMENT_VIEWING_MODE,
  ViewerPreferences.JSON_PROPERTY_THUMBNAIL_MODE,
  ViewerPreferences.JSON_PROPERTY_SHOW_TOP_BAR,
  ViewerPreferences.JSON_PROPERTY_DISPLAY_REJECT_BUTTON_IN_TOP_BAR,
  ViewerPreferences.JSON_PROPERTY_MULTIPLE_SIGNATURE_TYPES_AND_BATCH_SIGNING_SETTINGS,
  ViewerPreferences.JSON_PROPERTY_VISIBLE_AREA_OPTIONS,
  ViewerPreferences.JSON_PROPERTY_SHOW_START_GUIDING_HINT,
  ViewerPreferences.JSON_PROPERTY_SHOW_STATUS_BAR,
  ViewerPreferences.JSON_PROPERTY_SHOW_ZOOM_BUTTONS,
  ViewerPreferences.JSON_PROPERTY_SHOW_NO_GEOLOCATION_WARNING,
  ViewerPreferences.JSON_PROPERTY_AUTO_START_GUIDING,
  ViewerPreferences.JSON_PROPERTY_SHOW_PAGE_GAP,
  ViewerPreferences.JSON_PROPERTY_SHOW_PAGE_NAVIGATION_BUTTONS,
  ViewerPreferences.JSON_PROPERTY_SHOW_FINISH_POSSIBLE_HINT,
  ViewerPreferences.JSON_PROPERTY_SKIP_REJECT_CONFIRM_DIALOG,
  ViewerPreferences.JSON_PROPERTY_BATCH_SIGNING_TYPE,
  ViewerPreferences.JSON_PROPERTY_BATCH_SIGNING_DISABLE_NEXT_BUTTON_UNTIL_DIALOG_SCROLLED_TO_BOTTOM
})
@JsonTypeName("ViewerPreferences")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-02-13T11:25:21.496783+01:00[Europe/Berlin]")
public class ViewerPreferences {
  public static final String JSON_PROPERTY_SHOW_PAGE_NAVIGATION_BAR = "ShowPageNavigationBar";
  private Boolean showPageNavigationBar;

  public static final String JSON_PROPERTY_SHOW_THUMBNAILS = "ShowThumbnails";
  private Boolean showThumbnails;

  public static final String JSON_PROPERTY_SKIP_FINISH_CONFIRM_DIALOG = "SkipFinishConfirmDialog";
  private Boolean skipFinishConfirmDialog;

  public static final String JSON_PROPERTY_SKIP_DOCUMENT_DIALOG = "SkipDocumentDialog";
  private Boolean skipDocumentDialog;

  public static final String JSON_PROPERTY_SHOW_IMAGES_IN_FULL_WIDTH = "ShowImagesInFullWidth";
  private Boolean showImagesInFullWidth;

  public static final String JSON_PROPERTY_DISABLE_GEOLOCATION = "DisableGeolocation";
  private Boolean disableGeolocation;

  public static final String JSON_PROPERTY_SHOW_DOCUMENT_DOWNLOAD_DIALOG_AFTER_AUTOMATIC_FINISH = "ShowDocumentDownloadDialogAfterAutomaticFinish";
  private Boolean showDocumentDownloadDialogAfterAutomaticFinish;

  public static final String JSON_PROPERTY_ATTACHMENTS_MAX_FILE_SIZE = "AttachmentsMaxFileSize";
  private Integer attachmentsMaxFileSize;

  public static final String JSON_PROPERTY_SKIP_PREVIEW_IMAGE_ON_DISPOSABLE_CERTIFICATE = "SkipPreviewImageOnDisposableCertificate";
  private Boolean skipPreviewImageOnDisposableCertificate;

  public static final String JSON_PROPERTY_LOAD_CUSTOM_JS = "LoadCustomJs";
  private Boolean loadCustomJs;

  public static final String JSON_PROPERTY_ALLOW_CUSTOM_BUTTONS = "AllowCustomButtons";
  private Boolean allowCustomButtons;

  /**
   * Defines how the viewer should guide through the tasks.
   */
  public enum GuidingBehaviorEnum {
    GUIDEONLYREQUIREDTASKS("GuideOnlyRequiredTasks"),
    
    GUIDEREQUIREDANDOPTIONALTASKS("GuideRequiredAndOptionalTasks"),
    
    GUIDEDISABLED("GuideDisabled");

    private String value;

    GuidingBehaviorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static GuidingBehaviorEnum fromValue(String value) {
      for (GuidingBehaviorEnum b : GuidingBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_GUIDING_BEHAVIOR = "GuidingBehavior";
  private GuidingBehaviorEnum guidingBehavior;

  /**
   * Defining how the viewer should guide through form fields.
   */
  public enum FormFieldsGuidingBehaviorEnum {
    ALLOWSUBMITALWAYS("AllowSubmitAlways"),
    
    ALLOWSUBMITONLYAFTERALLREQUIREDFIELDSAREDONE("AllowSubmitOnlyAfterAllRequiredFieldsAreDone");

    private String value;

    FormFieldsGuidingBehaviorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FormFieldsGuidingBehaviorEnum fromValue(String value) {
      for (FormFieldsGuidingBehaviorEnum b : FormFieldsGuidingBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FORM_FIELDS_GUIDING_BEHAVIOR = "FormFieldsGuidingBehavior";
  private FormFieldsGuidingBehaviorEnum formFieldsGuidingBehavior;

  public static final String JSON_PROPERTY_SHOW_VERSION_NUMBER = "ShowVersionNumber";
  private Boolean showVersionNumber;

  public static final String JSON_PROPERTY_ENABLE_WARNING_POPUP_ON_LEAVE = "EnableWarningPopupOnLeave";
  private Boolean enableWarningPopupOnLeave;

  /**
   * Defining when the warning popup should be displayed.
   */
  public enum WarningPopupDisplayAfterEnum {
    FILLORSIGNFIELD("FillOrSignField"),
    
    AUTHENTICATION("Authentication"),
    
    ALWAYS("Always"),
    
    AGREEMENT("Agreement");

    private String value;

    WarningPopupDisplayAfterEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static WarningPopupDisplayAfterEnum fromValue(String value) {
      for (WarningPopupDisplayAfterEnum b : WarningPopupDisplayAfterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_WARNING_POPUP_DISPLAY_AFTER = "WarningPopupDisplayAfter";
  private WarningPopupDisplayAfterEnum warningPopupDisplayAfter;

  public static final String JSON_PROPERTY_FINISH_WORKSTEP_ON_OPEN = "FinishWorkstepOnOpen";
  private Boolean finishWorkstepOnOpen;

  public static final String JSON_PROPERTY_AUTO_FINISH_AFTER_REQUIRED_TASKS_DONE = "AutoFinishAfterRequiredTasksDone";
  private Boolean autoFinishAfterRequiredTasksDone;

  /**
   * Defines the guiding behavior after a task has been completed (e.g. signature field has been signed). This flag is not taken into account if the guiding is disabled.
   */
  public enum GuidingBehaviorOnFinishedTaskEnum {
    NOMOVE("NoMove"),
    
    MOVETONEXT("MoveToNext"),
    
    MOVETONEXTANDACTIVATE("MoveToNextAndActivate");

    private String value;

    GuidingBehaviorOnFinishedTaskEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static GuidingBehaviorOnFinishedTaskEnum fromValue(String value) {
      for (GuidingBehaviorOnFinishedTaskEnum b : GuidingBehaviorOnFinishedTaskEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_GUIDING_BEHAVIOR_ON_FINISHED_TASK = "GuidingBehaviorOnFinishedTask";
  private GuidingBehaviorOnFinishedTaskEnum guidingBehaviorOnFinishedTask;

  public static final String JSON_PROPERTY_SKIP_THANK_YOU_DIALOG = "SkipThankYouDialog";
  private Boolean skipThankYouDialog;

  public static final String JSON_PROPERTY_NATIVE_APPS_URL_SCHEME = "NativeAppsUrlScheme";
  private String nativeAppsUrlScheme;

  /**
   * Defines whether the envelope is displayed in its entirety or if only a specific document is shown at a time.
   */
  public enum DocumentViewingModeEnum {
    ENDLESSPAPERALLDOCUMENTS("EndlessPaperAllDocuments"),
    
    ENDLESSPAPERPERDOCUMENT("EndlessPaperPerDocument");

    private String value;

    DocumentViewingModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DocumentViewingModeEnum fromValue(String value) {
      for (DocumentViewingModeEnum b : DocumentViewingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DOCUMENT_VIEWING_MODE = "DocumentViewingMode";
  private DocumentViewingModeEnum documentViewingMode;

  /**
   * Defines the appearance of the thumbnail view: all pages of the entire document are shown, or only the first page of each document within an envelope.
   */
  public enum ThumbnailModeEnum {
    SHOWALLPAGES("ShowAllPages"),
    
    SHOWFIRSTPAGEONLY("ShowFirstPageOnly");

    private String value;

    ThumbnailModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ThumbnailModeEnum fromValue(String value) {
      for (ThumbnailModeEnum b : ThumbnailModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_THUMBNAIL_MODE = "ThumbnailMode";
  private ThumbnailModeEnum thumbnailMode;

  public static final String JSON_PROPERTY_SHOW_TOP_BAR = "ShowTopBar";
  private Boolean showTopBar;

  public static final String JSON_PROPERTY_DISPLAY_REJECT_BUTTON_IN_TOP_BAR = "DisplayRejectButtonInTopBar";
  private Boolean displayRejectButtonInTopBar;

  public static final String JSON_PROPERTY_MULTIPLE_SIGNATURE_TYPES_AND_BATCH_SIGNING_SETTINGS = "MultipleSignatureTypesAndBatchSigningSettings";
  private MultipleSignatureTypesAndBatchSigningSettings multipleSignatureTypesAndBatchSigningSettings;

  public static final String JSON_PROPERTY_VISIBLE_AREA_OPTIONS = "VisibleAreaOptions";
  private VisibleAreaOptions visibleAreaOptions;

  public static final String JSON_PROPERTY_SHOW_START_GUIDING_HINT = "ShowStartGuidingHint";
  private Boolean showStartGuidingHint;

  public static final String JSON_PROPERTY_SHOW_STATUS_BAR = "ShowStatusBar";
  private Boolean showStatusBar;

  public static final String JSON_PROPERTY_SHOW_ZOOM_BUTTONS = "ShowZoomButtons";
  private Boolean showZoomButtons;

  public static final String JSON_PROPERTY_SHOW_NO_GEOLOCATION_WARNING = "ShowNoGeolocationWarning";
  private Boolean showNoGeolocationWarning;

  public static final String JSON_PROPERTY_AUTO_START_GUIDING = "AutoStartGuiding";
  private Boolean autoStartGuiding;

  public static final String JSON_PROPERTY_SHOW_PAGE_GAP = "ShowPageGap";
  private Boolean showPageGap;

  public static final String JSON_PROPERTY_SHOW_PAGE_NAVIGATION_BUTTONS = "ShowPageNavigationButtons";
  private Boolean showPageNavigationButtons;

  public static final String JSON_PROPERTY_SHOW_FINISH_POSSIBLE_HINT = "ShowFinishPossibleHint";
  private Boolean showFinishPossibleHint;

  public static final String JSON_PROPERTY_SKIP_REJECT_CONFIRM_DIALOG = "SkipRejectConfirmDialog";
  private Boolean skipRejectConfirmDialog;

  /**
   * Either Basic/OptIn/OptOut; if not set it should behave like \&quot;Basic\&quot;
   */
  public enum BatchSigningTypeEnum {
    BASIC("Basic"),
    
    OPTIN("OptIn"),
    
    OPTOUT("OptOut"),
    
    OPTOUTWITHREQUIREDALWAYSSELECTED("OptOutWithRequiredAlwaysSelected"),
    
    OPTINWITHREQUIREDALWAYSSELECTED("OptInWithRequiredAlwaysSelected");

    private String value;

    BatchSigningTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BatchSigningTypeEnum fromValue(String value) {
      for (BatchSigningTypeEnum b : BatchSigningTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_BATCH_SIGNING_TYPE = "BatchSigningType";
  private BatchSigningTypeEnum batchSigningType;

  public static final String JSON_PROPERTY_BATCH_SIGNING_DISABLE_NEXT_BUTTON_UNTIL_DIALOG_SCROLLED_TO_BOTTOM = "BatchSigningDisableNextButtonUntilDialogScrolledToBottom";
  private Boolean batchSigningDisableNextButtonUntilDialogScrolledToBottom;


  public ViewerPreferences showPageNavigationBar(Boolean showPageNavigationBar) {
    
    this.showPageNavigationBar = showPageNavigationBar;
    return this;
  }

   /**
   * Obsolete. Replaced by ShowPageNavigationButtons.
   * @return showPageNavigationBar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Obsolete. Replaced by ShowPageNavigationButtons.")
  @JsonProperty(JSON_PROPERTY_SHOW_PAGE_NAVIGATION_BAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShowPageNavigationBar() {
    return showPageNavigationBar;
  }


  public void setShowPageNavigationBar(Boolean showPageNavigationBar) {
    this.showPageNavigationBar = showPageNavigationBar;
  }


  public ViewerPreferences showThumbnails(Boolean showThumbnails) {
    
    this.showThumbnails = showThumbnails;
    return this;
  }

   /**
   * If enabled, the thumbnail display will be visible, otherwise false.
   * @return showThumbnails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If enabled, the thumbnail display will be visible, otherwise false.")
  @JsonProperty(JSON_PROPERTY_SHOW_THUMBNAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShowThumbnails() {
    return showThumbnails;
  }


  public void setShowThumbnails(Boolean showThumbnails) {
    this.showThumbnails = showThumbnails;
  }


  public ViewerPreferences skipFinishConfirmDialog(Boolean skipFinishConfirmDialog) {
    
    this.skipFinishConfirmDialog = skipFinishConfirmDialog;
    return this;
  }

   /**
   * If enabled, finish action will be executed immediately without confirm dialog.
   * @return skipFinishConfirmDialog
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If enabled, finish action will be executed immediately without confirm dialog.")
  @JsonProperty(JSON_PROPERTY_SKIP_FINISH_CONFIRM_DIALOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSkipFinishConfirmDialog() {
    return skipFinishConfirmDialog;
  }


  public void setSkipFinishConfirmDialog(Boolean skipFinishConfirmDialog) {
    this.skipFinishConfirmDialog = skipFinishConfirmDialog;
  }


  public ViewerPreferences skipDocumentDialog(Boolean skipDocumentDialog) {
    
    this.skipDocumentDialog = skipDocumentDialog;
    return this;
  }

   /**
   * If enabled, the download document dialog after finishing the workstep will be skipped.
   * @return skipDocumentDialog
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If enabled, the download document dialog after finishing the workstep will be skipped.")
  @JsonProperty(JSON_PROPERTY_SKIP_DOCUMENT_DIALOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSkipDocumentDialog() {
    return skipDocumentDialog;
  }


  public void setSkipDocumentDialog(Boolean skipDocumentDialog) {
    this.skipDocumentDialog = skipDocumentDialog;
  }


  public ViewerPreferences showImagesInFullWidth(Boolean showImagesInFullWidth) {
    
    this.showImagesInFullWidth = showImagesInFullWidth;
    return this;
  }

   /**
   * If enabled, available width will be used for images which might stretch them.
   * @return showImagesInFullWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If enabled, available width will be used for images which might stretch them.")
  @JsonProperty(JSON_PROPERTY_SHOW_IMAGES_IN_FULL_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShowImagesInFullWidth() {
    return showImagesInFullWidth;
  }


  public void setShowImagesInFullWidth(Boolean showImagesInFullWidth) {
    this.showImagesInFullWidth = showImagesInFullWidth;
  }


  public ViewerPreferences disableGeolocation(Boolean disableGeolocation) {
    
    this.disableGeolocation = disableGeolocation;
    return this;
  }

   /**
   * If enabled, Geolocation won&#39;t be used for webservice calls.
   * @return disableGeolocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If enabled, Geolocation won't be used for webservice calls.")
  @JsonProperty(JSON_PROPERTY_DISABLE_GEOLOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDisableGeolocation() {
    return disableGeolocation;
  }


  public void setDisableGeolocation(Boolean disableGeolocation) {
    this.disableGeolocation = disableGeolocation;
  }


  public ViewerPreferences showDocumentDownloadDialogAfterAutomaticFinish(Boolean showDocumentDownloadDialogAfterAutomaticFinish) {
    
    this.showDocumentDownloadDialogAfterAutomaticFinish = showDocumentDownloadDialogAfterAutomaticFinish;
    return this;
  }

   /**
   * If enabled, the \&quot;Download documents dialog\&quot; after automatically finishing the workstep will be shown (e.g. acknowledge receipt scenario).
   * @return showDocumentDownloadDialogAfterAutomaticFinish
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If enabled, the \"Download documents dialog\" after automatically finishing the workstep will be shown (e.g. acknowledge receipt scenario).")
  @JsonProperty(JSON_PROPERTY_SHOW_DOCUMENT_DOWNLOAD_DIALOG_AFTER_AUTOMATIC_FINISH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShowDocumentDownloadDialogAfterAutomaticFinish() {
    return showDocumentDownloadDialogAfterAutomaticFinish;
  }


  public void setShowDocumentDownloadDialogAfterAutomaticFinish(Boolean showDocumentDownloadDialogAfterAutomaticFinish) {
    this.showDocumentDownloadDialogAfterAutomaticFinish = showDocumentDownloadDialogAfterAutomaticFinish;
  }


  public ViewerPreferences attachmentsMaxFileSize(Integer attachmentsMaxFileSize) {
    
    this.attachmentsMaxFileSize = attachmentsMaxFileSize;
    return this;
  }

   /**
   * Allows to configure the maximum file size for attachments in kBytes.
   * @return attachmentsMaxFileSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allows to configure the maximum file size for attachments in kBytes.")
  @JsonProperty(JSON_PROPERTY_ATTACHMENTS_MAX_FILE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAttachmentsMaxFileSize() {
    return attachmentsMaxFileSize;
  }


  public void setAttachmentsMaxFileSize(Integer attachmentsMaxFileSize) {
    this.attachmentsMaxFileSize = attachmentsMaxFileSize;
  }


  public ViewerPreferences skipPreviewImageOnDisposableCertificate(Boolean skipPreviewImageOnDisposableCertificate) {
    
    this.skipPreviewImageOnDisposableCertificate = skipPreviewImageOnDisposableCertificate;
    return this;
  }

   /**
   * Allows to disable the preview image of the signature when using the Namirial Disposable certificate functionality.
   * @return skipPreviewImageOnDisposableCertificate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allows to disable the preview image of the signature when using the Namirial Disposable certificate functionality.")
  @JsonProperty(JSON_PROPERTY_SKIP_PREVIEW_IMAGE_ON_DISPOSABLE_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSkipPreviewImageOnDisposableCertificate() {
    return skipPreviewImageOnDisposableCertificate;
  }


  public void setSkipPreviewImageOnDisposableCertificate(Boolean skipPreviewImageOnDisposableCertificate) {
    this.skipPreviewImageOnDisposableCertificate = skipPreviewImageOnDisposableCertificate;
  }


  public ViewerPreferences loadCustomJs(Boolean loadCustomJs) {
    
    this.loadCustomJs = loadCustomJs;
    return this;
  }

   /**
   * If enabled, a Custom.js file will be loaded when the page is opened allowing to configure customized data.
   * @return loadCustomJs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If enabled, a Custom.js file will be loaded when the page is opened allowing to configure customized data.")
  @JsonProperty(JSON_PROPERTY_LOAD_CUSTOM_JS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLoadCustomJs() {
    return loadCustomJs;
  }


  public void setLoadCustomJs(Boolean loadCustomJs) {
    this.loadCustomJs = loadCustomJs;
  }


  public ViewerPreferences allowCustomButtons(Boolean allowCustomButtons) {
    
    this.allowCustomButtons = allowCustomButtons;
    return this;
  }

   /**
   * If enabled, custom buttons can be added via xyzmo.Customization plugin.
   * @return allowCustomButtons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If enabled, custom buttons can be added via xyzmo.Customization plugin.")
  @JsonProperty(JSON_PROPERTY_ALLOW_CUSTOM_BUTTONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowCustomButtons() {
    return allowCustomButtons;
  }


  public void setAllowCustomButtons(Boolean allowCustomButtons) {
    this.allowCustomButtons = allowCustomButtons;
  }


  public ViewerPreferences guidingBehavior(GuidingBehaviorEnum guidingBehavior) {
    
    this.guidingBehavior = guidingBehavior;
    return this;
  }

   /**
   * Defines how the viewer should guide through the tasks.
   * @return guidingBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines how the viewer should guide through the tasks.")
  @JsonProperty(JSON_PROPERTY_GUIDING_BEHAVIOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GuidingBehaviorEnum getGuidingBehavior() {
    return guidingBehavior;
  }


  public void setGuidingBehavior(GuidingBehaviorEnum guidingBehavior) {
    this.guidingBehavior = guidingBehavior;
  }


  public ViewerPreferences formFieldsGuidingBehavior(FormFieldsGuidingBehaviorEnum formFieldsGuidingBehavior) {
    
    this.formFieldsGuidingBehavior = formFieldsGuidingBehavior;
    return this;
  }

   /**
   * Defining how the viewer should guide through form fields.
   * @return formFieldsGuidingBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defining how the viewer should guide through form fields.")
  @JsonProperty(JSON_PROPERTY_FORM_FIELDS_GUIDING_BEHAVIOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FormFieldsGuidingBehaviorEnum getFormFieldsGuidingBehavior() {
    return formFieldsGuidingBehavior;
  }


  public void setFormFieldsGuidingBehavior(FormFieldsGuidingBehaviorEnum formFieldsGuidingBehavior) {
    this.formFieldsGuidingBehavior = formFieldsGuidingBehavior;
  }


  public ViewerPreferences showVersionNumber(Boolean showVersionNumber) {
    
    this.showVersionNumber = showVersionNumber;
    return this;
  }

   /**
   * Obsolete. Defining if the viewer should show the version number.
   * @return showVersionNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Obsolete. Defining if the viewer should show the version number.")
  @JsonProperty(JSON_PROPERTY_SHOW_VERSION_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShowVersionNumber() {
    return showVersionNumber;
  }


  public void setShowVersionNumber(Boolean showVersionNumber) {
    this.showVersionNumber = showVersionNumber;
  }


  public ViewerPreferences enableWarningPopupOnLeave(Boolean enableWarningPopupOnLeave) {
    
    this.enableWarningPopupOnLeave = enableWarningPopupOnLeave;
    return this;
  }

   /**
   * Defining if the viewer should display a warning popup when the user leaves the page.
   * @return enableWarningPopupOnLeave
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defining if the viewer should display a warning popup when the user leaves the page.")
  @JsonProperty(JSON_PROPERTY_ENABLE_WARNING_POPUP_ON_LEAVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableWarningPopupOnLeave() {
    return enableWarningPopupOnLeave;
  }


  public void setEnableWarningPopupOnLeave(Boolean enableWarningPopupOnLeave) {
    this.enableWarningPopupOnLeave = enableWarningPopupOnLeave;
  }


  public ViewerPreferences warningPopupDisplayAfter(WarningPopupDisplayAfterEnum warningPopupDisplayAfter) {
    
    this.warningPopupDisplayAfter = warningPopupDisplayAfter;
    return this;
  }

   /**
   * Defining when the warning popup should be displayed.
   * @return warningPopupDisplayAfter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defining when the warning popup should be displayed.")
  @JsonProperty(JSON_PROPERTY_WARNING_POPUP_DISPLAY_AFTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WarningPopupDisplayAfterEnum getWarningPopupDisplayAfter() {
    return warningPopupDisplayAfter;
  }


  public void setWarningPopupDisplayAfter(WarningPopupDisplayAfterEnum warningPopupDisplayAfter) {
    this.warningPopupDisplayAfter = warningPopupDisplayAfter;
  }


  public ViewerPreferences finishWorkstepOnOpen(Boolean finishWorkstepOnOpen) {
    
    this.finishWorkstepOnOpen = finishWorkstepOnOpen;
    return this;
  }

   /**
   * If set to 1 the workstep is automatically finished when opened in the viewer, if finishing is possible.
   * @return finishWorkstepOnOpen
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If set to 1 the workstep is automatically finished when opened in the viewer, if finishing is possible.")
  @JsonProperty(JSON_PROPERTY_FINISH_WORKSTEP_ON_OPEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFinishWorkstepOnOpen() {
    return finishWorkstepOnOpen;
  }


  public void setFinishWorkstepOnOpen(Boolean finishWorkstepOnOpen) {
    this.finishWorkstepOnOpen = finishWorkstepOnOpen;
  }


  public ViewerPreferences autoFinishAfterRequiredTasksDone(Boolean autoFinishAfterRequiredTasksDone) {
    
    this.autoFinishAfterRequiredTasksDone = autoFinishAfterRequiredTasksDone;
    return this;
  }

   /**
   * If enabled, finish action will be automatically triggered after last required task is done.
   * @return autoFinishAfterRequiredTasksDone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If enabled, finish action will be automatically triggered after last required task is done.")
  @JsonProperty(JSON_PROPERTY_AUTO_FINISH_AFTER_REQUIRED_TASKS_DONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAutoFinishAfterRequiredTasksDone() {
    return autoFinishAfterRequiredTasksDone;
  }


  public void setAutoFinishAfterRequiredTasksDone(Boolean autoFinishAfterRequiredTasksDone) {
    this.autoFinishAfterRequiredTasksDone = autoFinishAfterRequiredTasksDone;
  }


  public ViewerPreferences guidingBehaviorOnFinishedTask(GuidingBehaviorOnFinishedTaskEnum guidingBehaviorOnFinishedTask) {
    
    this.guidingBehaviorOnFinishedTask = guidingBehaviorOnFinishedTask;
    return this;
  }

   /**
   * Defines the guiding behavior after a task has been completed (e.g. signature field has been signed). This flag is not taken into account if the guiding is disabled.
   * @return guidingBehaviorOnFinishedTask
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the guiding behavior after a task has been completed (e.g. signature field has been signed). This flag is not taken into account if the guiding is disabled.")
  @JsonProperty(JSON_PROPERTY_GUIDING_BEHAVIOR_ON_FINISHED_TASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GuidingBehaviorOnFinishedTaskEnum getGuidingBehaviorOnFinishedTask() {
    return guidingBehaviorOnFinishedTask;
  }


  public void setGuidingBehaviorOnFinishedTask(GuidingBehaviorOnFinishedTaskEnum guidingBehaviorOnFinishedTask) {
    this.guidingBehaviorOnFinishedTask = guidingBehaviorOnFinishedTask;
  }


  public ViewerPreferences skipThankYouDialog(Boolean skipThankYouDialog) {
    
    this.skipThankYouDialog = skipThankYouDialog;
    return this;
  }

   /**
   * Obsolete. Replaced by ShowFinishPossibleHint.
   * @return skipThankYouDialog
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Obsolete. Replaced by ShowFinishPossibleHint.")
  @JsonProperty(JSON_PROPERTY_SKIP_THANK_YOU_DIALOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSkipThankYouDialog() {
    return skipThankYouDialog;
  }


  public void setSkipThankYouDialog(Boolean skipThankYouDialog) {
    this.skipThankYouDialog = skipThankYouDialog;
  }


  public ViewerPreferences nativeAppsUrlScheme(String nativeAppsUrlScheme) {
    
    this.nativeAppsUrlScheme = nativeAppsUrlScheme;
    return this;
  }

   /**
   * Defines the url scheme for the native SAW Viewer applications (needed for customized SAW Viewer apps).
   * @return nativeAppsUrlScheme
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the url scheme for the native SAW Viewer applications (needed for customized SAW Viewer apps).")
  @JsonProperty(JSON_PROPERTY_NATIVE_APPS_URL_SCHEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNativeAppsUrlScheme() {
    return nativeAppsUrlScheme;
  }


  public void setNativeAppsUrlScheme(String nativeAppsUrlScheme) {
    this.nativeAppsUrlScheme = nativeAppsUrlScheme;
  }


  public ViewerPreferences documentViewingMode(DocumentViewingModeEnum documentViewingMode) {
    
    this.documentViewingMode = documentViewingMode;
    return this;
  }

   /**
   * Defines whether the envelope is displayed in its entirety or if only a specific document is shown at a time.
   * @return documentViewingMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines whether the envelope is displayed in its entirety or if only a specific document is shown at a time.")
  @JsonProperty(JSON_PROPERTY_DOCUMENT_VIEWING_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DocumentViewingModeEnum getDocumentViewingMode() {
    return documentViewingMode;
  }


  public void setDocumentViewingMode(DocumentViewingModeEnum documentViewingMode) {
    this.documentViewingMode = documentViewingMode;
  }


  public ViewerPreferences thumbnailMode(ThumbnailModeEnum thumbnailMode) {
    
    this.thumbnailMode = thumbnailMode;
    return this;
  }

   /**
   * Defines the appearance of the thumbnail view: all pages of the entire document are shown, or only the first page of each document within an envelope.
   * @return thumbnailMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the appearance of the thumbnail view: all pages of the entire document are shown, or only the first page of each document within an envelope.")
  @JsonProperty(JSON_PROPERTY_THUMBNAIL_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ThumbnailModeEnum getThumbnailMode() {
    return thumbnailMode;
  }


  public void setThumbnailMode(ThumbnailModeEnum thumbnailMode) {
    this.thumbnailMode = thumbnailMode;
  }


  public ViewerPreferences showTopBar(Boolean showTopBar) {
    
    this.showTopBar = showTopBar;
    return this;
  }

   /**
   * Defines if the top bar should be visible or not. If disabled, also the &#39;GuidingBehavior&#39; and the &#39;DisplayRejectButtonInTopBar&#39; will be deactivated.
   * @return showTopBar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines if the top bar should be visible or not. If disabled, also the 'GuidingBehavior' and the 'DisplayRejectButtonInTopBar' will be deactivated.")
  @JsonProperty(JSON_PROPERTY_SHOW_TOP_BAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShowTopBar() {
    return showTopBar;
  }


  public void setShowTopBar(Boolean showTopBar) {
    this.showTopBar = showTopBar;
  }


  public ViewerPreferences displayRejectButtonInTopBar(Boolean displayRejectButtonInTopBar) {
    
    this.displayRejectButtonInTopBar = displayRejectButtonInTopBar;
    return this;
  }

   /**
   * If enabled, the &#39;reject&#39; button will be displayed in the left bar below the &#39;finish&#39; button as well
   * @return displayRejectButtonInTopBar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If enabled, the 'reject' button will be displayed in the left bar below the 'finish' button as well")
  @JsonProperty(JSON_PROPERTY_DISPLAY_REJECT_BUTTON_IN_TOP_BAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDisplayRejectButtonInTopBar() {
    return displayRejectButtonInTopBar;
  }


  public void setDisplayRejectButtonInTopBar(Boolean displayRejectButtonInTopBar) {
    this.displayRejectButtonInTopBar = displayRejectButtonInTopBar;
  }


  public ViewerPreferences multipleSignatureTypesAndBatchSigningSettings(MultipleSignatureTypesAndBatchSigningSettings multipleSignatureTypesAndBatchSigningSettings) {
    
    this.multipleSignatureTypesAndBatchSigningSettings = multipleSignatureTypesAndBatchSigningSettings;
    return this;
  }

   /**
   * Get multipleSignatureTypesAndBatchSigningSettings
   * @return multipleSignatureTypesAndBatchSigningSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MULTIPLE_SIGNATURE_TYPES_AND_BATCH_SIGNING_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MultipleSignatureTypesAndBatchSigningSettings getMultipleSignatureTypesAndBatchSigningSettings() {
    return multipleSignatureTypesAndBatchSigningSettings;
  }


  public void setMultipleSignatureTypesAndBatchSigningSettings(MultipleSignatureTypesAndBatchSigningSettings multipleSignatureTypesAndBatchSigningSettings) {
    this.multipleSignatureTypesAndBatchSigningSettings = multipleSignatureTypesAndBatchSigningSettings;
  }


  public ViewerPreferences visibleAreaOptions(VisibleAreaOptions visibleAreaOptions) {
    
    this.visibleAreaOptions = visibleAreaOptions;
    return this;
  }

   /**
   * Get visibleAreaOptions
   * @return visibleAreaOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VISIBLE_AREA_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VisibleAreaOptions getVisibleAreaOptions() {
    return visibleAreaOptions;
  }


  public void setVisibleAreaOptions(VisibleAreaOptions visibleAreaOptions) {
    this.visibleAreaOptions = visibleAreaOptions;
  }


  public ViewerPreferences showStartGuidingHint(Boolean showStartGuidingHint) {
    
    this.showStartGuidingHint = showStartGuidingHint;
    return this;
  }

   /**
   * If enabled, a hint to the next button is shown, where the guide can be started.
   * @return showStartGuidingHint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If enabled, a hint to the next button is shown, where the guide can be started.")
  @JsonProperty(JSON_PROPERTY_SHOW_START_GUIDING_HINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShowStartGuidingHint() {
    return showStartGuidingHint;
  }


  public void setShowStartGuidingHint(Boolean showStartGuidingHint) {
    this.showStartGuidingHint = showStartGuidingHint;
  }


  public ViewerPreferences showStatusBar(Boolean showStatusBar) {
    
    this.showStatusBar = showStatusBar;
    return this;
  }

   /**
   * Defines if the status bar at the bottom should be visible or not. If disabled, product and version number and biometric signature device selection window is not available.
   * @return showStatusBar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines if the status bar at the bottom should be visible or not. If disabled, product and version number and biometric signature device selection window is not available.")
  @JsonProperty(JSON_PROPERTY_SHOW_STATUS_BAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShowStatusBar() {
    return showStatusBar;
  }


  public void setShowStatusBar(Boolean showStatusBar) {
    this.showStatusBar = showStatusBar;
  }


  public ViewerPreferences showZoomButtons(Boolean showZoomButtons) {
    
    this.showZoomButtons = showZoomButtons;
    return this;
  }

   /**
   * Allows to disable the zoom buttons on the left side of the viewer.
   * @return showZoomButtons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allows to disable the zoom buttons on the left side of the viewer.")
  @JsonProperty(JSON_PROPERTY_SHOW_ZOOM_BUTTONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShowZoomButtons() {
    return showZoomButtons;
  }


  public void setShowZoomButtons(Boolean showZoomButtons) {
    this.showZoomButtons = showZoomButtons;
  }


  public ViewerPreferences showNoGeolocationWarning(Boolean showNoGeolocationWarning) {
    
    this.showNoGeolocationWarning = showNoGeolocationWarning;
    return this;
  }

   /**
   * Defines if a warning should be shown in case the browser does not allow to retrieve the geolocation.
   * @return showNoGeolocationWarning
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines if a warning should be shown in case the browser does not allow to retrieve the geolocation.")
  @JsonProperty(JSON_PROPERTY_SHOW_NO_GEOLOCATION_WARNING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShowNoGeolocationWarning() {
    return showNoGeolocationWarning;
  }


  public void setShowNoGeolocationWarning(Boolean showNoGeolocationWarning) {
    this.showNoGeolocationWarning = showNoGeolocationWarning;
  }


  public ViewerPreferences autoStartGuiding(Boolean autoStartGuiding) {
    
    this.autoStartGuiding = autoStartGuiding;
    return this;
  }

   /**
   * Defines if the guiding (if disabled at all) should be started directly upon start.
   * @return autoStartGuiding
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines if the guiding (if disabled at all) should be started directly upon start.")
  @JsonProperty(JSON_PROPERTY_AUTO_START_GUIDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAutoStartGuiding() {
    return autoStartGuiding;
  }


  public void setAutoStartGuiding(Boolean autoStartGuiding) {
    this.autoStartGuiding = autoStartGuiding;
  }


  public ViewerPreferences showPageGap(Boolean showPageGap) {
    
    this.showPageGap = showPageGap;
    return this;
  }

   /**
   * Defines whether or not to show a small gap between pages containing some bits of information (like corresponding document and page x/y) in Desktop/Tablet UI.
   * @return showPageGap
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines whether or not to show a small gap between pages containing some bits of information (like corresponding document and page x/y) in Desktop/Tablet UI.")
  @JsonProperty(JSON_PROPERTY_SHOW_PAGE_GAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShowPageGap() {
    return showPageGap;
  }


  public void setShowPageGap(Boolean showPageGap) {
    this.showPageGap = showPageGap;
  }


  public ViewerPreferences showPageNavigationButtons(Boolean showPageNavigationButtons) {
    
    this.showPageNavigationButtons = showPageNavigationButtons;
    return this;
  }

   /**
   * Allows to disable the page navigation buttons on the left side of the viewer.
   * @return showPageNavigationButtons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allows to disable the page navigation buttons on the left side of the viewer.")
  @JsonProperty(JSON_PROPERTY_SHOW_PAGE_NAVIGATION_BUTTONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShowPageNavigationButtons() {
    return showPageNavigationButtons;
  }


  public void setShowPageNavigationButtons(Boolean showPageNavigationButtons) {
    this.showPageNavigationButtons = showPageNavigationButtons;
  }


  public ViewerPreferences showFinishPossibleHint(Boolean showFinishPossibleHint) {
    
    this.showFinishPossibleHint = showFinishPossibleHint;
    return this;
  }

   /**
   * If enabled, hints that the document can now be finished after all required tasks have been done, will be shown.
   * @return showFinishPossibleHint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If enabled, hints that the document can now be finished after all required tasks have been done, will be shown.")
  @JsonProperty(JSON_PROPERTY_SHOW_FINISH_POSSIBLE_HINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShowFinishPossibleHint() {
    return showFinishPossibleHint;
  }


  public void setShowFinishPossibleHint(Boolean showFinishPossibleHint) {
    this.showFinishPossibleHint = showFinishPossibleHint;
  }


  public ViewerPreferences skipRejectConfirmDialog(Boolean skipRejectConfirmDialog) {
    
    this.skipRejectConfirmDialog = skipRejectConfirmDialog;
    return this;
  }

   /**
   * If enabled, the confirm dialog to accept the reject action will not be shown.
   * @return skipRejectConfirmDialog
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If enabled, the confirm dialog to accept the reject action will not be shown.")
  @JsonProperty(JSON_PROPERTY_SKIP_REJECT_CONFIRM_DIALOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSkipRejectConfirmDialog() {
    return skipRejectConfirmDialog;
  }


  public void setSkipRejectConfirmDialog(Boolean skipRejectConfirmDialog) {
    this.skipRejectConfirmDialog = skipRejectConfirmDialog;
  }


  public ViewerPreferences batchSigningType(BatchSigningTypeEnum batchSigningType) {
    
    this.batchSigningType = batchSigningType;
    return this;
  }

   /**
   * Either Basic/OptIn/OptOut; if not set it should behave like \&quot;Basic\&quot;
   * @return batchSigningType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Either Basic/OptIn/OptOut; if not set it should behave like \"Basic\"")
  @JsonProperty(JSON_PROPERTY_BATCH_SIGNING_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BatchSigningTypeEnum getBatchSigningType() {
    return batchSigningType;
  }


  public void setBatchSigningType(BatchSigningTypeEnum batchSigningType) {
    this.batchSigningType = batchSigningType;
  }


  public ViewerPreferences batchSigningDisableNextButtonUntilDialogScrolledToBottom(Boolean batchSigningDisableNextButtonUntilDialogScrolledToBottom) {
    
    this.batchSigningDisableNextButtonUntilDialogScrolledToBottom = batchSigningDisableNextButtonUntilDialogScrolledToBottom;
    return this;
  }

   /**
   * Either true or false; if not set it should behave like false. Works only in combination with BatchSigningType OptIn/OptOut
   * @return batchSigningDisableNextButtonUntilDialogScrolledToBottom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Either true or false; if not set it should behave like false. Works only in combination with BatchSigningType OptIn/OptOut")
  @JsonProperty(JSON_PROPERTY_BATCH_SIGNING_DISABLE_NEXT_BUTTON_UNTIL_DIALOG_SCROLLED_TO_BOTTOM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getBatchSigningDisableNextButtonUntilDialogScrolledToBottom() {
    return batchSigningDisableNextButtonUntilDialogScrolledToBottom;
  }


  public void setBatchSigningDisableNextButtonUntilDialogScrolledToBottom(Boolean batchSigningDisableNextButtonUntilDialogScrolledToBottom) {
    this.batchSigningDisableNextButtonUntilDialogScrolledToBottom = batchSigningDisableNextButtonUntilDialogScrolledToBottom;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViewerPreferences viewerPreferences = (ViewerPreferences) o;
    return Objects.equals(this.showPageNavigationBar, viewerPreferences.showPageNavigationBar) &&
        Objects.equals(this.showThumbnails, viewerPreferences.showThumbnails) &&
        Objects.equals(this.skipFinishConfirmDialog, viewerPreferences.skipFinishConfirmDialog) &&
        Objects.equals(this.skipDocumentDialog, viewerPreferences.skipDocumentDialog) &&
        Objects.equals(this.showImagesInFullWidth, viewerPreferences.showImagesInFullWidth) &&
        Objects.equals(this.disableGeolocation, viewerPreferences.disableGeolocation) &&
        Objects.equals(this.showDocumentDownloadDialogAfterAutomaticFinish, viewerPreferences.showDocumentDownloadDialogAfterAutomaticFinish) &&
        Objects.equals(this.attachmentsMaxFileSize, viewerPreferences.attachmentsMaxFileSize) &&
        Objects.equals(this.skipPreviewImageOnDisposableCertificate, viewerPreferences.skipPreviewImageOnDisposableCertificate) &&
        Objects.equals(this.loadCustomJs, viewerPreferences.loadCustomJs) &&
        Objects.equals(this.allowCustomButtons, viewerPreferences.allowCustomButtons) &&
        Objects.equals(this.guidingBehavior, viewerPreferences.guidingBehavior) &&
        Objects.equals(this.formFieldsGuidingBehavior, viewerPreferences.formFieldsGuidingBehavior) &&
        Objects.equals(this.showVersionNumber, viewerPreferences.showVersionNumber) &&
        Objects.equals(this.enableWarningPopupOnLeave, viewerPreferences.enableWarningPopupOnLeave) &&
        Objects.equals(this.warningPopupDisplayAfter, viewerPreferences.warningPopupDisplayAfter) &&
        Objects.equals(this.finishWorkstepOnOpen, viewerPreferences.finishWorkstepOnOpen) &&
        Objects.equals(this.autoFinishAfterRequiredTasksDone, viewerPreferences.autoFinishAfterRequiredTasksDone) &&
        Objects.equals(this.guidingBehaviorOnFinishedTask, viewerPreferences.guidingBehaviorOnFinishedTask) &&
        Objects.equals(this.skipThankYouDialog, viewerPreferences.skipThankYouDialog) &&
        Objects.equals(this.nativeAppsUrlScheme, viewerPreferences.nativeAppsUrlScheme) &&
        Objects.equals(this.documentViewingMode, viewerPreferences.documentViewingMode) &&
        Objects.equals(this.thumbnailMode, viewerPreferences.thumbnailMode) &&
        Objects.equals(this.showTopBar, viewerPreferences.showTopBar) &&
        Objects.equals(this.displayRejectButtonInTopBar, viewerPreferences.displayRejectButtonInTopBar) &&
        Objects.equals(this.multipleSignatureTypesAndBatchSigningSettings, viewerPreferences.multipleSignatureTypesAndBatchSigningSettings) &&
        Objects.equals(this.visibleAreaOptions, viewerPreferences.visibleAreaOptions) &&
        Objects.equals(this.showStartGuidingHint, viewerPreferences.showStartGuidingHint) &&
        Objects.equals(this.showStatusBar, viewerPreferences.showStatusBar) &&
        Objects.equals(this.showZoomButtons, viewerPreferences.showZoomButtons) &&
        Objects.equals(this.showNoGeolocationWarning, viewerPreferences.showNoGeolocationWarning) &&
        Objects.equals(this.autoStartGuiding, viewerPreferences.autoStartGuiding) &&
        Objects.equals(this.showPageGap, viewerPreferences.showPageGap) &&
        Objects.equals(this.showPageNavigationButtons, viewerPreferences.showPageNavigationButtons) &&
        Objects.equals(this.showFinishPossibleHint, viewerPreferences.showFinishPossibleHint) &&
        Objects.equals(this.skipRejectConfirmDialog, viewerPreferences.skipRejectConfirmDialog) &&
        Objects.equals(this.batchSigningType, viewerPreferences.batchSigningType) &&
        Objects.equals(this.batchSigningDisableNextButtonUntilDialogScrolledToBottom, viewerPreferences.batchSigningDisableNextButtonUntilDialogScrolledToBottom);
  }

  @Override
  public int hashCode() {
    return Objects.hash(showPageNavigationBar, showThumbnails, skipFinishConfirmDialog, skipDocumentDialog, showImagesInFullWidth, disableGeolocation, showDocumentDownloadDialogAfterAutomaticFinish, attachmentsMaxFileSize, skipPreviewImageOnDisposableCertificate, loadCustomJs, allowCustomButtons, guidingBehavior, formFieldsGuidingBehavior, showVersionNumber, enableWarningPopupOnLeave, warningPopupDisplayAfter, finishWorkstepOnOpen, autoFinishAfterRequiredTasksDone, guidingBehaviorOnFinishedTask, skipThankYouDialog, nativeAppsUrlScheme, documentViewingMode, thumbnailMode, showTopBar, displayRejectButtonInTopBar, multipleSignatureTypesAndBatchSigningSettings, visibleAreaOptions, showStartGuidingHint, showStatusBar, showZoomButtons, showNoGeolocationWarning, autoStartGuiding, showPageGap, showPageNavigationButtons, showFinishPossibleHint, skipRejectConfirmDialog, batchSigningType, batchSigningDisableNextButtonUntilDialogScrolledToBottom);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewerPreferences {\n");
    sb.append("    showPageNavigationBar: ").append(toIndentedString(showPageNavigationBar)).append("\n");
    sb.append("    showThumbnails: ").append(toIndentedString(showThumbnails)).append("\n");
    sb.append("    skipFinishConfirmDialog: ").append(toIndentedString(skipFinishConfirmDialog)).append("\n");
    sb.append("    skipDocumentDialog: ").append(toIndentedString(skipDocumentDialog)).append("\n");
    sb.append("    showImagesInFullWidth: ").append(toIndentedString(showImagesInFullWidth)).append("\n");
    sb.append("    disableGeolocation: ").append(toIndentedString(disableGeolocation)).append("\n");
    sb.append("    showDocumentDownloadDialogAfterAutomaticFinish: ").append(toIndentedString(showDocumentDownloadDialogAfterAutomaticFinish)).append("\n");
    sb.append("    attachmentsMaxFileSize: ").append(toIndentedString(attachmentsMaxFileSize)).append("\n");
    sb.append("    skipPreviewImageOnDisposableCertificate: ").append(toIndentedString(skipPreviewImageOnDisposableCertificate)).append("\n");
    sb.append("    loadCustomJs: ").append(toIndentedString(loadCustomJs)).append("\n");
    sb.append("    allowCustomButtons: ").append(toIndentedString(allowCustomButtons)).append("\n");
    sb.append("    guidingBehavior: ").append(toIndentedString(guidingBehavior)).append("\n");
    sb.append("    formFieldsGuidingBehavior: ").append(toIndentedString(formFieldsGuidingBehavior)).append("\n");
    sb.append("    showVersionNumber: ").append(toIndentedString(showVersionNumber)).append("\n");
    sb.append("    enableWarningPopupOnLeave: ").append(toIndentedString(enableWarningPopupOnLeave)).append("\n");
    sb.append("    warningPopupDisplayAfter: ").append(toIndentedString(warningPopupDisplayAfter)).append("\n");
    sb.append("    finishWorkstepOnOpen: ").append(toIndentedString(finishWorkstepOnOpen)).append("\n");
    sb.append("    autoFinishAfterRequiredTasksDone: ").append(toIndentedString(autoFinishAfterRequiredTasksDone)).append("\n");
    sb.append("    guidingBehaviorOnFinishedTask: ").append(toIndentedString(guidingBehaviorOnFinishedTask)).append("\n");
    sb.append("    skipThankYouDialog: ").append(toIndentedString(skipThankYouDialog)).append("\n");
    sb.append("    nativeAppsUrlScheme: ").append(toIndentedString(nativeAppsUrlScheme)).append("\n");
    sb.append("    documentViewingMode: ").append(toIndentedString(documentViewingMode)).append("\n");
    sb.append("    thumbnailMode: ").append(toIndentedString(thumbnailMode)).append("\n");
    sb.append("    showTopBar: ").append(toIndentedString(showTopBar)).append("\n");
    sb.append("    displayRejectButtonInTopBar: ").append(toIndentedString(displayRejectButtonInTopBar)).append("\n");
    sb.append("    multipleSignatureTypesAndBatchSigningSettings: ").append(toIndentedString(multipleSignatureTypesAndBatchSigningSettings)).append("\n");
    sb.append("    visibleAreaOptions: ").append(toIndentedString(visibleAreaOptions)).append("\n");
    sb.append("    showStartGuidingHint: ").append(toIndentedString(showStartGuidingHint)).append("\n");
    sb.append("    showStatusBar: ").append(toIndentedString(showStatusBar)).append("\n");
    sb.append("    showZoomButtons: ").append(toIndentedString(showZoomButtons)).append("\n");
    sb.append("    showNoGeolocationWarning: ").append(toIndentedString(showNoGeolocationWarning)).append("\n");
    sb.append("    autoStartGuiding: ").append(toIndentedString(autoStartGuiding)).append("\n");
    sb.append("    showPageGap: ").append(toIndentedString(showPageGap)).append("\n");
    sb.append("    showPageNavigationButtons: ").append(toIndentedString(showPageNavigationButtons)).append("\n");
    sb.append("    showFinishPossibleHint: ").append(toIndentedString(showFinishPossibleHint)).append("\n");
    sb.append("    skipRejectConfirmDialog: ").append(toIndentedString(skipRejectConfirmDialog)).append("\n");
    sb.append("    batchSigningType: ").append(toIndentedString(batchSigningType)).append("\n");
    sb.append("    batchSigningDisableNextButtonUntilDialogScrolledToBottom: ").append(toIndentedString(batchSigningDisableNextButtonUntilDialogScrolledToBottom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

