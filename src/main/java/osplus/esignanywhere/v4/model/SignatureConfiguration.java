/*
 * eSignAnywhere.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package osplus.esignanywhere.v4.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Configurate the signatures for this workstep. One default configuration has to be defined. The default configuration is used for flatten signatures, adhoc signatures and signature fields which do not reference a special signature plugin configuration. The default configuration does not contain the attribute &#39;spcId&#39;. If the attribute &#39;spcId&#39; is defined the signature plugin configuration does only apply to signature fields referencing the configuration by specifiying &lt;param name&#x3D;\&quot;spcId\&quot;&gt;id&lt;/param&gt;
 */
@ApiModel(description = "Configurate the signatures for this workstep. One default configuration has to be defined. The default configuration is used for flatten signatures, adhoc signatures and signature fields which do not reference a special signature plugin configuration. The default configuration does not contain the attribute 'spcId'. If the attribute 'spcId' is defined the signature plugin configuration does only apply to signature fields referencing the configuration by specifiying <param name=\"spcId\">id</param>")
@JsonPropertyOrder({
  SignatureConfiguration.JSON_PROPERTY_SPC_ID,
  SignatureConfiguration.JSON_PROPERTY_PDF_SIGNATURE_PROPERTIES,
  SignatureConfiguration.JSON_PROPERTY_PDF_SIGNATURE_CRYPTOGRAPHIC_DATA,
  SignatureConfiguration.JSON_PROPERTY_CERTIFICATE_FILTER
})
@JsonTypeName("SignatureConfiguration")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-02-13T11:25:21.496783+01:00[Europe/Berlin]")
public class SignatureConfiguration {
  public static final String JSON_PROPERTY_SPC_ID = "SpcId";
  private String spcId;

  public static final String JSON_PROPERTY_PDF_SIGNATURE_PROPERTIES = "PdfSignatureProperties";
  private PdfSignatureProperties pdfSignatureProperties;

  public static final String JSON_PROPERTY_PDF_SIGNATURE_CRYPTOGRAPHIC_DATA = "PdfSignatureCryptographicData";
  private PdfSignatureCryptographicData pdfSignatureCryptographicData;

  public static final String JSON_PROPERTY_CERTIFICATE_FILTER = "CertificateFilter";
  private CertificateFilter certificateFilter;


  public SignatureConfiguration spcId(String spcId) {
    
    this.spcId = spcId;
    return this;
  }

   /**
   * Signature plugin configuration id.
   * @return spcId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Signature plugin configuration id.")
  @JsonProperty(JSON_PROPERTY_SPC_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSpcId() {
    return spcId;
  }


  public void setSpcId(String spcId) {
    this.spcId = spcId;
  }


  public SignatureConfiguration pdfSignatureProperties(PdfSignatureProperties pdfSignatureProperties) {
    
    this.pdfSignatureProperties = pdfSignatureProperties;
    return this;
  }

   /**
   * Get pdfSignatureProperties
   * @return pdfSignatureProperties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PDF_SIGNATURE_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PdfSignatureProperties getPdfSignatureProperties() {
    return pdfSignatureProperties;
  }


  public void setPdfSignatureProperties(PdfSignatureProperties pdfSignatureProperties) {
    this.pdfSignatureProperties = pdfSignatureProperties;
  }


  public SignatureConfiguration pdfSignatureCryptographicData(PdfSignatureCryptographicData pdfSignatureCryptographicData) {
    
    this.pdfSignatureCryptographicData = pdfSignatureCryptographicData;
    return this;
  }

   /**
   * Get pdfSignatureCryptographicData
   * @return pdfSignatureCryptographicData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PDF_SIGNATURE_CRYPTOGRAPHIC_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PdfSignatureCryptographicData getPdfSignatureCryptographicData() {
    return pdfSignatureCryptographicData;
  }


  public void setPdfSignatureCryptographicData(PdfSignatureCryptographicData pdfSignatureCryptographicData) {
    this.pdfSignatureCryptographicData = pdfSignatureCryptographicData;
  }


  public SignatureConfiguration certificateFilter(CertificateFilter certificateFilter) {
    
    this.certificateFilter = certificateFilter;
    return this;
  }

   /**
   * Get certificateFilter
   * @return certificateFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CERTIFICATE_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CertificateFilter getCertificateFilter() {
    return certificateFilter;
  }


  public void setCertificateFilter(CertificateFilter certificateFilter) {
    this.certificateFilter = certificateFilter;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignatureConfiguration signatureConfiguration = (SignatureConfiguration) o;
    return Objects.equals(this.spcId, signatureConfiguration.spcId) &&
        Objects.equals(this.pdfSignatureProperties, signatureConfiguration.pdfSignatureProperties) &&
        Objects.equals(this.pdfSignatureCryptographicData, signatureConfiguration.pdfSignatureCryptographicData) &&
        Objects.equals(this.certificateFilter, signatureConfiguration.certificateFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(spcId, pdfSignatureProperties, pdfSignatureCryptographicData, certificateFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignatureConfiguration {\n");
    sb.append("    spcId: ").append(toIndentedString(spcId)).append("\n");
    sb.append("    pdfSignatureProperties: ").append(toIndentedString(pdfSignatureProperties)).append("\n");
    sb.append("    pdfSignatureCryptographicData: ").append(toIndentedString(pdfSignatureCryptographicData)).append("\n");
    sb.append("    certificateFilter: ").append(toIndentedString(certificateFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

