/*
 * eSignAnywhere.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package osplus.esignanywhere.v4.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Signatureplugin certificate filter configuration.
 */
@ApiModel(description = "Signatureplugin certificate filter configuration.")
@JsonPropertyOrder({
  CertificateFilter.JSON_PROPERTY_KEY_USAGES,
  CertificateFilter.JSON_PROPERTY_THUMB_PRINTS,
  CertificateFilter.JSON_PROPERTY_ROOT_THUMB_PRINTS
})
@JsonTypeName("CertificateFilter")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-02-28T10:42:13.714738+01:00[Europe/Berlin]")
public class CertificateFilter {
  public static final String JSON_PROPERTY_KEY_USAGES = "KeyUsages";
  private List<String> keyUsages = null;

  public static final String JSON_PROPERTY_THUMB_PRINTS = "ThumbPrints";
  private List<String> thumbPrints = null;

  public static final String JSON_PROPERTY_ROOT_THUMB_PRINTS = "RootThumbPrints";
  private List<String> rootThumbPrints = null;


  public CertificateFilter keyUsages(List<String> keyUsages) {
    
    this.keyUsages = keyUsages;
    return this;
  }

  public CertificateFilter addKeyUsagesItem(String keyUsagesItem) {
    if (this.keyUsages == null) {
      this.keyUsages = new ArrayList<String>();
    }
    this.keyUsages.add(keyUsagesItem);
    return this;
  }

   /**
   * KeyUsages.
   * @return keyUsages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "KeyUsages.")
  @JsonProperty(JSON_PROPERTY_KEY_USAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getKeyUsages() {
    return keyUsages;
  }


  public void setKeyUsages(List<String> keyUsages) {
    this.keyUsages = keyUsages;
  }


  public CertificateFilter thumbPrints(List<String> thumbPrints) {
    
    this.thumbPrints = thumbPrints;
    return this;
  }

  public CertificateFilter addThumbPrintsItem(String thumbPrintsItem) {
    if (this.thumbPrints == null) {
      this.thumbPrints = new ArrayList<String>();
    }
    this.thumbPrints.add(thumbPrintsItem);
    return this;
  }

   /**
   * ThumbPrints.
   * @return thumbPrints
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ThumbPrints.")
  @JsonProperty(JSON_PROPERTY_THUMB_PRINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getThumbPrints() {
    return thumbPrints;
  }


  public void setThumbPrints(List<String> thumbPrints) {
    this.thumbPrints = thumbPrints;
  }


  public CertificateFilter rootThumbPrints(List<String> rootThumbPrints) {
    
    this.rootThumbPrints = rootThumbPrints;
    return this;
  }

  public CertificateFilter addRootThumbPrintsItem(String rootThumbPrintsItem) {
    if (this.rootThumbPrints == null) {
      this.rootThumbPrints = new ArrayList<String>();
    }
    this.rootThumbPrints.add(rootThumbPrintsItem);
    return this;
  }

   /**
   * RootThumbPrints.
   * @return rootThumbPrints
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "RootThumbPrints.")
  @JsonProperty(JSON_PROPERTY_ROOT_THUMB_PRINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getRootThumbPrints() {
    return rootThumbPrints;
  }


  public void setRootThumbPrints(List<String> rootThumbPrints) {
    this.rootThumbPrints = rootThumbPrints;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateFilter certificateFilter = (CertificateFilter) o;
    return Objects.equals(this.keyUsages, certificateFilter.keyUsages) &&
        Objects.equals(this.thumbPrints, certificateFilter.thumbPrints) &&
        Objects.equals(this.rootThumbPrints, certificateFilter.rootThumbPrints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyUsages, thumbPrints, rootThumbPrints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateFilter {\n");
    sb.append("    keyUsages: ").append(toIndentedString(keyUsages)).append("\n");
    sb.append("    thumbPrints: ").append(toIndentedString(thumbPrints)).append("\n");
    sb.append("    rootThumbPrints: ").append(toIndentedString(rootThumbPrints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

