/*
 * eSignAnywhere.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package osplus.esignanywhere.v4.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Configure PdfSignatureProperties.
 */
@ApiModel(description = "Configure PdfSignatureProperties.")
@JsonPropertyOrder({
  PdfSignatureProperties.JSON_PROPERTY_PDF_A_CONFORMANT,
  PdfSignatureProperties.JSON_PROPERTY_PAD_E_S_PART4_COMPLIANT,
  PdfSignatureProperties.JSON_PROPERTY_INCLUDE_SIGNING_CERTIFICATE_CHAIN,
  PdfSignatureProperties.JSON_PROPERTY_SIGNING_CERTIFICATE_REVOCATION_INFORMATION_INCLUDE_MODE,
  PdfSignatureProperties.JSON_PROPERTY_SIGNATURE_TIMESTAMP_DATA,
  PdfSignatureProperties.JSON_PROPERTY_ENABLE_EUTL_VERIFICATION,
  PdfSignatureProperties.JSON_PROPERTY_ENABLE_VALIDATE_SIGNING_CERTIFICATE_NAME,
  PdfSignatureProperties.JSON_PROPERTY_SIGNING_CERTIFICATE_NAME_REGEX
})
@JsonTypeName("PdfSignatureProperties")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-02-28T10:42:13.714738+01:00[Europe/Berlin]")
public class PdfSignatureProperties {
  public static final String JSON_PROPERTY_PDF_A_CONFORMANT = "PdfAConformant";
  private Boolean pdfAConformant;

  public static final String JSON_PROPERTY_PAD_E_S_PART4_COMPLIANT = "PAdESPart4Compliant";
  private Boolean padESPart4Compliant;

  public static final String JSON_PROPERTY_INCLUDE_SIGNING_CERTIFICATE_CHAIN = "IncludeSigningCertificateChain";
  private Boolean includeSigningCertificateChain;

  /**
   * Define the SigningCertificateRevocationInformationIncludeMode type.
   */
  public enum SigningCertificateRevocationInformationIncludeModeEnum {
    DONOTINCLUDE("DoNotInclude"),
    
    INCLUDE("Include"),
    
    TRYTOINCLUDE("TryToInclude"),
    
    CHECKREVOCATIONINCLUDEOCSP("CheckRevocationIncludeOcsp"),
    
    INCLUDEDSS("IncludeDss"),
    
    TRYTOINCLUDEDSS("TryToIncludeDss");

    private String value;

    SigningCertificateRevocationInformationIncludeModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SigningCertificateRevocationInformationIncludeModeEnum fromValue(String value) {
      for (SigningCertificateRevocationInformationIncludeModeEnum b : SigningCertificateRevocationInformationIncludeModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SIGNING_CERTIFICATE_REVOCATION_INFORMATION_INCLUDE_MODE = "SigningCertificateRevocationInformationIncludeMode";
  private SigningCertificateRevocationInformationIncludeModeEnum signingCertificateRevocationInformationIncludeMode;

  public static final String JSON_PROPERTY_SIGNATURE_TIMESTAMP_DATA = "SignatureTimestampData";
  private SignatureTimestampData signatureTimestampData;

  public static final String JSON_PROPERTY_ENABLE_EUTL_VERIFICATION = "EnableEutlVerification";
  private Boolean enableEutlVerification;

  public static final String JSON_PROPERTY_ENABLE_VALIDATE_SIGNING_CERTIFICATE_NAME = "EnableValidateSigningCertificateName";
  private Boolean enableValidateSigningCertificateName;

  public static final String JSON_PROPERTY_SIGNING_CERTIFICATE_NAME_REGEX = "SigningCertificateNameRegex";
  private String signingCertificateNameRegex;


  public PdfSignatureProperties pdfAConformant(Boolean pdfAConformant) {
    
    this.pdfAConformant = pdfAConformant;
    return this;
  }

   /**
   * Define usage of PdfAConformant.
   * @return pdfAConformant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define usage of PdfAConformant.")
  @JsonProperty(JSON_PROPERTY_PDF_A_CONFORMANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPdfAConformant() {
    return pdfAConformant;
  }


  public void setPdfAConformant(Boolean pdfAConformant) {
    this.pdfAConformant = pdfAConformant;
  }


  public PdfSignatureProperties padESPart4Compliant(Boolean padESPart4Compliant) {
    
    this.padESPart4Compliant = padESPart4Compliant;
    return this;
  }

   /**
   * Define usage of PAdESPart4Compliant.
   * @return padESPart4Compliant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define usage of PAdESPart4Compliant.")
  @JsonProperty(JSON_PROPERTY_PAD_E_S_PART4_COMPLIANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPadESPart4Compliant() {
    return padESPart4Compliant;
  }


  public void setPadESPart4Compliant(Boolean padESPart4Compliant) {
    this.padESPart4Compliant = padESPart4Compliant;
  }


  public PdfSignatureProperties includeSigningCertificateChain(Boolean includeSigningCertificateChain) {
    
    this.includeSigningCertificateChain = includeSigningCertificateChain;
    return this;
  }

   /**
   * Define if SigningCertificateChain should be included.
   * @return includeSigningCertificateChain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define if SigningCertificateChain should be included.")
  @JsonProperty(JSON_PROPERTY_INCLUDE_SIGNING_CERTIFICATE_CHAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIncludeSigningCertificateChain() {
    return includeSigningCertificateChain;
  }


  public void setIncludeSigningCertificateChain(Boolean includeSigningCertificateChain) {
    this.includeSigningCertificateChain = includeSigningCertificateChain;
  }


  public PdfSignatureProperties signingCertificateRevocationInformationIncludeMode(SigningCertificateRevocationInformationIncludeModeEnum signingCertificateRevocationInformationIncludeMode) {
    
    this.signingCertificateRevocationInformationIncludeMode = signingCertificateRevocationInformationIncludeMode;
    return this;
  }

   /**
   * Define the SigningCertificateRevocationInformationIncludeMode type.
   * @return signingCertificateRevocationInformationIncludeMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define the SigningCertificateRevocationInformationIncludeMode type.")
  @JsonProperty(JSON_PROPERTY_SIGNING_CERTIFICATE_REVOCATION_INFORMATION_INCLUDE_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SigningCertificateRevocationInformationIncludeModeEnum getSigningCertificateRevocationInformationIncludeMode() {
    return signingCertificateRevocationInformationIncludeMode;
  }


  public void setSigningCertificateRevocationInformationIncludeMode(SigningCertificateRevocationInformationIncludeModeEnum signingCertificateRevocationInformationIncludeMode) {
    this.signingCertificateRevocationInformationIncludeMode = signingCertificateRevocationInformationIncludeMode;
  }


  public PdfSignatureProperties signatureTimestampData(SignatureTimestampData signatureTimestampData) {
    
    this.signatureTimestampData = signatureTimestampData;
    return this;
  }

   /**
   * Get signatureTimestampData
   * @return signatureTimestampData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SIGNATURE_TIMESTAMP_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SignatureTimestampData getSignatureTimestampData() {
    return signatureTimestampData;
  }


  public void setSignatureTimestampData(SignatureTimestampData signatureTimestampData) {
    this.signatureTimestampData = signatureTimestampData;
  }


  public PdfSignatureProperties enableEutlVerification(Boolean enableEutlVerification) {
    
    this.enableEutlVerification = enableEutlVerification;
    return this;
  }

   /**
   * Enable EUTL verification
   * @return enableEutlVerification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable EUTL verification")
  @JsonProperty(JSON_PROPERTY_ENABLE_EUTL_VERIFICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableEutlVerification() {
    return enableEutlVerification;
  }


  public void setEnableEutlVerification(Boolean enableEutlVerification) {
    this.enableEutlVerification = enableEutlVerification;
  }


  public PdfSignatureProperties enableValidateSigningCertificateName(Boolean enableValidateSigningCertificateName) {
    
    this.enableValidateSigningCertificateName = enableValidateSigningCertificateName;
    return this;
  }

   /**
   * Enable validation of signing certificate name with regex
   * @return enableValidateSigningCertificateName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable validation of signing certificate name with regex")
  @JsonProperty(JSON_PROPERTY_ENABLE_VALIDATE_SIGNING_CERTIFICATE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableValidateSigningCertificateName() {
    return enableValidateSigningCertificateName;
  }


  public void setEnableValidateSigningCertificateName(Boolean enableValidateSigningCertificateName) {
    this.enableValidateSigningCertificateName = enableValidateSigningCertificateName;
  }


  public PdfSignatureProperties signingCertificateNameRegex(String signingCertificateNameRegex) {
    
    this.signingCertificateNameRegex = signingCertificateNameRegex;
    return this;
  }

   /**
   * Signing certificate name regex
   * @return signingCertificateNameRegex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Signing certificate name regex")
  @JsonProperty(JSON_PROPERTY_SIGNING_CERTIFICATE_NAME_REGEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSigningCertificateNameRegex() {
    return signingCertificateNameRegex;
  }


  public void setSigningCertificateNameRegex(String signingCertificateNameRegex) {
    this.signingCertificateNameRegex = signingCertificateNameRegex;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfSignatureProperties pdfSignatureProperties = (PdfSignatureProperties) o;
    return Objects.equals(this.pdfAConformant, pdfSignatureProperties.pdfAConformant) &&
        Objects.equals(this.padESPart4Compliant, pdfSignatureProperties.padESPart4Compliant) &&
        Objects.equals(this.includeSigningCertificateChain, pdfSignatureProperties.includeSigningCertificateChain) &&
        Objects.equals(this.signingCertificateRevocationInformationIncludeMode, pdfSignatureProperties.signingCertificateRevocationInformationIncludeMode) &&
        Objects.equals(this.signatureTimestampData, pdfSignatureProperties.signatureTimestampData) &&
        Objects.equals(this.enableEutlVerification, pdfSignatureProperties.enableEutlVerification) &&
        Objects.equals(this.enableValidateSigningCertificateName, pdfSignatureProperties.enableValidateSigningCertificateName) &&
        Objects.equals(this.signingCertificateNameRegex, pdfSignatureProperties.signingCertificateNameRegex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pdfAConformant, padESPart4Compliant, includeSigningCertificateChain, signingCertificateRevocationInformationIncludeMode, signatureTimestampData, enableEutlVerification, enableValidateSigningCertificateName, signingCertificateNameRegex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfSignatureProperties {\n");
    sb.append("    pdfAConformant: ").append(toIndentedString(pdfAConformant)).append("\n");
    sb.append("    padESPart4Compliant: ").append(toIndentedString(padESPart4Compliant)).append("\n");
    sb.append("    includeSigningCertificateChain: ").append(toIndentedString(includeSigningCertificateChain)).append("\n");
    sb.append("    signingCertificateRevocationInformationIncludeMode: ").append(toIndentedString(signingCertificateRevocationInformationIncludeMode)).append("\n");
    sb.append("    signatureTimestampData: ").append(toIndentedString(signatureTimestampData)).append("\n");
    sb.append("    enableEutlVerification: ").append(toIndentedString(enableEutlVerification)).append("\n");
    sb.append("    enableValidateSigningCertificateName: ").append(toIndentedString(enableValidateSigningCertificateName)).append("\n");
    sb.append("    signingCertificateNameRegex: ").append(toIndentedString(signingCertificateNameRegex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

