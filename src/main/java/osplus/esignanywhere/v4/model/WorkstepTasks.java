/*
 * eSignAnywhere.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package osplus.esignanywhere.v4.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModelProperty;

/**
 * WorkstepTasks
 */
@JsonPropertyOrder({
  WorkstepTasks.JSON_PROPERTY_PICTURE_ANNOTATION_MIN_RESOLUTION,
  WorkstepTasks.JSON_PROPERTY_PICTURE_ANNOTATION_MAX_RESOLUTION,
  WorkstepTasks.JSON_PROPERTY_PICTURE_ANNOTATION_COLOR_DEPTH,
  WorkstepTasks.JSON_PROPERTY_SET_FORM_FIELDS_TO_READ_ONLY_AFTER_TASK,
  WorkstepTasks.JSON_PROPERTY_SEQUENCE_MODE,
  WorkstepTasks.JSON_PROPERTY_POSITION_UNITS,
  WorkstepTasks.JSON_PROPERTY_REFERENCE_CORNER,
  WorkstepTasks.JSON_PROPERTY_TASKS
})
@JsonTypeName("WorkstepTasks")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-02-28T10:42:13.714738+01:00[Europe/Berlin]")
public class WorkstepTasks {
  public static final String JSON_PROPERTY_PICTURE_ANNOTATION_MIN_RESOLUTION = "PictureAnnotationMinResolution";
  private Integer pictureAnnotationMinResolution = -1;

  public static final String JSON_PROPERTY_PICTURE_ANNOTATION_MAX_RESOLUTION = "PictureAnnotationMaxResolution";
  private Integer pictureAnnotationMaxResolution = -1;

  /**
   * Defines the color depth for PictureAnnotation.
   */
  public enum PictureAnnotationColorDepthEnum {
    COLOR16M("Color16M"),
    
    GRAYSCALE256("Grayscale256");

    private String value;

    PictureAnnotationColorDepthEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PictureAnnotationColorDepthEnum fromValue(String value) {
      for (PictureAnnotationColorDepthEnum b : PictureAnnotationColorDepthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PICTURE_ANNOTATION_COLOR_DEPTH = "PictureAnnotationColorDepth";
  private PictureAnnotationColorDepthEnum pictureAnnotationColorDepth = PictureAnnotationColorDepthEnum.COLOR16M;

  public static final String JSON_PROPERTY_SET_FORM_FIELDS_TO_READ_ONLY_AFTER_TASK = "SetFormFieldsToReadOnlyAfterTask";
  private String setFormFieldsToReadOnlyAfterTask;

  /**
   * Mode for sequence of
   */
  public enum SequenceModeEnum {
    NOSEQUENCEENFORCED("NoSequenceEnforced"),
    
    SEQUENCEONLYREQUIREDTASKS("SequenceOnlyRequiredTasks"),
    
    SEQUENCEENFORCED("SequenceEnforced");

    private String value;

    SequenceModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SequenceModeEnum fromValue(String value) {
      for (SequenceModeEnum b : SequenceModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SEQUENCE_MODE = "SequenceMode";
  private SequenceModeEnum sequenceMode = SequenceModeEnum.NOSEQUENCEENFORCED;

  /**
   * Define the default position units.
   */
  public enum PositionUnitsEnum {
    PDFUNITS("PdfUnits"),
    
    INCHES("Inches"),
    
    MILLIMETERS("Millimeters");

    private String value;

    PositionUnitsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PositionUnitsEnum fromValue(String value) {
      for (PositionUnitsEnum b : PositionUnitsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_POSITION_UNITS = "PositionUnits";
  private PositionUnitsEnum positionUnits = PositionUnitsEnum.PDFUNITS;

  /**
   * Define the default reference corner.
   */
  public enum ReferenceCornerEnum {
    UPPER_RIGHT("Upper_Right"),
    
    UPPER_LEFT("Upper_Left"),
    
    LOWER_RIGHT("Lower_Right"),
    
    LOWER_LEFT("Lower_Left");

    private String value;

    ReferenceCornerEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ReferenceCornerEnum fromValue(String value) {
      for (ReferenceCornerEnum b : ReferenceCornerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_REFERENCE_CORNER = "ReferenceCorner";
  private ReferenceCornerEnum referenceCorner = ReferenceCornerEnum.LOWER_LEFT;

  public static final String JSON_PROPERTY_TASKS = "Tasks";
  private List<WorkstepTask> tasks = null;


  public WorkstepTasks pictureAnnotationMinResolution(Integer pictureAnnotationMinResolution) {
    
    this.pictureAnnotationMinResolution = pictureAnnotationMinResolution;
    return this;
  }

   /**
   * Minimum resolution for PictureAnnotation of the picture based on the target size.
   * @return pictureAnnotationMinResolution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Minimum resolution for PictureAnnotation of the picture based on the target size.")
  @JsonProperty(JSON_PROPERTY_PICTURE_ANNOTATION_MIN_RESOLUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPictureAnnotationMinResolution() {
    return pictureAnnotationMinResolution;
  }


  public void setPictureAnnotationMinResolution(Integer pictureAnnotationMinResolution) {
    this.pictureAnnotationMinResolution = pictureAnnotationMinResolution;
  }


  public WorkstepTasks pictureAnnotationMaxResolution(Integer pictureAnnotationMaxResolution) {
    
    this.pictureAnnotationMaxResolution = pictureAnnotationMaxResolution;
    return this;
  }

   /**
   * Minimum resolution of PictureAnnotation the picture based on the target size.
   * @return pictureAnnotationMaxResolution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Minimum resolution of PictureAnnotation the picture based on the target size.")
  @JsonProperty(JSON_PROPERTY_PICTURE_ANNOTATION_MAX_RESOLUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPictureAnnotationMaxResolution() {
    return pictureAnnotationMaxResolution;
  }


  public void setPictureAnnotationMaxResolution(Integer pictureAnnotationMaxResolution) {
    this.pictureAnnotationMaxResolution = pictureAnnotationMaxResolution;
  }


  public WorkstepTasks pictureAnnotationColorDepth(PictureAnnotationColorDepthEnum pictureAnnotationColorDepth) {
    
    this.pictureAnnotationColorDepth = pictureAnnotationColorDepth;
    return this;
  }

   /**
   * Defines the color depth for PictureAnnotation.
   * @return pictureAnnotationColorDepth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the color depth for PictureAnnotation.")
  @JsonProperty(JSON_PROPERTY_PICTURE_ANNOTATION_COLOR_DEPTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PictureAnnotationColorDepthEnum getPictureAnnotationColorDepth() {
    return pictureAnnotationColorDepth;
  }


  public void setPictureAnnotationColorDepth(PictureAnnotationColorDepthEnum pictureAnnotationColorDepth) {
    this.pictureAnnotationColorDepth = pictureAnnotationColorDepth;
  }


  public WorkstepTasks setFormFieldsToReadOnlyAfterTask(String setFormFieldsToReadOnlyAfterTask) {
    
    this.setFormFieldsToReadOnlyAfterTask = setFormFieldsToReadOnlyAfterTask;
    return this;
  }

   /**
   * set all form fields in the document to readonly right before this task is executed.
   * @return setFormFieldsToReadOnlyAfterTask
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "set all form fields in the document to readonly right before this task is executed.")
  @JsonProperty(JSON_PROPERTY_SET_FORM_FIELDS_TO_READ_ONLY_AFTER_TASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSetFormFieldsToReadOnlyAfterTask() {
    return setFormFieldsToReadOnlyAfterTask;
  }


  public void setSetFormFieldsToReadOnlyAfterTask(String setFormFieldsToReadOnlyAfterTask) {
    this.setFormFieldsToReadOnlyAfterTask = setFormFieldsToReadOnlyAfterTask;
  }


  public WorkstepTasks sequenceMode(SequenceModeEnum sequenceMode) {
    
    this.sequenceMode = sequenceMode;
    return this;
  }

   /**
   * Mode for sequence of
   * @return sequenceMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Mode for sequence of")
  @JsonProperty(JSON_PROPERTY_SEQUENCE_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SequenceModeEnum getSequenceMode() {
    return sequenceMode;
  }


  public void setSequenceMode(SequenceModeEnum sequenceMode) {
    this.sequenceMode = sequenceMode;
  }


  public WorkstepTasks positionUnits(PositionUnitsEnum positionUnits) {
    
    this.positionUnits = positionUnits;
    return this;
  }

   /**
   * Define the default position units.
   * @return positionUnits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define the default position units.")
  @JsonProperty(JSON_PROPERTY_POSITION_UNITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PositionUnitsEnum getPositionUnits() {
    return positionUnits;
  }


  public void setPositionUnits(PositionUnitsEnum positionUnits) {
    this.positionUnits = positionUnits;
  }


  public WorkstepTasks referenceCorner(ReferenceCornerEnum referenceCorner) {
    
    this.referenceCorner = referenceCorner;
    return this;
  }

   /**
   * Define the default reference corner.
   * @return referenceCorner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define the default reference corner.")
  @JsonProperty(JSON_PROPERTY_REFERENCE_CORNER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ReferenceCornerEnum getReferenceCorner() {
    return referenceCorner;
  }


  public void setReferenceCorner(ReferenceCornerEnum referenceCorner) {
    this.referenceCorner = referenceCorner;
  }


  public WorkstepTasks tasks(List<WorkstepTask> tasks) {
    
    this.tasks = tasks;
    return this;
  }

  public WorkstepTasks addTasksItem(WorkstepTask tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<WorkstepTask>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

   /**
   * Collection of tasks that are assigned and have to be processed.
   * @return tasks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Collection of tasks that are assigned and have to be processed.")
  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<WorkstepTask> getTasks() {
    return tasks;
  }


  public void setTasks(List<WorkstepTask> tasks) {
    this.tasks = tasks;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkstepTasks workstepTasks = (WorkstepTasks) o;
    return Objects.equals(this.pictureAnnotationMinResolution, workstepTasks.pictureAnnotationMinResolution) &&
        Objects.equals(this.pictureAnnotationMaxResolution, workstepTasks.pictureAnnotationMaxResolution) &&
        Objects.equals(this.pictureAnnotationColorDepth, workstepTasks.pictureAnnotationColorDepth) &&
        Objects.equals(this.setFormFieldsToReadOnlyAfterTask, workstepTasks.setFormFieldsToReadOnlyAfterTask) &&
        Objects.equals(this.sequenceMode, workstepTasks.sequenceMode) &&
        Objects.equals(this.positionUnits, workstepTasks.positionUnits) &&
        Objects.equals(this.referenceCorner, workstepTasks.referenceCorner) &&
        Objects.equals(this.tasks, workstepTasks.tasks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pictureAnnotationMinResolution, pictureAnnotationMaxResolution, pictureAnnotationColorDepth, setFormFieldsToReadOnlyAfterTask, sequenceMode, positionUnits, referenceCorner, tasks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkstepTasks {\n");
    sb.append("    pictureAnnotationMinResolution: ").append(toIndentedString(pictureAnnotationMinResolution)).append("\n");
    sb.append("    pictureAnnotationMaxResolution: ").append(toIndentedString(pictureAnnotationMaxResolution)).append("\n");
    sb.append("    pictureAnnotationColorDepth: ").append(toIndentedString(pictureAnnotationColorDepth)).append("\n");
    sb.append("    setFormFieldsToReadOnlyAfterTask: ").append(toIndentedString(setFormFieldsToReadOnlyAfterTask)).append("\n");
    sb.append("    sequenceMode: ").append(toIndentedString(sequenceMode)).append("\n");
    sb.append("    positionUnits: ").append(toIndentedString(positionUnits)).append("\n");
    sb.append("    referenceCorner: ").append(toIndentedString(referenceCorner)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

