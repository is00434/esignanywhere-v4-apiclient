/*
 * eSignAnywhere.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package osplus.esignanywhere.v4.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModelProperty;

/**
 * AddTextBoxFormFieldDescriptor
 */
@JsonPropertyOrder({
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_VALUE,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_MAX_LENGTH,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_IS_MULTILINE,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_IS_PASSWORD,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_IS_FILE_SELECT,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_IS_SCROLL_ALLOWED,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_IS_COMB,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_TEXT_COLOR,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_FONT_SIZE,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_FONT_NAME,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_BOLD,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_ITALIC,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_TEXT_ALIGN,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_NAME,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_READ_ONLY,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_REQUIRED,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_X,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_Y,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_WIDTH,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_HEIGHT,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_PAGE,
  AddTextBoxFormFieldDescriptor.JSON_PROPERTY_DISCRIMINATOR_TYPE
})
@JsonTypeName("AddTextBoxFormFieldDescriptor")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-02-13T11:25:21.496783+01:00[Europe/Berlin]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "DiscriminatorType", visible = true)

public class AddTextBoxFormFieldDescriptor extends AddFormFieldDescriptor {
  public static final String JSON_PROPERTY_VALUE = "Value";
  private String value = "";

  public static final String JSON_PROPERTY_MAX_LENGTH = "MaxLength";
  private Integer maxLength = -1;

  public static final String JSON_PROPERTY_IS_MULTILINE = "IsMultiline";
  private Boolean isMultiline = false;

  public static final String JSON_PROPERTY_IS_PASSWORD = "IsPassword";
  private Boolean isPassword = false;

  public static final String JSON_PROPERTY_IS_FILE_SELECT = "IsFileSelect";
  private Boolean isFileSelect = false;

  public static final String JSON_PROPERTY_IS_SCROLL_ALLOWED = "IsScrollAllowed";
  private Boolean isScrollAllowed = false;

  public static final String JSON_PROPERTY_IS_COMB = "IsComb";
  private Boolean isComb = false;

  public static final String JSON_PROPERTY_TEXT_COLOR = "TextColor";
  private String textColor = "Red";

  public static final String JSON_PROPERTY_FONT_SIZE = "FontSize";
  private Double fontSize;

  public static final String JSON_PROPERTY_FONT_NAME = "FontName";
  private String fontName;

  public static final String JSON_PROPERTY_BOLD = "Bold";
  private Boolean bold = false;

  public static final String JSON_PROPERTY_ITALIC = "Italic";
  private Boolean italic = false;

  /**
   * Text alignment. Default is left.
   */
  public enum TextAlignEnum {
    LEFT("Left"),
    
    CENTER("Center"),
    
    RIGHT("Right");

    private String value;

    TextAlignEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TextAlignEnum fromValue(String value) {
      for (TextAlignEnum b : TextAlignEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TEXT_ALIGN = "TextAlign";
  private TextAlignEnum textAlign = TextAlignEnum.LEFT;

  public static final String JSON_PROPERTY_NAME = "Name";
  private String name;

  public static final String JSON_PROPERTY_READ_ONLY = "ReadOnly";
  private Boolean readOnly = false;

  public static final String JSON_PROPERTY_REQUIRED = "Required";
  private Boolean required = false;

  public static final String JSON_PROPERTY_X = "X";
  private Double X;

  public static final String JSON_PROPERTY_Y = "Y";
  private Double Y;

  public static final String JSON_PROPERTY_WIDTH = "Width";
  private Double width;

  public static final String JSON_PROPERTY_HEIGHT = "Height";
  private Double height;

  public static final String JSON_PROPERTY_PAGE = "Page";
  private Integer page;

  public static final String JSON_PROPERTY_DISCRIMINATOR_TYPE = "DiscriminatorType";
  protected String discriminatorType;


  public AddTextBoxFormFieldDescriptor value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * The default text of the textbox.
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The default text of the textbox.")
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }


  public AddTextBoxFormFieldDescriptor maxLength(Integer maxLength) {
    
    this.maxLength = maxLength;
    return this;
  }

   /**
   * The maximum length of characters inside the textbox.
   * @return maxLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum length of characters inside the textbox.")
  @JsonProperty(JSON_PROPERTY_MAX_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMaxLength() {
    return maxLength;
  }


  public void setMaxLength(Integer maxLength) {
    this.maxLength = maxLength;
  }


  public AddTextBoxFormFieldDescriptor isMultiline(Boolean isMultiline) {
    
    this.isMultiline = isMultiline;
    return this;
  }

   /**
   * Boolean indicating if the textbox can have multiple lines.
   * @return isMultiline
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Boolean indicating if the textbox can have multiple lines.")
  @JsonProperty(JSON_PROPERTY_IS_MULTILINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsMultiline() {
    return isMultiline;
  }


  public void setIsMultiline(Boolean isMultiline) {
    this.isMultiline = isMultiline;
  }


  public AddTextBoxFormFieldDescriptor isPassword(Boolean isPassword) {
    
    this.isPassword = isPassword;
    return this;
  }

   /**
   * Boolean indicating if the textbox behaves as password input.
   * @return isPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Boolean indicating if the textbox behaves as password input.")
  @JsonProperty(JSON_PROPERTY_IS_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsPassword() {
    return isPassword;
  }


  public void setIsPassword(Boolean isPassword) {
    this.isPassword = isPassword;
  }


  public AddTextBoxFormFieldDescriptor isFileSelect(Boolean isFileSelect) {
    
    this.isFileSelect = isFileSelect;
    return this;
  }

   /**
   * Boolean indicating if the textbox behaves as a file upload.
   * @return isFileSelect
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Boolean indicating if the textbox behaves as a file upload.")
  @JsonProperty(JSON_PROPERTY_IS_FILE_SELECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsFileSelect() {
    return isFileSelect;
  }


  public void setIsFileSelect(Boolean isFileSelect) {
    this.isFileSelect = isFileSelect;
  }


  public AddTextBoxFormFieldDescriptor isScrollAllowed(Boolean isScrollAllowed) {
    
    this.isScrollAllowed = isScrollAllowed;
    return this;
  }

   /**
   * Boolean indicating if scrolling is allowed inside the textbox.
   * @return isScrollAllowed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Boolean indicating if scrolling is allowed inside the textbox.")
  @JsonProperty(JSON_PROPERTY_IS_SCROLL_ALLOWED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsScrollAllowed() {
    return isScrollAllowed;
  }


  public void setIsScrollAllowed(Boolean isScrollAllowed) {
    this.isScrollAllowed = isScrollAllowed;
  }


  public AddTextBoxFormFieldDescriptor isComb(Boolean isComb) {
    
    this.isComb = isComb;
    return this;
  }

   /**
   * Boolean indicating if TextBox is combined.
   * @return isComb
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Boolean indicating if TextBox is combined.")
  @JsonProperty(JSON_PROPERTY_IS_COMB)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsComb() {
    return isComb;
  }


  public void setIsComb(Boolean isComb) {
    this.isComb = isComb;
  }


  public AddTextBoxFormFieldDescriptor textColor(String textColor) {
    
    this.textColor = textColor;
    return this;
  }

   /**
   * Font color. Default is black.
   * @return textColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Font color. Default is black.")
  @JsonProperty(JSON_PROPERTY_TEXT_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTextColor() {
    return textColor;
  }


  public void setTextColor(String textColor) {
    this.textColor = textColor;
  }


  public AddTextBoxFormFieldDescriptor fontSize(Double fontSize) {
    
    this.fontSize = fontSize;
    return this;
  }

   /**
   * Font size.
   * @return fontSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Font size.")
  @JsonProperty(JSON_PROPERTY_FONT_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getFontSize() {
    return fontSize;
  }


  public void setFontSize(Double fontSize) {
    this.fontSize = fontSize;
  }


  public AddTextBoxFormFieldDescriptor fontName(String fontName) {
    
    this.fontName = fontName;
    return this;
  }

   /**
   * Font name.
   * @return fontName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Font name.")
  @JsonProperty(JSON_PROPERTY_FONT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFontName() {
    return fontName;
  }


  public void setFontName(String fontName) {
    this.fontName = fontName;
  }


  public AddTextBoxFormFieldDescriptor bold(Boolean bold) {
    
    this.bold = bold;
    return this;
  }

   /**
   * Flag if font is bold. Default false;
   * @return bold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag if font is bold. Default false;")
  @JsonProperty(JSON_PROPERTY_BOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getBold() {
    return bold;
  }


  public void setBold(Boolean bold) {
    this.bold = bold;
  }


  public AddTextBoxFormFieldDescriptor italic(Boolean italic) {
    
    this.italic = italic;
    return this;
  }

   /**
   * Flag if font is italic. Default is false.
   * @return italic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag if font is italic. Default is false.")
  @JsonProperty(JSON_PROPERTY_ITALIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getItalic() {
    return italic;
  }


  public void setItalic(Boolean italic) {
    this.italic = italic;
  }


  public AddTextBoxFormFieldDescriptor textAlign(TextAlignEnum textAlign) {
    
    this.textAlign = textAlign;
    return this;
  }

   /**
   * Text alignment. Default is left.
   * @return textAlign
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Text alignment. Default is left.")
  @JsonProperty(JSON_PROPERTY_TEXT_ALIGN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TextAlignEnum getTextAlign() {
    return textAlign;
  }


  public void setTextAlign(TextAlignEnum textAlign) {
    this.textAlign = textAlign;
  }


  public AddTextBoxFormFieldDescriptor name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the form field.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the form field.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public AddTextBoxFormFieldDescriptor readOnly(Boolean readOnly) {
    
    this.readOnly = readOnly;
    return this;
  }

   /**
   * Specifies if the form field is readonly.
   * @return readOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies if the form field is readonly.")
  @JsonProperty(JSON_PROPERTY_READ_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getReadOnly() {
    return readOnly;
  }


  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public AddTextBoxFormFieldDescriptor required(Boolean required) {
    
    this.required = required;
    return this;
  }

   /**
   * Specifies if the form field is required.
   * @return required
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies if the form field is required.")
  @JsonProperty(JSON_PROPERTY_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRequired() {
    return required;
  }


  public void setRequired(Boolean required) {
    this.required = required;
  }


  public AddTextBoxFormFieldDescriptor X(Double X) {
    
    this.X = X;
    return this;
  }

   /**
   * The X coordinate in points.
   * @return X
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The X coordinate in points.")
  @JsonProperty(JSON_PROPERTY_X)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getX() {
    return X;
  }


  public void setX(Double X) {
    this.X = X;
  }


  public AddTextBoxFormFieldDescriptor Y(Double Y) {
    
    this.Y = Y;
    return this;
  }

   /**
   * The Y coordinate in points.
   * @return Y
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Y coordinate in points.")
  @JsonProperty(JSON_PROPERTY_Y)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getY() {
    return Y;
  }


  public void setY(Double Y) {
    this.Y = Y;
  }


  public AddTextBoxFormFieldDescriptor width(Double width) {
    
    this.width = width;
    return this;
  }

   /**
   * The width of the form field in points.
   * @return width
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The width of the form field in points.")
  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getWidth() {
    return width;
  }


  public void setWidth(Double width) {
    this.width = width;
  }


  public AddTextBoxFormFieldDescriptor height(Double height) {
    
    this.height = height;
    return this;
  }

   /**
   * The height of the form field in points.
   * @return height
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The height of the form field in points.")
  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getHeight() {
    return height;
  }


  public void setHeight(Double height) {
    this.height = height;
  }


  public AddTextBoxFormFieldDescriptor page(Integer page) {
    
    this.page = page;
    return this;
  }

   /**
   * The page number of the form field. (Starting with 1)
   * @return page
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The page number of the form field. (Starting with 1)")
  @JsonProperty(JSON_PROPERTY_PAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPage() {
    return page;
  }


  public void setPage(Integer page) {
    this.page = page;
  }


  public AddTextBoxFormFieldDescriptor discriminatorType(String discriminatorType) {
    
    this.discriminatorType = discriminatorType;
    return this;
  }

   /**
   * To differentiate between childs.
   * @return discriminatorType
  **/
  @ApiModelProperty(required = true, value = "To differentiate between childs.")
  @JsonProperty(JSON_PROPERTY_DISCRIMINATOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDiscriminatorType() {
    return discriminatorType;
  }


  public void setDiscriminatorType(String discriminatorType) {
    this.discriminatorType = discriminatorType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddTextBoxFormFieldDescriptor addTextBoxFormFieldDescriptor = (AddTextBoxFormFieldDescriptor) o;
    return Objects.equals(this.value, addTextBoxFormFieldDescriptor.value) &&
        Objects.equals(this.maxLength, addTextBoxFormFieldDescriptor.maxLength) &&
        Objects.equals(this.isMultiline, addTextBoxFormFieldDescriptor.isMultiline) &&
        Objects.equals(this.isPassword, addTextBoxFormFieldDescriptor.isPassword) &&
        Objects.equals(this.isFileSelect, addTextBoxFormFieldDescriptor.isFileSelect) &&
        Objects.equals(this.isScrollAllowed, addTextBoxFormFieldDescriptor.isScrollAllowed) &&
        Objects.equals(this.isComb, addTextBoxFormFieldDescriptor.isComb) &&
        Objects.equals(this.textColor, addTextBoxFormFieldDescriptor.textColor) &&
        Objects.equals(this.fontSize, addTextBoxFormFieldDescriptor.fontSize) &&
        Objects.equals(this.fontName, addTextBoxFormFieldDescriptor.fontName) &&
        Objects.equals(this.bold, addTextBoxFormFieldDescriptor.bold) &&
        Objects.equals(this.italic, addTextBoxFormFieldDescriptor.italic) &&
        Objects.equals(this.textAlign, addTextBoxFormFieldDescriptor.textAlign) &&
        Objects.equals(this.name, addTextBoxFormFieldDescriptor.name) &&
        Objects.equals(this.readOnly, addTextBoxFormFieldDescriptor.readOnly) &&
        Objects.equals(this.required, addTextBoxFormFieldDescriptor.required) &&
        Objects.equals(this.X, addTextBoxFormFieldDescriptor.X) &&
        Objects.equals(this.Y, addTextBoxFormFieldDescriptor.Y) &&
        Objects.equals(this.width, addTextBoxFormFieldDescriptor.width) &&
        Objects.equals(this.height, addTextBoxFormFieldDescriptor.height) &&
        Objects.equals(this.page, addTextBoxFormFieldDescriptor.page) &&
        Objects.equals(this.discriminatorType, addTextBoxFormFieldDescriptor.discriminatorType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, maxLength, isMultiline, isPassword, isFileSelect, isScrollAllowed, isComb, textColor, fontSize, fontName, bold, italic, textAlign, name, readOnly, required, X, Y, width, height, page, discriminatorType, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddTextBoxFormFieldDescriptor {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    maxLength: ").append(toIndentedString(maxLength)).append("\n");
    sb.append("    isMultiline: ").append(toIndentedString(isMultiline)).append("\n");
    sb.append("    isPassword: ").append(toIndentedString(isPassword)).append("\n");
    sb.append("    isFileSelect: ").append(toIndentedString(isFileSelect)).append("\n");
    sb.append("    isScrollAllowed: ").append(toIndentedString(isScrollAllowed)).append("\n");
    sb.append("    isComb: ").append(toIndentedString(isComb)).append("\n");
    sb.append("    textColor: ").append(toIndentedString(textColor)).append("\n");
    sb.append("    fontSize: ").append(toIndentedString(fontSize)).append("\n");
    sb.append("    fontName: ").append(toIndentedString(fontName)).append("\n");
    sb.append("    bold: ").append(toIndentedString(bold)).append("\n");
    sb.append("    italic: ").append(toIndentedString(italic)).append("\n");
    sb.append("    textAlign: ").append(toIndentedString(textAlign)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    X: ").append(toIndentedString(X)).append("\n");
    sb.append("    Y: ").append(toIndentedString(Y)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    discriminatorType: ").append(toIndentedString(discriminatorType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

