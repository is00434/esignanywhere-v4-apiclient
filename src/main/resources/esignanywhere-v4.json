{
  "swagger": "2.0",
  "info": {
    "version": "V4.0",
    "title": "eSignAnywhere.Api",
    "x-swagger-net-version": "8.3.22.202"
  },
  "host": "localhost",
  "basePath": "/Api",
  "schemes": [
    "http"
  ],
  "paths": {
    "/v4.0/authorization": {
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Test if your user token and api token are valid.",
        "operationId": "Authorization_Validate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/envelope/create": {
      "post": {
        "tags": [
          "Envelope"
        ],
        "summary": "Creates a draft with the given information.",
        "operationId": "Envelope_Create",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "draftCreateModel",
            "in": "body",
            "description": "Draft creation model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DraftCreateModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateDraftResult"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/envelope/createFromTemplate": {
      "post": {
        "tags": [
          "Envelope"
        ],
        "summary": "Creates a draft from an existing template.",
        "operationId": "Envelope_CreateFromTemplate",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "createFromTemplateModel",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DraftCreateFromTemplateModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateDraftResult"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/envelope/{envelopeId}/cancel": {
      "get": {
        "tags": [
          "Envelope"
        ],
        "summary": "Cancel an envelope with the given envelope id.",
        "operationId": "Envelope_Cancel",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "envelopeId",
            "in": "path",
            "description": "The id of the envelope/bulk.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/envelope/{envelopeId}": {
      "get": {
        "tags": [
          "Envelope"
        ],
        "summary": "Returns an envelope for the given id.",
        "operationId": "Envelope_ById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "envelopeId",
            "in": "path",
            "description": "The id of the envelope/bulk.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeStatus"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Envelope"
        ],
        "summary": "Delete an envelope with the given id.",
        "operationId": "Envelope_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "envelopeId",
            "in": "path",
            "description": "The id of the envelope/bulk.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/envelope/find": {
      "post": {
        "tags": [
          "Envelope"
        ],
        "summary": "Returns the found envelopes for the given descriptor.",
        "operationId": "Envelope_Find",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "descriptor",
            "in": "body",
            "description": "The find descriptor.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FindEnvelopesDescriptor"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExtendedFindEnvelopesResult"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/envelope/downloadCompletedDocument/{documentId}": {
      "get": {
        "tags": [
          "Envelope"
        ],
        "summary": "Returns a pdf document for the given id.",
        "operationId": "Envelope_DownloadCompletedDocument",
        "consumes": [],
        "produces": [
          "application/octet-stream",
          "text/json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document you want to download.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/envelope/downloadCompletedDocumentAsByteArray/{documentId}": {
      "get": {
        "tags": [
          "Envelope"
        ],
        "summary": "Returns a pdf document for the given id.",
        "operationId": "Envelope_DownloadCompletedDocumentAsByteArray",
        "consumes": [],
        "produces": [
          "application/octet-stream",
          "text/json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document you want to download.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/envelope/{envelopeId}/downloadPageImage/{docRefNumber}/{pageNumber}": {
      "get": {
        "tags": [
          "Envelope"
        ],
        "summary": "Returns a png image for the given page.",
        "operationId": "Envelope_DownloadPageImage",
        "consumes": [],
        "produces": [
          "application/octet-stream",
          "text/json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "envelopeId",
            "in": "path",
            "description": "The id for the envelope. NO Bulk id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "docRefNumber",
            "in": "path",
            "description": "The document number (starting with 1)",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "path",
            "description": "The page number (starting with 1)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/envelope/{envelopeId}/downloadPageImageAsByteArray/{docRefNumber}/{pageNumber}": {
      "get": {
        "tags": [
          "Envelope"
        ],
        "summary": "Returns a png image for the given page.",
        "operationId": "Envelope_DownloadPageImageAsByteArray",
        "consumes": [],
        "produces": [
          "application/octet-stream",
          "text/json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "envelopeId",
            "in": "path",
            "description": "The id for the envelope. NO Bulk id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "docRefNumber",
            "in": "path",
            "description": "The document number (starting with 1)",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "path",
            "description": "The page number (starting with 1)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/envelope/prepare": {
      "post": {
        "tags": [
          "Envelope"
        ],
        "summary": "Parses the provided files for markup fields and sig string and returns the containing elements.",
        "operationId": "Envelope_Prepare",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "prepareModel",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnvelopePrepareModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PrepareSendEnvelopeStepsResult"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/envelope/{envelopeId}/restart/{expirationInDays}": {
      "get": {
        "tags": [
          "Envelope"
        ],
        "summary": "Restarts the envelope with the given id and sets the expiration days.",
        "operationId": "Envelope_Restart",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "envelopeId",
            "in": "path",
            "description": "The id of the envelope/bulk.",
            "required": true,
            "type": "string"
          },
          {
            "name": "expirationInDays",
            "in": "path",
            "description": "The number of days until the restarted envelope expires again.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/envelope/send": {
      "post": {
        "tags": [
          "Envelope"
        ],
        "summary": "Creates and directly sends a new envelope.",
        "operationId": "Envelope_Send",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "sendModel",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnvelopeSendModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SendEnvelopeResult"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/envelope/sendFromTemplate": {
      "post": {
        "tags": [
          "Envelope"
        ],
        "summary": "Creates an envelope from a existing template and directly sends it.",
        "operationId": "Envelope_SendFromTemplate",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "sendFromTemplateModel",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnvelopeSendFromTemplateModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SendEnvelopeResult"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/envelope/{envelopeId}/remind": {
      "get": {
        "tags": [
          "Envelope"
        ],
        "summary": "Sends a reminder email to the recipient which action is awaited for the provided envelope.",
        "operationId": "Envelope_Remind",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "envelopeId",
            "in": "path",
            "description": "The id of the envelope/bulk.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SendRemindersResult"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/envelope/{templateId}/copyFromTemplate": {
      "get": {
        "tags": [
          "Envelope"
        ],
        "summary": "Copy all the ids from the documents uploaded in the provided template.",
        "operationId": "Envelope_CopyFromTemplate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "The id of the template.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CopyDocumentFromTemplateResult"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/envelope/{envelopeId}/unlock": {
      "get": {
        "tags": [
          "Envelope"
        ],
        "summary": "Unlock an envelope with the given id.",
        "operationId": "Envelope_Unlock",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "envelopeId",
            "in": "path",
            "description": "The id of the envelope.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/license": {
      "get": {
        "tags": [
          "License"
        ],
        "summary": "Returns the License state. Only for usermanager.",
        "operationId": "License_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LicenseInformation"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/recipient/{recipientId}/fromEnvelope/{envelopeId}": {
      "put": {
        "tags": [
          "Recipient"
        ],
        "summary": "Replaces a recipient in an envelope.",
        "operationId": "Recipient_Replace",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "envelopeId",
            "in": "path",
            "description": "The id of the envelope/bulk.",
            "required": true,
            "type": "string"
          },
          {
            "name": "recipientId",
            "in": "path",
            "description": "The id of an recipient in the bulk or envelope.",
            "required": true,
            "type": "string"
          },
          {
            "name": "recipient",
            "in": "body",
            "description": "The new recipient data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplaceRecipientData"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Recipient"
        ],
        "summary": "Deletes a recipient from an envelope.",
        "operationId": "Recipient_DeleteRecipient",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "envelopeId",
            "in": "path",
            "description": "The id of the envelope/bulk.",
            "required": true,
            "type": "string"
          },
          {
            "name": "recipientId",
            "in": "path",
            "description": "The id of an recipient in the bulk or envelope.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/sspfile/disposefile/{sspFileId}": {
      "delete": {
        "tags": [
          "SspFile"
        ],
        "summary": "Diposes a file which was uploaded beforehand.",
        "operationId": "SspFile_DisposeFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "sspFileId",
            "in": "path",
            "description": "The id for the uploaded file.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/sspfile/uploadtemporary": {
      "post": {
        "tags": [
          "SspFile"
        ],
        "summary": "Uploads a file for further processing/using.\r\nContent-Type must be multipart/form-data!",
        "operationId": "SspFile_UploadTemporary",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "File",
            "in": "formData",
            "description": "Filename of uploaded software package",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSspFileResult"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "415": {
            "description": "UnsupportedMediaType",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/sspfile/uploadtemporaryfrombytearray": {
      "post": {
        "tags": [
          "SspFile"
        ],
        "summary": "Uploads a file for further processing/using. The implementation MUST be reimplemented (overridden) in Subclass!\r\nContent-Type must be multipart/form-data!",
        "operationId": "SspFile_UploadTemporaryFromByteArray",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "Filename",
            "in": "formData",
            "description": "Filename of uploaded software package",
            "required": true,
            "type": "string"
          },
          {
            "name": "Content",
            "in": "formData",
            "description": "Content of uploaded software package",
            "required": true,
            "type": "string",
            "format": "byte"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSspFileResult"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "415": {
            "description": "UnsupportedMediaType",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/team": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Returns the teams set for the organization of the api user.",
        "operationId": "Team_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Teams"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      },
      "post": {
        "tags": [
          "Team"
        ],
        "summary": "Replaces all teams with the provided teams.",
        "operationId": "Team_Set",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "teams",
            "in": "body",
            "description": "A list of Teams. If empty, all teams get deleted.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Teams"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/user/create": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creates an user in the organization of the api user.",
        "operationId": "User_Create",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreateModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateUserResult"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/user/{userId}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes an user from the api user's organization.",
        "operationId": "User_Delete",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user who should be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "name": "reassignDescriptor",
            "in": "body",
            "description": "Information about the user and remaining envelopes handling.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteUserReassignDescriptor"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Updates settings of a particular user.",
        "operationId": "User_Update",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user who should be updated.",
            "required": true,
            "type": "string"
          },
          {
            "name": "userUpdateDescription",
            "in": "body",
            "description": "Information about the user to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdateDescription"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/user/find": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Finds users corresponding to the given user descriptor.",
        "operationId": "User_Find_v2",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "findUsersDescriptor",
            "in": "body",
            "description": "The descriptor for finding users (filter).",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FindUsersDescriptor"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExtendedFindUsersResult"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/user/{userId}/uploadSignatureImage": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Replaces the signature image.",
        "operationId": "User_UploadSignatureImage",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user whos signature image should be replaced.",
            "required": true,
            "type": "string"
          },
          {
            "name": "File",
            "in": "formData",
            "description": "Upload software package",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "415": {
            "description": "UnsupportedMediaType",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/user/{userId}/uploadSignatureImageFromByteArray": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Replaces the signature image.",
        "operationId": "User_UploadSignatureImageFromByteArray",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user whos signature image should be replaced.",
            "required": true,
            "type": "string"
          },
          {
            "name": "File",
            "in": "formData",
            "description": "Upload software package",
            "required": true,
            "type": "string",
            "format": "byte"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "415": {
            "description": "UnsupportedMediaType",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/user/{email}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user by email.",
        "operationId": "User_GetUserByEmail",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "Email to find user.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExtendedFindUsersResultEntry"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "security": [
          {
            "organizationKey": []
          },
          {
            "userLoginName": []
          }
        ]
      }
    },
    "/v4.0/version": {
      "get": {
        "tags": [
          "Version"
        ],
        "summary": "Returns the version of eSignAnyWhere.",
        "operationId": "Version_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FlowApiResult"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "DraftCreateModel": {
      "properties": {
        "SspFileIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "SendEnvelopeDescription": {
          "$ref": "#/definitions/SendEnvelopeDescription"
        },
        "CreateDraftOptions": {
          "$ref": "#/definitions/CreateDraftOptions"
        }
      },
      "xml": {
        "name": "DraftCreateModel"
      },
      "type": "object"
    },
    "SendEnvelopeDescription": {
      "properties": {
        "Name": {
          "description": "The name of the envelope.",
          "type": "string"
        },
        "EmailSubject": {
          "description": "The subject of the sent out emails.",
          "type": "string"
        },
        "EmailBody": {
          "description": "The body of the sent out emails.",
          "type": "string"
        },
        "DisplayedEmailSender": {
          "description": "The name of the email sender.",
          "type": "string"
        },
        "EnableReminders": {
          "description": "If true, reminders are used.",
          "type": "boolean"
        },
        "FirstReminderDayAmount": {
          "description": "Amount of days until the first reminder is sent out.",
          "type": "integer",
          "format": "int32"
        },
        "RecurrentReminderDayAmount": {
          "description": "Amount of days until all recurrent reminders are sent out.",
          "type": "integer",
          "format": "int32"
        },
        "BeforeExpirationDayAmount": {
          "description": "Amount of days until a reminder about the expiration is sent out.",
          "type": "integer",
          "format": "int32"
        },
        "DaysUntilExpire": {
          "description": "Amount of days until the envelope expires.",
          "type": "integer",
          "format": "int32"
        },
        "CallbackUrl": {
          "description": "The callback url of the envelope.",
          "type": "string"
        },
        "StatusUpdateCallbackUrl": {
          "description": "The callback url of status changes for the envelope.",
          "type": "string"
        },
        "WorkstepEventCallback": {
          "$ref": "#/definitions/WorkstepEventCallback",
          "description": "Workstep event callback options."
        },
        "Steps": {
          "description": "The steps for the envelope.",
          "items": {
            "$ref": "#/definitions/SendEnvelopeStep"
          },
          "xml": {
            "name": "SendEnvelopeStep",
            "wrapped": true
          },
          "type": "array"
        },
        "AddFormFields": {
          "$ref": "#/definitions/AddFormFields",
          "description": "Added form fields."
        },
        "OverrideFormFieldValues": {
          "$ref": "#/definitions/OverrideFormFieldOptions",
          "description": "Form field descriptions which should be filled."
        },
        "MetaDataXml": {
          "type": "string"
        },
        "AttachSignedDocumentsToEnvelopeLog": {
          "description": "If true, the signed document(s) will be added to the envelope log as attachment.",
          "type": "boolean",
          "default": false
        }
      },
      "xml": {
        "name": "SendEnvelopeDescription"
      },
      "type": "object"
    },
    "CreateDraftOptions": {
      "description": "Options for the draft creation.",
      "properties": {
        "AfterSendRedirectUrl": {
          "description": "The redirection URL after sending the envelope.",
          "type": "string"
        },
        "AfterSendCallbackUrl": {
          "description": "The URL where a callbackl is sent to after sending the envelope.",
          "type": "string"
        },
        "RedirectPolicy": {
          "description": "Specifies where to redirect if <code>AllowAgentRedirect</code> is <code>true</code>.",
          "type": "string",
          "enum": [
            "None",
            "ToRecipients",
            "ToDesigner",
            "ToSend"
          ],
          "x-ms-enum": {}
        },
        "AllowAgentRedirect": {
          "description": "Specifies if the agentmode is active.",
          "type": "boolean"
        },
        "IframeWhiteList": {
          "description": "A string indicating a white list of urls where the designer is allowed to be used in agent mode.\r\nExample: \"http://172.16.17.181;http://foo.org\"",
          "type": "string"
        }
      },
      "xml": {
        "name": "CreateDraftOptions"
      },
      "type": "object"
    },
    "WorkstepEventCallback": {
      "description": "Defines callbacks which are sent out from the WSC (WorkStepController).",
      "properties": {
        "Url": {
          "description": "The callback URL.",
          "type": "string"
        },
        "Blacklist": {
          "description": "A list off callback types which are NOT sent.\r\nAn empty lists means are callback types should fire a callback.\r\nYou can either have a black OR white list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "WhiteList": {
          "description": "A list of callbacks which should be sent.\r\nAn empty lists means are callback types should fire a callback.\r\nYou can either have a black OR white list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "WorkstepEventCallback"
      },
      "type": "object"
    },
    "SendEnvelopeStep": {
      "description": "A step in an envelope representing recipients.",
      "properties": {
        "OrderIndex": {
          "description": "The order index of the step.",
          "type": "integer",
          "format": "int32"
        },
        "Recipients": {
          "description": "A list of recipients for this step (usally 1, multiple for bulk).\r\nNot necessary in case of <code>RecipientType</code> Automatic",
          "items": {
            "$ref": "#/definitions/SendEnvelopeRecipient"
          },
          "xml": {
            "name": "SendEnvelopeRecipient",
            "wrapped": true
          },
          "type": "array"
        },
        "EmailBodyExtra": {
          "description": "The additional email body for the step.",
          "type": "string"
        },
        "RecipientType": {
          "description": "The recipient type of the step.",
          "type": "string",
          "default": "Signer",
          "enum": [
            "Signer",
            "Cc",
            "Acknowledge",
            "Pkcs7Signer",
            "Automatic"
          ],
          "x-ms-enum": {}
        },
        "WorkstepConfiguration": {
          "$ref": "#/definitions/WorkstepConfiguration",
          "description": "The configuration for the step.\r\nOnly necessary for <code>RecipientType</code> Signer and Pkcs7Signer."
        },
        "DocumentOptions": {
          "description": "The document options for the step.",
          "items": {
            "$ref": "#/definitions/SendEnvelopeDocumentOption"
          },
          "xml": {
            "name": "SendEnvelopeDocumentOption",
            "wrapped": true
          },
          "type": "array"
        },
        "UseDefaultAgreements": {
          "description": "Use default Agreements from SignatureDisclosure settings",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "SendEnvelopeStep"
      },
      "type": "object"
    },
    "AddFormFields": {
      "description": "Contains a list of form fields which should be added to the document.",
      "properties": {
        "Forms": {
          "description": "A dictionary consisting of doc reference numbers and form field descriptions.",
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/AddFormFieldDescriptor"
            },
            "xml": {
              "name": "AddFormFieldDescriptor",
              "wrapped": true
            },
            "type": "array"
          },
          "type": "object"
        }
      },
      "xml": {
        "name": "AddFormFields"
      },
      "type": "object"
    },
    "OverrideFormFieldOptions": {
      "description": "",
      "properties": {
        "Forms": {
          "description": "A dictionary consisting of document reference number and descriptions of form fields whos value should be filled.",
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/FillFormDescriptor"
            },
            "xml": {
              "name": "FillFormDescriptor",
              "wrapped": true
            },
            "type": "array"
          },
          "type": "object"
        }
      },
      "xml": {
        "name": "OverrideFormFieldOptions"
      },
      "type": "object"
    },
    "SendEnvelopeRecipient": {
      "description": "Description of a recipient.",
      "properties": {
        "Email": {
          "description": "The email address of the recipient.",
          "type": "string"
        },
        "FirstName": {
          "description": "The first name of the recipient.",
          "type": "string"
        },
        "LastName": {
          "description": "The last name of the recipient.",
          "type": "string"
        },
        "LanguageCode": {
          "description": "The language code of the recipient.",
          "type": "string"
        },
        "EmailBodyExtra": {
          "description": "Additional email body for the recipient.",
          "type": "string"
        },
        "DisableEmail": {
          "description": "Specifies if an email should be sent out for this recipient.",
          "type": "boolean",
          "default": false
        },
        "AddAndroidAppLink": {
          "description": "If true, an Android app link is added to the email message.",
          "type": "boolean",
          "default": false
        },
        "AddIosAppLink": {
          "description": "If true, an iOS app link is added to the email message.",
          "type": "boolean",
          "default": false
        },
        "AddWindowsAppLink": {
          "description": "If true, an Windows app link is added to the email message.",
          "type": "boolean",
          "default": false
        },
        "AllowDelegation": {
          "description": "If true, delegation is allowed for this recipient.",
          "type": "boolean"
        },
        "SkipExternalDataValidation": {
          "description": "If true, external validation for this recipient is skipped.",
          "type": "boolean",
          "default": false
        },
        "AuthenticationMethods": {
          "description": "A list of authentications which are available for the recipient.",
          "items": {
            "$ref": "#/definitions/SendEnvelopeAuthentication"
          },
          "xml": {
            "name": "SendEnvelopeAuthentication",
            "wrapped": true
          },
          "type": "array"
        },
        "DisposableCertificateData": {
          "$ref": "#/definitions/DisposableCertificateData",
          "description": "The disposable certificate data for the recipient."
        },
        "SwissComCertificateData": {
          "$ref": "#/definitions/SwissComCertificateData",
          "description": "The swisscom disposable certificate data for the recipient."
        },
        "RemoteCertificateData": {
          "$ref": "#/definitions/RemoteCertificateData",
          "description": "The remote certificate data for the recipient."
        },
        "OtpData": {
          "$ref": "#/definitions/OtpData",
          "description": "The one time pad data for the recipient."
        },
        "Pkcs7SignerData": {
          "$ref": "#/definitions/Pkcs7SignerData",
          "description": "The PKCS7 data for the recipient."
        }
      },
      "xml": {
        "name": "SendEnvelopeRecipient"
      },
      "type": "object"
    },
    "WorkstepConfiguration": {
      "description": "The workstep configuration used to create the workstep.",
      "properties": {
        "WorkstepLabel": {
          "description": "A label for this workstep.",
          "type": "string"
        },
        "SmallTextZoomFactorPercent": {
          "description": "Defines a image generation correction factor. If for example this document contains very small text, which might not be readable with the standard image resolution of the client, this factor can be used to tell the client to get a higher resolution.",
          "type": "integer",
          "format": "int32",
          "default": 100
        },
        "FinishAction": {
          "$ref": "#/definitions/FinishAction",
          "description": "Configure the actions done by the server and the by the clients when the workstep is finished."
        },
        "IntroTexts": {
          "$ref": "#/definitions/IntroTexts",
          "description": "Intro texts."
        },
        "ReceiverInformation": {
          "$ref": "#/definitions/ReceiverInformation",
          "description": "Information about the recipient of the document."
        },
        "SenderInformation": {
          "$ref": "#/definitions/SenderInformation",
          "description": "Information about the sender of the document.",
          "readOnly": true
        },
        "TransactionCodeConfigurations": {
          "description": "Collection of TransactionCodeConfigurations",
          "items": {
            "$ref": "#/definitions/TransactionCodeConfiguration"
          },
          "xml": {
            "name": "TransactionCodeConfiguration",
            "wrapped": true
          },
          "type": "array"
        },
        "SignatureConfigurations": {
          "description": "Collection of SignatureConfigurations",
          "items": {
            "$ref": "#/definitions/SignatureConfiguration"
          },
          "xml": {
            "name": "SignatureConfiguration",
            "wrapped": true
          },
          "type": "array"
        },
        "ViewerPreferences": {
          "$ref": "#/definitions/ViewerPreferences",
          "description": "The Viewer Preferences can be used to adapt the appearance and the behavior of the SignAnyWhere Viewer."
        },
        "ResourceUris": {
          "$ref": "#/definitions/ResourceUris",
          "description": "Rescource uris.",
          "readOnly": true
        },
        "AuthenticationMethods": {
          "$ref": "#/definitions/AuthenticationMethods",
          "description": "Authentication methods.",
          "readOnly": true
        },
        "AdditionalClientWorkstepInformation": {
          "description": "Additional client workstep information.",
          "readOnly": true,
          "type": "string"
        },
        "AuditingToolsConfiguration": {
          "$ref": "#/definitions/AuditingToolsConfiguration",
          "description": "Configuration regarding tools for auditing.",
          "readOnly": true
        },
        "Policy": {
          "$ref": "#/definitions/Policy",
          "description": "Workstep policies."
        }
      },
      "xml": {
        "name": "WorkstepConfiguration"
      },
      "type": "object"
    },
    "SendEnvelopeDocumentOption": {
      "description": "Options for a specific document.",
      "properties": {
        "DocumentReference": {
          "description": "The document reference number (starting with 1).",
          "type": "string"
        },
        "IsHidden": {
          "description": "Specifies if the referenced document is hidden.",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "SendEnvelopeDocumentOption"
      },
      "type": "object"
    },
    "AddFormFieldDescriptor": {
      "description": "Abstract class, use the derived classes:\r\n- AddCheckBoxFormFieldDescriptor\r\n- AddComboBoxFormFieldDescriptor\r\n- AddRadioButtonFormFieldDescriptor\r\n- AddTextBoxFormFieldDescriptor\r\n- AddListBoxFormFieldDescriptor\r\n            \r\nFor usage see sample code.\r\n\r\nDescribes a form field and its options.",
      "required": [
        "DiscriminatorType"
      ],
      "properties": {
        "Name": {
          "description": "The name of the form field.",
          "type": "string"
        },
        "ReadOnly": {
          "description": "Specifies if the form field is readonly.",
          "type": "boolean",
          "default": false
        },
        "Required": {
          "description": "Specifies if the form field is required.",
          "type": "boolean",
          "default": false
        },
        "X": {
          "description": "The X coordinate in points.",
          "type": "number",
          "format": "double"
        },
        "Y": {
          "description": "The Y coordinate in points.",
          "type": "number",
          "format": "double"
        },
        "Width": {
          "description": "The width of the form field in points.",
          "type": "number",
          "format": "double"
        },
        "Height": {
          "description": "The height of the form field in points.",
          "type": "number",
          "format": "double"
        },
        "Page": {
          "description": "The page number of the form field. (Starting with 1)",
          "type": "integer",
          "format": "int32"
        },
        "DiscriminatorType": {
          "description": "To differentiate between childs.",
          "type": "string"
        }
      },
      "discriminator": "DiscriminatorType",
      "xml": {
        "name": "AddFormFieldDescriptor"
      },
      "type": "object"
    },
    "FillFormDescriptor": {
      "description": "The description of the form field which should be filled.",
      "required": [
        "DiscriminatorType"
      ],
      "properties": {
        "Name": {
          "description": "Abstract class, use the derived classes:\r\n- FillCheckBoxFormDescriptor\r\n- FillComboBoxFormDescriptor\r\n- FillListBoxFormDescriptor\r\n- FillRadioButtonFormDescriptor\r\n- FillTextBoxFormDescriptor\r\n            \r\nFor usage see sample code.\r\n\r\nThe name of the form field.",
          "type": "string"
        },
        "DiscriminatorType": {
          "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
          "type": "string"
        }
      },
      "discriminator": "DiscriminatorType",
      "xml": {
        "name": "FillFormDescriptor"
      },
      "type": "object"
    },
    "SendEnvelopeAuthentication": {
      "description": "Authentication for a recipient.",
      "properties": {
        "Method": {
          "description": "The authentication method.",
          "type": "string",
          "enum": [
            "Pin",
            "Sms",
            "WindowsLive",
            "CustomOAuthProvider",
            "CustomSamlProvider",
            "BankId"
          ],
          "x-ms-enum": {}
        },
        "Parameter": {
          "description": "The needed parameters for the authentication.",
          "type": "string"
        },
        "Filters": {
          "description": "The filters for the authentication (OAUTH and SAML only).",
          "items": {
            "$ref": "#/definitions/SendEnvelopeAuthenticationFilter"
          },
          "xml": {
            "name": "SendEnvelopeAuthenticationFilter",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "SendEnvelopeAuthentication"
      },
      "type": "object"
    },
    "DisposableCertificateData": {
      "properties": {
        "CountryResidence": {
          "type": "string"
        },
        "IdentificationCountry": {
          "type": "string"
        },
        "IdentificationType": {
          "type": "string",
          "default": "FOREIGN_TAX_CODE",
          "enum": [
            "NONE",
            "FOREIGN_TAX_CODE",
            "PERSONAL_NUMBER",
            "PASSPORT",
            "NATIONAL_IDENTITY_CARD",
            "ITALIAN_TAX_CODE",
            "NO_SERIAL_NUMBER"
          ],
          "x-ms-enum": {}
        },
        "PhoneMobile": {
          "type": "string"
        },
        "DocumentType": {
          "type": "string",
          "enum": [
            "CI",
            "PA",
            "PASS",
            "PD",
            "ID",
            "PN",
            "AT"
          ],
          "x-ms-enum": {}
        },
        "DocumentIssuedBy": {
          "type": "string"
        },
        "DocumentIssuedOn": {
          "type": "string",
          "format": "date-time"
        },
        "DocumentExpiryDate": {
          "type": "string",
          "format": "date-time"
        },
        "SerialNumber": {
          "type": "string"
        },
        "DocumentNumber": {
          "type": "string"
        },
        "OverrideHolderInCaseOfMismatch": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "DisposableCertificateData"
      },
      "type": "object"
    },
    "SwissComCertificateData": {
      "properties": {
        "PhoneNumber": {
          "type": "string"
        },
        "MobileId": {
          "type": "string"
        },
        "Parameters": {
          "items": {
            "$ref": "#/definitions/KeyValuePair"
          },
          "xml": {
            "name": "KeyValuePair",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "SwissComCertificateData"
      },
      "type": "object"
    },
    "RemoteCertificateData": {
      "properties": {
        "UserId": {
          "type": "string"
        },
        "DeviceId": {
          "type": "string"
        }
      },
      "xml": {
        "name": "RemoteCertificateData"
      },
      "type": "object"
    },
    "OtpData": {
      "properties": {
        "PhoneMobile": {
          "type": "string"
        }
      },
      "xml": {
        "name": "OtpData"
      },
      "type": "object"
    },
    "Pkcs7SignerData": {
      "properties": {
        "AllowedPkcs7SignatureTypes": {
          "items": {
            "type": "string",
            "enum": [
              "LocalCertificate",
              "RemoteCertificate",
              "RemoteDisposableCertificate"
            ],
            "x-ms-enum": {}
          },
          "xml": {
            "name": "Pkcs7SignatureType",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "Pkcs7SignerData"
      },
      "type": "object"
    },
    "FinishAction": {
      "description": "Configure the actions done by the server and the by the clients when the workstep is finished.",
      "properties": {
        "ServerActions": {
          "description": "Configure the actions done by the server when the workstep is finished.",
          "items": {
            "$ref": "#/definitions/ServerAction"
          },
          "readOnly": true,
          "xml": {
            "name": "ServerAction",
            "wrapped": true
          },
          "type": "array"
        },
        "ClientActions": {
          "description": "Client actions can specify the behavior of a specific client after a workstep is finished.",
          "items": {
            "$ref": "#/definitions/ClientAction"
          },
          "xml": {
            "name": "ClientAction",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "FinishAction"
      },
      "type": "object"
    },
    "IntroTexts": {
      "description": "IntroText to be shown.",
      "properties": {
        "Texts": {
          "description": "Collection of texts.",
          "items": {
            "$ref": "#/definitions/Text"
          },
          "xml": {
            "name": "Text",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "IntroTexts"
      },
      "type": "object"
    },
    "ReceiverInformation": {
      "description": "Information about the recipient of the document.",
      "properties": {
        "UserInformation": {
          "$ref": "#/definitions/UserInformation",
          "description": "Information about the user."
        },
        "HolderInformation": {
          "description": "Information about the holder.",
          "type": "string"
        },
        "DisposableCertificateDisclaimerTexts": {
          "$ref": "#/definitions/DisposableCertificateDisclaimerTexts",
          "description": "Disposable certificate disclaimer texts."
        },
        "TransactionCodePushPluginData": {
          "description": "TransactionCodePushPlugin data as KeyValuePair: string, string",
          "items": {
            "$ref": "#/definitions/KeyValuePair"
          },
          "xml": {
            "name": "KeyValuePair",
            "wrapped": true
          },
          "type": "array"
        },
        "ATrustCertificateData": {
          "$ref": "#/definitions/ATrustCertificateData",
          "description": "ATrust certificate configuration."
        }
      },
      "xml": {
        "name": "ReceiverInformation"
      },
      "type": "object"
    },
    "SenderInformation": {
      "description": "Information about the sender.",
      "properties": {
        "UserInformation": {
          "$ref": "#/definitions/UserInformation",
          "description": "Information about the user."
        }
      },
      "xml": {
        "name": "SenderInformation"
      },
      "type": "object"
    },
    "TransactionCodeConfiguration": {
      "description": "TransactionCode configurations.",
      "properties": {
        "Id": {
          "description": "Id of the transaction code.",
          "type": "string"
        },
        "HashAlgorithmIdentifier": {
          "description": "HashAlgorithm identifier to be used.",
          "type": "string",
          "enum": [
            "Sha1",
            "Sha256",
            "Sha512"
          ],
          "x-ms-enum": {}
        },
        "Texts": {
          "description": "Collection of all texts.",
          "items": {
            "$ref": "#/definitions/Text"
          },
          "xml": {
            "name": "Text",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "TransactionCodeConfiguration"
      },
      "type": "object"
    },
    "SignatureConfiguration": {
      "description": "Configurate the signatures for this workstep. One default configuration has to be defined. The default configuration is used for flatten signatures, adhoc signatures and signature fields which do not reference a special signature plugin configuration. The default configuration does not contain the attribute 'spcId'. If the attribute 'spcId' is defined the signature plugin configuration does only apply to signature fields referencing the configuration by specifiying <param name=\"spcId\">id</param>",
      "properties": {
        "SpcId": {
          "description": "Signature plugin configuration id.",
          "type": "string"
        },
        "PdfSignatureProperties": {
          "$ref": "#/definitions/PdfSignatureProperties",
          "description": "Configurate the signature properties."
        },
        "PdfSignatureCryptographicData": {
          "$ref": "#/definitions/PdfSignatureCryptographicData",
          "description": "Configurate the cryptographic data."
        },
        "CertificateFilter": {
          "$ref": "#/definitions/CertificateFilter",
          "description": "Signatureplugin certificate filter configuration."
        }
      },
      "xml": {
        "name": "SignatureConfiguration"
      },
      "type": "object"
    },
    "ViewerPreferences": {
      "description": "The Viewer Preferences can be used to adapt the appearance and the behavior of the SignAnyWhere Viewer.",
      "properties": {
        "ShowPageNavigationBar": {
          "description": "Obsolete. Replaced by ShowPageNavigationButtons.",
          "type": "boolean"
        },
        "ShowThumbnails": {
          "description": "If enabled, the thumbnail display will be visible, otherwise false.",
          "type": "boolean"
        },
        "SkipFinishConfirmDialog": {
          "description": "If enabled, finish action will be executed immediately without confirm dialog.",
          "type": "boolean"
        },
        "SkipDocumentDialog": {
          "description": "If enabled, the download document dialog after finishing the workstep will be skipped.",
          "type": "boolean"
        },
        "ShowImagesInFullWidth": {
          "description": "If enabled, available width will be used for images which might stretch them.",
          "type": "boolean"
        },
        "DisableGeolocation": {
          "description": "If enabled, Geolocation won't be used for webservice calls.",
          "type": "boolean"
        },
        "ShowDocumentDownloadDialogAfterAutomaticFinish": {
          "description": "If enabled, the \"Download documents dialog\" after automatically finishing the workstep will be shown (e.g. acknowledge receipt scenario).",
          "type": "boolean"
        },
        "AttachmentsMaxFileSize": {
          "description": "Allows to configure the maximum file size for attachments in kBytes.",
          "type": "integer",
          "format": "int32"
        },
        "SkipPreviewImageOnDisposableCertificate": {
          "description": "Allows to disable the preview image of the signature when using the Namirial Disposable certificate functionality.",
          "type": "boolean"
        },
        "LoadCustomJs": {
          "description": "If enabled, a Custom.js file will be loaded when the page is opened allowing to configure customized data.",
          "type": "boolean"
        },
        "AllowCustomButtons": {
          "description": "If enabled, custom buttons can be added via xyzmo.Customization plugin.",
          "type": "boolean"
        },
        "GuidingBehavior": {
          "description": "Defines how the viewer should guide through the tasks.",
          "type": "string",
          "enum": [
            "GuideOnlyRequiredTasks",
            "GuideRequiredAndOptionalTasks",
            "GuideDisabled"
          ],
          "x-ms-enum": {}
        },
        "FormFieldsGuidingBehavior": {
          "description": "Defining how the viewer should guide through form fields.",
          "type": "string",
          "enum": [
            "AllowSubmitAlways",
            "AllowSubmitOnlyAfterAllRequiredFieldsAreDone"
          ],
          "x-ms-enum": {}
        },
        "ShowVersionNumber": {
          "description": "Obsolete. Defining if the viewer should show the version number.",
          "type": "boolean"
        },
        "EnableWarningPopupOnLeave": {
          "description": "Defining if the viewer should display a warning popup when the user leaves the page.",
          "type": "boolean"
        },
        "WarningPopupDisplayAfter": {
          "description": "Defining when the warning popup should be displayed.",
          "type": "string",
          "enum": [
            "FillOrSignField",
            "Authentication",
            "Always",
            "Agreement"
          ],
          "x-ms-enum": {}
        },
        "FinishWorkstepOnOpen": {
          "description": "If set to 1 the workstep is automatically finished when opened in the viewer, if finishing is possible.",
          "type": "boolean"
        },
        "AutoFinishAfterRequiredTasksDone": {
          "description": "If enabled, finish action will be automatically triggered after last required task is done.",
          "type": "boolean"
        },
        "GuidingBehaviorOnFinishedTask": {
          "description": "Defines the guiding behavior after a task has been completed (e.g. signature field has been signed). This flag is not taken into account if the guiding is disabled.",
          "type": "string",
          "enum": [
            "NoMove",
            "MoveToNext",
            "MoveToNextAndActivate"
          ],
          "x-ms-enum": {}
        },
        "SkipThankYouDialog": {
          "description": "Obsolete. Replaced by ShowFinishPossibleHint.",
          "type": "boolean"
        },
        "NativeAppsUrlScheme": {
          "description": "Defines the url scheme for the native SAW Viewer applications (needed for customized SAW Viewer apps).",
          "type": "string"
        },
        "DocumentViewingMode": {
          "description": "Defines whether the envelope is displayed in its entirety or if only a specific document is shown at a time.",
          "type": "string",
          "enum": [
            "EndlessPaperAllDocuments",
            "EndlessPaperPerDocument"
          ],
          "x-ms-enum": {}
        },
        "ThumbnailMode": {
          "description": "Defines the appearance of the thumbnail view: all pages of the entire document are shown, or only the first page of each document within an envelope.",
          "type": "string",
          "enum": [
            "ShowAllPages",
            "ShowFirstPageOnly"
          ],
          "x-ms-enum": {}
        },
        "ShowTopBar": {
          "description": "Defines if the top bar should be visible or not. If disabled, also the 'GuidingBehavior' and the 'DisplayRejectButtonInTopBar' will be deactivated.",
          "type": "boolean"
        },
        "DisplayRejectButtonInTopBar": {
          "description": "If enabled, the 'reject' button will be displayed in the left bar below the 'finish' button as well",
          "type": "boolean"
        },
        "MultipleSignatureTypesAndBatchSigningSettings": {
          "$ref": "#/definitions/MultipleSignatureTypesAndBatchSigningSettings",
          "description": "MultipleSignatureTypesAndBatchSigning settings."
        },
        "VisibleAreaOptions": {
          "$ref": "#/definitions/VisibleAreaOptions",
          "description": "Options for Post Messaging in Iframes."
        },
        "ShowStartGuidingHint": {
          "description": "If enabled, a hint to the next button is shown, where the guide can be started.",
          "type": "boolean"
        },
        "ShowStatusBar": {
          "description": "Defines if the status bar at the bottom should be visible or not. If disabled, product and version number and biometric signature device selection window is not available.",
          "type": "boolean"
        },
        "ShowZoomButtons": {
          "description": "Allows to disable the zoom buttons on the left side of the viewer.",
          "type": "boolean"
        },
        "ShowNoGeolocationWarning": {
          "description": "Defines if a warning should be shown in case the browser does not allow to retrieve the geolocation.",
          "type": "boolean"
        },
        "AutoStartGuiding": {
          "description": "Defines if the guiding (if disabled at all) should be started directly upon start.",
          "type": "boolean"
        },
        "ShowPageGap": {
          "description": "Defines whether or not to show a small gap between pages containing some bits of information (like corresponding document and page x/y) in Desktop/Tablet UI.",
          "type": "boolean"
        },
        "ShowPageNavigationButtons": {
          "description": "Allows to disable the page navigation buttons on the left side of the viewer.",
          "type": "boolean"
        },
        "ShowFinishPossibleHint": {
          "description": "If enabled, hints that the document can now be finished after all required tasks have been done, will be shown.",
          "type": "boolean"
        },
        "SkipRejectConfirmDialog": {
          "description": "If enabled, the confirm dialog to accept the reject action will not be shown.",
          "type": "boolean"
        },
        "BatchSigningType": {
          "description": "Either Basic/OptIn/OptOut; if not set it should behave like \"Basic\"",
          "type": "string",
          "enum": [
            "Basic",
            "OptIn",
            "OptOut",
            "OptOutWithRequiredAlwaysSelected",
            "OptInWithRequiredAlwaysSelected"
          ],
          "x-ms-enum": {}
        },
        "BatchSigningDisableNextButtonUntilDialogScrolledToBottom": {
          "description": "Either true or false; if not set it should behave like false. Works only in combination with BatchSigningType OptIn/OptOut",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "ViewerPreferences"
      },
      "type": "object"
    },
    "ResourceUris": {
      "description": "Rescource uris.",
      "properties": {
        "DelegationUri": {
          "description": "Uri which will be used to retreive form data for a client.",
          "type": "string"
        },
        "SignatureImagesUri": {
          "description": "Urif of the signature images.",
          "type": "string"
        }
      },
      "xml": {
        "name": "ResourceUris"
      },
      "type": "object"
    },
    "AuthenticationMethods": {
      "description": "Authentication methods.",
      "properties": {
        "AuthenticationMethodList": {
          "description": "Lists all configured authentication methods that can be used for this workstep.",
          "items": {
            "$ref": "#/definitions/AuthenticationMethod"
          },
          "xml": {
            "name": "AuthenticationMethod",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "AuthenticationMethods"
      },
      "type": "object"
    },
    "AuditingToolsConfiguration": {
      "description": "Configuration regarding tools for auditing.",
      "properties": {
        "WriteAuditTrail": {
          "description": "Defines if an audit trail file should be written.",
          "type": "boolean"
        },
        "IdStampConfiguration": {
          "$ref": "#/definitions/WorkstepIdStampConfiguration",
          "description": "Defines the configuration how and where on the documents the workstepId should be stamped."
        },
        "NotificationConfiguration": {
          "$ref": "#/definitions/NotificationConfiguration",
          "description": "Configures the service notificiations where being sent to."
        }
      },
      "xml": {
        "name": "AuditingToolsConfiguration"
      },
      "type": "object"
    },
    "Policy": {
      "description": "Workstep policies.",
      "properties": {
        "GeneralPolicies": {
          "$ref": "#/definitions/GeneralPolicies",
          "description": "Defines general policies for this workstep."
        },
        "WorkstepTasks": {
          "$ref": "#/definitions/WorkstepTasks",
          "description": "Configuration of tasks."
        },
        "FinalizeActions": {
          "$ref": "#/definitions/FinalizeActions",
          "description": "Allows to define actions which will be executed when the workstep will be finished. Those actions are performed before the ServerAction will be called and, depending on the type of the action, it might change the documents according to the workstep!"
        }
      },
      "xml": {
        "name": "Policy"
      },
      "type": "object"
    },
    "SendEnvelopeAuthenticationFilter": {
      "description": "The authentication filter.",
      "properties": {
        "CompareOperation": {
          "description": "The compare method of the filter.",
          "type": "string",
          "enum": [
            "Equals"
          ],
          "x-ms-enum": {}
        },
        "FilterId": {
          "description": "The filter id of the authentication.",
          "type": "string"
        },
        "FilterValue": {
          "description": "The filter value of the authentication.",
          "type": "string"
        }
      },
      "xml": {
        "name": "SendEnvelopeAuthenticationFilter"
      },
      "type": "object"
    },
    "KeyValuePair": {
      "description": "KeyValuePair",
      "properties": {
        "Key": {
          "description": "Key.",
          "type": "string"
        },
        "Value": {
          "description": "Value.",
          "type": "string"
        }
      },
      "xml": {
        "name": "KeyValuePair"
      },
      "type": "object"
    },
    "ServerAction": {
      "description": "Defines a server action.",
      "properties": {
        "CallSynchronous": {
          "description": "Wether the server should call that action before returning to the client which called FinishWorkstep.",
          "type": "boolean",
          "default": true
        },
        "Action": {
          "description": "Url of the server side action.",
          "type": "string"
        }
      },
      "xml": {
        "name": "ServerAction"
      },
      "type": "object"
    },
    "ClientAction": {
      "description": "Defines a client action.",
      "properties": {
        "RemoveDocumentFromRecentDocumentList": {
          "description": "Removes the document from recent document list.",
          "type": "boolean"
        },
        "CallClientActionOnlyAfterSuccessfulSync": {
          "description": "Call client action only after successful sync.",
          "type": "boolean",
          "default": true
        },
        "ClientName": {
          "description": "Name for the client.",
          "type": "string"
        },
        "CloseApp": {
          "description": "Defines if the app should be closed.",
          "type": "boolean"
        },
        "Action": {
          "description": "Url of the action.",
          "type": "string"
        }
      },
      "xml": {
        "name": "ClientAction"
      },
      "type": "object"
    },
    "Text": {
      "description": "Text element.",
      "properties": {
        "Language": {
          "description": "Language of this text.",
          "type": "string"
        },
        "Value": {
          "description": "Text of this element.",
          "type": "string"
        }
      },
      "xml": {
        "name": "Text"
      },
      "type": "object"
    },
    "UserInformation": {
      "properties": {
        "FirstName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "EMail": {
          "type": "string"
        }
      },
      "xml": {
        "name": "UserInformation"
      },
      "type": "object"
    },
    "DisposableCertificateDisclaimerTexts": {
      "properties": {
        "Texts": {
          "description": "List of texts.",
          "items": {
            "$ref": "#/definitions/Text"
          },
          "xml": {
            "name": "Text",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "DisposableCertificateDisclaimerTexts"
      },
      "type": "object"
    },
    "ATrustCertificateData": {
      "description": "ATrust Certificate Data",
      "properties": {
        "PhoneNumber": {
          "description": "PhoneNumber",
          "type": "string"
        }
      },
      "xml": {
        "name": "ATrustCertificateData"
      },
      "type": "object"
    },
    "PdfSignatureProperties": {
      "description": "Configure PdfSignatureProperties.",
      "properties": {
        "PdfAConformant": {
          "description": "Define usage of PdfAConformant.",
          "type": "boolean"
        },
        "PAdESPart4Compliant": {
          "description": "Define usage of PAdESPart4Compliant.",
          "type": "boolean"
        },
        "IncludeSigningCertificateChain": {
          "description": "Define if SigningCertificateChain should be included.",
          "type": "boolean"
        },
        "SigningCertificateRevocationInformationIncludeMode": {
          "description": "Define the SigningCertificateRevocationInformationIncludeMode type.",
          "type": "string",
          "enum": [
            "DoNotInclude",
            "Include",
            "TryToInclude",
            "CheckRevocationIncludeOcsp",
            "IncludeDss",
            "TryToIncludeDss"
          ],
          "x-ms-enum": {}
        },
        "SignatureTimestampData": {
          "$ref": "#/definitions/SignatureTimestampData",
          "description": "Configure SignatureTimestampData for this object."
        },
        "EnableEutlVerification": {
          "description": "Enable EUTL verification",
          "type": "boolean"
        },
        "EnableValidateSigningCertificateName": {
          "description": "Enable validation of signing certificate name with regex",
          "type": "boolean"
        },
        "SigningCertificateNameRegex": {
          "description": "Signing certificate name regex",
          "type": "string"
        }
      },
      "xml": {
        "name": "PdfSignatureProperties"
      },
      "type": "object"
    },
    "PdfSignatureCryptographicData": {
      "description": "Configure a PdfSignatureCryptographicData.",
      "properties": {
        "SignatureHashAlgorithm": {
          "description": "Define the HashAlgorithm for the signature.",
          "type": "string",
          "enum": [
            "Sha1",
            "Sha256",
            "Sha512"
          ],
          "x-ms-enum": {}
        },
        "SigningCertificateDescriptor": {
          "$ref": "#/definitions/SigningCertificateDescriptor",
          "description": "Configure a SigningCertificateDescriptor for this object."
        }
      },
      "xml": {
        "name": "PdfSignatureCryptographicData"
      },
      "type": "object"
    },
    "CertificateFilter": {
      "description": "Signatureplugin certificate filter configuration.",
      "properties": {
        "KeyUsages": {
          "description": "KeyUsages.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ThumbPrints": {
          "description": "ThumbPrints.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "RootThumbPrints": {
          "description": "RootThumbPrints.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "CertificateFilter"
      },
      "type": "object"
    },
    "MultipleSignatureTypesAndBatchSigningSettings": {
      "description": "Configure settings for multiple signature types and batch signing.",
      "properties": {
        "IsUseBatchSigningCheckedByDefault": {
          "description": "If enabled, the \"Use batch signing\" checkbox inside the dialog when signing a signature field is checked by default.",
          "type": "boolean"
        },
        "IsRememberSignatureTypeCheckedByDefault": {
          "description": "If enabled, the \"Remember signature type\" checkbox inside the dialog when signing a signature field is checked by default.",
          "type": "boolean"
        },
        "IsRememberBatchSigningDecisionCheckedByDefault": {
          "description": "If enabled, the \"remember batch signing decision\" checkbox inside the dialog when signing a signature field is checked by default.",
          "type": "boolean"
        },
        "SkipMultipleSignatureTypesAndBatchSigningDialogIfBatchSigningPossible": {
          "description": "If enabled, and the IsUseBatchSigningCheckedByDefault is also enabled, the dialog to confirm the batch signing (and optionally choosing the signature type) will be skipped if either the signature type to use has been remembered earlier or a preferred type is set.",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "MultipleSignatureTypesAndBatchSigningSettings"
      },
      "type": "object"
    },
    "VisibleAreaOptions": {
      "description": "Options for Post Messaging in Iframes.",
      "properties": {
        "AllowedDomain": {
          "description": "Allowed domains for post messaging.\r\nE.g. \"esignanywhere.com\"",
          "type": "string"
        },
        "Enabled": {
          "description": "Defines if post messaging should be enabled.\r\nDefault is false.",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "VisibleAreaOptions"
      },
      "type": "object"
    },
    "AuthenticationMethod": {
      "description": "Abstract class, use the derived classes:\r\n- AuthenticationMethodCertificate\r\n- AuthenticationMethodFacebook\r\n- AuthenticationMethodGenericOAuthClient\r\n- AuthenticationMethodGenericSamlClient\r\n- AuthenticationMethodGoogle\r\n- AuthenticationMethodIdentityServer\r\n- AuthenticationMethodNamirialRemoteSignature\r\n- AuthenticationMethodPin\r\n- AuthenticationMethodSms\r\n- AuthenticationMethodUserId\r\n- AuthenticationMethodWindowsLive\r\n- AuthenticationMethodBankId\r\n            \r\nFor usage see sample code.\r\n\r\nMethod to authenticate.",
      "required": [
        "DiscriminatorType"
      ],
      "properties": {
        "DiscriminatorType": {
          "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
          "type": "string"
        }
      },
      "discriminator": "DiscriminatorType",
      "xml": {
        "name": "AuthenticationMethod"
      },
      "type": "object"
    },
    "WorkstepIdStampConfiguration": {
      "description": "Configuration of WorkstepIdStamp.",
      "properties": {
        "ReferenceCorner": {
          "description": "Defines the corner to reference.",
          "type": "string",
          "enum": [
            "Upper_Right",
            "Upper_Left",
            "Lower_Right",
            "Lower_Left"
          ],
          "x-ms-enum": {}
        },
        "Color": {
          "description": "Defines the color. (e.g. \"blue\")",
          "type": "string"
        },
        "Location": {
          "$ref": "#/definitions/WorkstepIdStampConfigurationLocation",
          "description": "Defines the location of this object."
        }
      },
      "xml": {
        "name": "WorkstepIdStampConfiguration"
      },
      "type": "object"
    },
    "NotificationConfiguration": {
      "description": "Configure the notifications.",
      "properties": {
        "NotificationEventsToSend": {
          "$ref": "#/definitions/NotificationEventsToSend",
          "description": "Defines the events that should be send."
        },
        "NotificationUrl": {
          "description": "The url of the notifcation.",
          "type": "string"
        }
      },
      "xml": {
        "name": "NotificationConfiguration"
      },
      "type": "object"
    },
    "GeneralPolicies": {
      "description": "Defines general policies for this workstep.",
      "properties": {
        "AllowSaveDocument": {
          "description": "Is the client allowed to save the workstep document.",
          "type": "boolean"
        },
        "AllowSaveAuditTrail": {
          "description": "Is the client allowed to save the audittrail document.",
          "type": "boolean"
        },
        "AllowRotatingPages": {
          "description": "Is the client allowed to rotate the pages of the document.",
          "type": "boolean",
          "default": true
        },
        "AllowAppendFileToWorkstep": {
          "description": "Is the client allowed to append a file to the workstep.",
          "type": "boolean"
        },
        "AllowAppendTaskToWorkstep": {
          "description": "Is the client allowed to add append tasks to the workstep.",
          "type": "boolean"
        },
        "AllowEmailDocument": {
          "description": "Is the client allowed to email the workstep document.",
          "type": "boolean"
        },
        "AllowPrintDocument": {
          "description": "Is the client allowed to print the workstep document.",
          "type": "boolean"
        },
        "AllowFinishWorkstep": {
          "description": "Is the client allowed to finish the workstep.",
          "type": "boolean",
          "default": true
        },
        "AllowRejectWorkstep": {
          "description": "Is the client allowed to reject the workstep.",
          "type": "boolean"
        },
        "AllowRejectWorkstepDelegation": {
          "description": "Is the client allowed to reject the workstep with reject type 'Delegation'.",
          "type": "boolean"
        },
        "AllowUndoLastAction": {
          "description": "Is the client allowed to undo actions.",
          "type": "boolean",
          "default": true
        },
        "AllowColorizePdfForms": {
          "description": "Is the client allowed to colorize pdf forms.",
          "type": "boolean"
        },
        "AllowAdhocPdfAttachments": {
          "description": "Is the client allowed to add adhoc attachments.",
          "type": "boolean"
        },
        "AllowAdhocSignatures": {
          "description": "Is the client allowed to add signatures which are not defined in the tasks.",
          "type": "boolean"
        },
        "AllowAdhocStampings": {
          "description": "Is the client allowed to add stampings which are not defined in the tasks.",
          "type": "boolean"
        },
        "AllowAdhocFreeHandAnnotations": {
          "description": "Is the client allowed to add adhoc freehand annotations.",
          "type": "boolean"
        },
        "AllowAdhocTypewriterAnnotations": {
          "description": "Is the client allowed to add adhoc typewriter annotations.",
          "type": "boolean"
        },
        "AllowAdhocPictureAnnotations": {
          "description": "Is the client allowed to add adhoc picture annotations.",
          "type": "boolean"
        },
        "AllowAdhocPdfPageAppending": {
          "description": "Is the client allowed to append adhoc documents.",
          "type": "boolean"
        },
        "AllowReloadOfFinishedWorkstep": {
          "description": "Allow reload of finished workstep.",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "GeneralPolicies"
      },
      "type": "object"
    },
    "WorkstepTasks": {
      "properties": {
        "PictureAnnotationMinResolution": {
          "description": "Minimum resolution for PictureAnnotation of the picture based on the target size.",
          "type": "integer",
          "format": "int32",
          "default": -1
        },
        "PictureAnnotationMaxResolution": {
          "description": "Minimum resolution of PictureAnnotation the picture based on the target size.",
          "type": "integer",
          "format": "int32",
          "default": -1
        },
        "PictureAnnotationColorDepth": {
          "description": "Defines the color depth for PictureAnnotation.",
          "type": "string",
          "default": "Color16M",
          "enum": [
            "Color16M",
            "Grayscale256"
          ],
          "x-ms-enum": {}
        },
        "SetFormFieldsToReadOnlyAfterTask": {
          "description": "set all form fields in the document to readonly right before this task is executed.",
          "type": "string"
        },
        "SequenceMode": {
          "description": "Mode for sequence of",
          "type": "string",
          "default": "NoSequenceEnforced",
          "enum": [
            "NoSequenceEnforced",
            "SequenceOnlyRequiredTasks",
            "SequenceEnforced"
          ],
          "x-ms-enum": {}
        },
        "PositionUnits": {
          "description": "Define the default position units.",
          "type": "string",
          "default": "PdfUnits",
          "enum": [
            "PdfUnits",
            "Inches",
            "Millimeters"
          ],
          "x-ms-enum": {}
        },
        "ReferenceCorner": {
          "description": "Define the default reference corner.",
          "type": "string",
          "default": "Lower_Left",
          "enum": [
            "Upper_Right",
            "Upper_Left",
            "Lower_Right",
            "Lower_Left"
          ],
          "x-ms-enum": {}
        },
        "Tasks": {
          "description": "Collection of tasks that are assigned and have to be processed.",
          "items": {
            "$ref": "#/definitions/WorkstepTask"
          },
          "xml": {
            "name": "WorkstepTask",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "WorkstepTasks"
      },
      "type": "object"
    },
    "FinalizeActions": {
      "description": "Allows to define actions which will be executed when the workstep will be finished. Those actions are performed before the ServerAction will be called and, depending on the type of the action, it might change the documents according to the workstep!",
      "properties": {
        "FinalizeActionList": {
          "description": "Collection of finalize actions.",
          "items": {
            "$ref": "#/definitions/FinalizeAction"
          },
          "xml": {
            "name": "FinalizeAction",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "FinalizeActions"
      },
      "type": "object"
    },
    "SignatureTimestampData": {
      "description": "Configure SignatureTimestampData.",
      "properties": {
        "Uri": {
          "description": "Uri for the SignatureTimestampData.",
          "type": "string"
        },
        "Username": {
          "description": "Define the username.",
          "type": "string"
        },
        "Password": {
          "description": "Define the password.",
          "type": "string"
        },
        "SignatureHashAlgorithm": {
          "description": "Define the HashAlgorithm for the signature.",
          "type": "string",
          "enum": [
            "Sha1",
            "Sha256",
            "Sha512"
          ],
          "x-ms-enum": {}
        },
        "AuthenticationCertifiateDescriptor": {
          "$ref": "#/definitions/AuthenticationCertificateDescriptor",
          "description": "Configure the AuthenticationCertifiateDescriptor for this object."
        }
      },
      "xml": {
        "name": "SignatureTimestampData"
      },
      "type": "object"
    },
    "SigningCertificateDescriptor": {
      "description": "Configure the",
      "properties": {
        "Identifier": {
          "description": "Identifier for this",
          "type": "string"
        },
        "Type": {
          "description": "Defines which type should be used.",
          "type": "string",
          "enum": [
            "Sha1Thumbprint",
            "Subject"
          ],
          "x-ms-enum": {}
        },
        "Csp": {
          "description": "Defines which Csp type should be used.",
          "type": "string",
          "enum": [
            "Default",
            "Custom"
          ],
          "x-ms-enum": {}
        }
      },
      "xml": {
        "name": "SigningCertificateDescriptor"
      },
      "type": "object"
    },
    "WorkstepIdStampConfigurationLocation": {
      "description": "Defines the location of WorkstepIdStampConfiguration.",
      "properties": {
        "Size": {
          "$ref": "#/definitions/Size",
          "description": "Defines width and height of the object."
        },
        "MarginLeft": {
          "description": "Maring from left.",
          "type": "number",
          "format": "double"
        },
        "MarginTop": {
          "description": "Margin from top.",
          "type": "number",
          "format": "double"
        }
      },
      "xml": {
        "name": "WorkstepIdStampConfigurationLocation"
      },
      "type": "object"
    },
    "NotificationEventsToSend": {
      "description": "Defines the events that should be send.",
      "properties": {
        "NotificationEvents": {
          "description": "Collection of notification event types.",
          "items": {
            "type": "string",
            "enum": [
              "ConfirmTransactionCode",
              "DefaultEventType",
              "AgreementAccepted",
              "AgreementRejected",
              "RequestPrepareAuthenticationInformationSuccess",
              "PrepareAuthenticationSuccess",
              "AuthenticationFailed",
              "AuthenticationRejected",
              "AuthenticationSuccess",
              "ReAuthenticationFailed",
              "AuditTrailRequested",
              "AuditTrailXmlRequested",
              "CalledPage",
              "WhoIsInformation",
              "DocumentDownloaded",
              "FlattenedDocumentDownloaded",
              "AddedAnnotation",
              "AddedAttachment",
              "AppendedDocument",
              "FormsFilled",
              "ConfirmReading",
              "PageViewChanged",
              "SendTransactionCode",
              "PrepareSignWorkstepDocument",
              "SignWorkstepDocument",
              "UndoAction",
              "WorkstepCreated",
              "WorkstepFinished",
              "WorkstepRejected",
              "DisablePolicyAndValidityChecks",
              "EnablePolicyAndValidityChecks",
              "AppendFileToWorkstep",
              "AppendTasksToWorkstep",
              "SetOptionalDocumentState",
              "StartBatch",
              "EndBatch",
              "PreparePayloadForBatch"
            ],
            "x-ms-enum": {}
          },
          "xml": {
            "name": "NotifcationEventType",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "NotificationEventsToSend"
      },
      "type": "object"
    },
    "WorkstepTask": {
      "description": "Abstract class, use the derived classes:\r\n- Agreements\r\n- AppendPages\r\n- Attachment\r\n- FormGroup\r\n- PictureAnnotationConfiguration\r\n- ReadingTask\r\n- Signature\r\n- SignPkcs7\r\n- TypewriterAnnotation\r\n            \r\nFor usage see sample code.",
      "required": [
        "DiscriminatorType"
      ],
      "properties": {
        "IsRequired": {
          "description": "Define if the task is required.",
          "type": "boolean",
          "default": false
        },
        "Id": {
          "description": "Define the identifier for the task.",
          "type": "string"
        },
        "DisplayName": {
          "description": "Define the name to be displayed.",
          "type": "string"
        },
        "DocRefNumber": {
          "description": "Document number of the task.",
          "type": "integer",
          "format": "int32"
        },
        "AdditionalInformation": {
          "description": "Additional information for the client",
          "type": "string"
        },
        "BatchId": {
          "description": "Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).",
          "type": "string"
        },
        "DiscriminatorType": {
          "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
          "type": "string"
        }
      },
      "discriminator": "DiscriminatorType",
      "xml": {
        "name": "WorkstepTask"
      },
      "type": "object"
    },
    "FinalizeAction": {
      "description": "Abstract class, use the derived classes:\r\n- AutomaticSignature\r\n- Timestamp\r\n            \r\nFor usage see sample code.",
      "required": [
        "DiscriminatorType"
      ],
      "properties": {
        "DiscriminatorType": {
          "description": "DiscriminatorType.",
          "type": "string"
        }
      },
      "discriminator": "DiscriminatorType",
      "xml": {
        "name": "FinalizeAction"
      },
      "type": "object"
    },
    "AuthenticationCertificateDescriptor": {
      "description": "Configure an AuthenticationCertificateDescriptor.",
      "properties": {
        "Identifier": {
          "description": "Identifier for this AuthenticationCertificateDescriptor.",
          "type": "string"
        },
        "Type": {
          "description": "Defines the type.",
          "type": "string"
        }
      },
      "xml": {
        "name": "AuthenticationCertificateDescriptor"
      },
      "type": "object"
    },
    "Size": {
      "description": "Size of an element.",
      "properties": {
        "Height": {
          "description": "Height of the element.",
          "type": "number",
          "format": "double"
        },
        "Width": {
          "description": "Width of the element.",
          "type": "number",
          "format": "double"
        }
      },
      "xml": {
        "name": "Size"
      },
      "type": "object"
    },
    "CreateDraftResult": {
      "properties": {
        "DraftId": {
          "type": "string"
        }
      },
      "xml": {
        "name": "CreateDraftResult"
      },
      "type": "object"
    },
    "Error": {
      "description": "Flow Api error.",
      "properties": {
        "ErrorId": {
          "description": "Id of the error.",
          "type": "string"
        },
        "Message": {
          "description": "Message from the error.",
          "type": "string"
        },
        "SupportId": {
          "description": "Support identifier.",
          "type": "string"
        },
        "ThrownException": {
          "type": "object"
        }
      },
      "xml": {
        "name": "Error"
      },
      "type": "object"
    },
    "DraftCreateFromTemplateModel": {
      "properties": {
        "TemplateId": {
          "description": "The id of the template.",
          "type": "string"
        },
        "EnvelopeOverrideOptions": {
          "$ref": "#/definitions/EnvelopeOverrideOptions",
          "description": "The options to override from the template."
        },
        "CreateDraftOptions": {
          "$ref": "#/definitions/CreateDraftOptions",
          "description": "Draft creation options."
        }
      },
      "xml": {
        "name": "DraftCreateFromTemplateModel"
      },
      "type": "object"
    },
    "EnvelopeOverrideOptions": {
      "description": "Override options.",
      "properties": {
        "Recipients": {
          "description": "A list of recipients which should replace the recipients in the template.",
          "items": {
            "$ref": "#/definitions/EnvelopeOverrideOptionsRecipient"
          },
          "xml": {
            "name": "EnvelopeOverrideOptionsRecipient",
            "wrapped": true
          },
          "type": "array"
        },
        "AddFormFields": {
          "$ref": "#/definitions/AddFormFields",
          "description": "Added form fields."
        },
        "OverrideFormFieldValues": {
          "$ref": "#/definitions/OverrideFormFieldOptions",
          "description": "Form field descriptions which should be filled."
        },
        "Name": {
          "description": "Name of the envelope.",
          "type": "string"
        },
        "EmailSubject": {
          "description": "Email subject of the envelope.",
          "type": "string"
        },
        "EmailBody": {
          "description": "Email body of the envelope.",
          "type": "string"
        },
        "EnableReminders": {
          "description": "Enable reminders for the envelope.\r\nIf set, overrides the default options from the organization/user.",
          "type": "boolean"
        },
        "FirstReminderDayAmount": {
          "description": "Amount of days until the first reminder is sent out.\r\nIf set, overrides the default options from the organization/user.",
          "type": "integer",
          "format": "int32"
        },
        "RecurrentReminderDayAmount": {
          "description": "Amount of days until all recurrent reminders are sent out.\r\nIf set, overrides the default options from the organization/user.",
          "type": "integer",
          "format": "int32"
        },
        "BeforeExpirationDayAmount": {
          "description": "Amount of days until a reminder about the expiration is sent out.\r\nIf set, overrides the default options from the organization/user.",
          "type": "integer",
          "format": "int32"
        },
        "DaysUntilExpire": {
          "description": "Amount of days until the envelope expires.\r\nIf set, overrides the default options from the organization/user.",
          "type": "integer",
          "format": "int32",
          "default": 28
        },
        "CallbackUrl": {
          "description": "The callback url of the envelope.",
          "type": "string"
        },
        "StatusUpdateCallbackUrl": {
          "description": "The callback url of status changes for the envelope.",
          "type": "string"
        },
        "WorkstepEventCallback": {
          "$ref": "#/definitions/WorkstepEventCallback",
          "description": "Workstep event callback options."
        },
        "MetaDataXml": {
          "type": "string"
        }
      },
      "xml": {
        "name": "EnvelopeOverrideOptions"
      },
      "type": "object"
    },
    "EnvelopeOverrideOptionsRecipient": {
      "description": "Description for overriding an existing recipient.",
      "properties": {
        "RecipientId": {
          "description": "The id of the recipient to replace.",
          "type": "string"
        },
        "OrderIndex": {
          "description": "The order index of the recipient to replace.",
          "type": "integer",
          "format": "int32"
        },
        "Email": {
          "description": "The email of the recipient to replace.",
          "type": "string"
        },
        "Recipient": {
          "$ref": "#/definitions/SendEnvelopeRecipient",
          "description": "The new recipient which should replace the existing recipient."
        }
      },
      "xml": {
        "name": "EnvelopeOverrideOptionsRecipient"
      },
      "type": "object"
    },
    "EnvelopeStatus": {
      "description": "The status of an envelope or bulk envelope.",
      "properties": {
        "Status": {
          "description": "The overall status of the envelope or the bulk status in case of a bulk.",
          "type": "string",
          "enum": [
            "Draft",
            "Started",
            "InProgress",
            "Canceled",
            "Completed",
            "Expired",
            "Rejected",
            "Template",
            "CompletedWithWarnings",
            "BulkCompleted",
            "BulkPartlyCompleted"
          ],
          "x-ms-enum": {}
        },
        "SendDate": {
          "description": "The date when the envelope was sent.",
          "type": "string",
          "format": "date-time"
        },
        "ExpirationDate": {
          "description": "The date when the envelope will expire.",
          "type": "string",
          "format": "date-time"
        },
        "ValidityFromCreationInDays": {
          "description": "The number of days from when the envelope will expire, starting from the send date.",
          "type": "integer",
          "format": "int32"
        },
        "Bulks": {
          "description": "The list of envelopes which belong to the bulk envelope in case of a bulk.\r\nIn case of a non bulk envelope it consists only of 1 envelope - the actual envelope.",
          "items": {
            "$ref": "#/definitions/EnvelopeBulkStatus"
          },
          "xml": {
            "name": "EnvelopeBulkStatus",
            "wrapped": true
          },
          "type": "array"
        },
        "Documents": {
          "description": "The documents which belong to the envelope.",
          "items": {
            "$ref": "#/definitions/SentDocument"
          },
          "xml": {
            "name": "SentDocument",
            "wrapped": true
          },
          "type": "array"
        },
        "Id": {
          "description": "The id of the envelope.",
          "type": "string"
        },
        "Bulk": {
          "description": "The bulk id of the envelope. If the envelope is not a bulk, this value is empty.",
          "type": "string"
        },
        "BasicOptions": {
          "$ref": "#/definitions/EnvelopeBasicOptions",
          "description": "Properties of the envelope (e.g. reminder settings)."
        }
      },
      "xml": {
        "name": "EnvelopeStatus"
      },
      "type": "object"
    },
    "EnvelopeBulkStatus": {
      "description": "Represents a single envelope of a bulk envelope (a child).\r\nIn case of a non bulk envelope this represents a normal envelope.",
      "properties": {
        "Status": {
          "description": "The status of the envelope.",
          "type": "string",
          "enum": [
            "Draft",
            "Started",
            "InProgress",
            "Canceled",
            "Completed",
            "Expired",
            "Rejected",
            "Template",
            "CompletedWithWarnings",
            "BulkCompleted",
            "BulkPartlyCompleted"
          ],
          "x-ms-enum": {}
        },
        "Email": {
          "description": "The email of the bulk recipient. Empty if the envelope is not a bulk.",
          "type": "string"
        },
        "Id": {
          "description": "The envelope id.",
          "type": "string"
        },
        "LogDocumentId": {
          "description": "The document id of the audit trail information pdf file.",
          "type": "string"
        },
        "LogXmlDocumentId": {
          "description": "The document id of the audit trail information xml file.",
          "type": "string"
        },
        "FinishedDocuments": {
          "description": "The finished documents of the envelope containing all the actions (e.g. signed signatures, etc.).",
          "items": {
            "$ref": "#/definitions/FinishedDocument"
          },
          "xml": {
            "name": "FinishedDocument",
            "wrapped": true
          },
          "type": "array"
        },
        "Steps": {
          "description": "The steps of the envelope.",
          "items": {
            "$ref": "#/definitions/EnvelopeStatusRecipient"
          },
          "xml": {
            "name": "EnvelopeStatusRecipient",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "EnvelopeBulkStatus"
      },
      "type": "object"
    },
    "SentDocument": {
      "properties": {
        "PageSizesInPoints": {
          "items": {
            "$ref": "#/definitions/Size"
          },
          "xml": {
            "name": "Size",
            "wrapped": true
          },
          "type": "array"
        },
        "DocRefNumber": {
          "type": "integer",
          "format": "int32"
        },
        "FileName": {
          "type": "string"
        },
        "FormFields": {
          "items": {
            "$ref": "#/definitions/DocumentFormField"
          },
          "xml": {
            "name": "DocumentFormField",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "SentDocument"
      },
      "type": "object"
    },
    "EnvelopeBasicOptions": {
      "description": "Options for an envelope.",
      "properties": {
        "Name": {
          "description": "Name of the envelope.",
          "type": "string"
        },
        "EmailSubject": {
          "description": "Email subject of the envelope.",
          "type": "string"
        },
        "EmailBody": {
          "description": "Email body of the envelope.",
          "type": "string"
        },
        "EnableReminders": {
          "description": "Enable reminders for the envelope.\r\nIf set, overrides the default options from the organization/user.",
          "type": "boolean"
        },
        "FirstReminderDayAmount": {
          "description": "Amount of days until the first reminder is sent out.\r\nIf set, overrides the default options from the organization/user.",
          "type": "integer",
          "format": "int32"
        },
        "RecurrentReminderDayAmount": {
          "description": "Amount of days until all recurrent reminders are sent out.\r\nIf set, overrides the default options from the organization/user.",
          "type": "integer",
          "format": "int32"
        },
        "BeforeExpirationDayAmount": {
          "description": "Amount of days until a reminder about the expiration is sent out.\r\nIf set, overrides the default options from the organization/user.",
          "type": "integer",
          "format": "int32"
        },
        "DaysUntilExpire": {
          "description": "Amount of days until the envelope expires.\r\nIf set, overrides the default options from the organization/user.",
          "type": "integer",
          "format": "int32",
          "default": 28
        },
        "CallbackUrl": {
          "description": "The callback url of the envelope.",
          "type": "string"
        },
        "StatusUpdateCallbackUrl": {
          "description": "The callback url of status changes for the envelope.",
          "type": "string"
        },
        "WorkstepEventCallback": {
          "$ref": "#/definitions/WorkstepEventCallback",
          "description": "Workstep event callback options."
        },
        "MetaDataXml": {
          "type": "string"
        }
      },
      "xml": {
        "name": "EnvelopeBasicOptions"
      },
      "type": "object"
    },
    "FinishedDocument": {
      "properties": {
        "FlowDocumentId": {
          "type": "string"
        },
        "LogDocumentId": {
          "type": "string"
        },
        "Attachments": {
          "items": {
            "$ref": "#/definitions/DocumentAttachment"
          },
          "xml": {
            "name": "DocumentAttachment",
            "wrapped": true
          },
          "type": "array"
        },
        "SignedSignatureFields": {
          "items": {
            "$ref": "#/definitions/DocumentSignatureField"
          },
          "xml": {
            "name": "DocumentSignatureField",
            "wrapped": true
          },
          "type": "array"
        },
        "DocRefNumber": {
          "type": "integer",
          "format": "int32"
        },
        "FileName": {
          "type": "string"
        },
        "FormFields": {
          "items": {
            "$ref": "#/definitions/DocumentFormField"
          },
          "xml": {
            "name": "DocumentFormField",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "FinishedDocument"
      },
      "type": "object"
    },
    "EnvelopeStatusRecipient": {
      "description": "A represenation of a recipient for the current status of an envelope.",
      "properties": {
        "Id": {
          "description": "The id of the recipient.",
          "type": "string"
        },
        "FirstName": {
          "description": "The first name of the recipient.",
          "type": "string"
        },
        "LastName": {
          "description": "The last name of the recipient.",
          "type": "string"
        },
        "OrderIndex": {
          "description": "The order in the envelope of the recipient.",
          "type": "integer",
          "format": "int32"
        },
        "Email": {
          "description": "The email address of the recipient.",
          "type": "string"
        },
        "LanguageCode": {
          "description": "The language code of the recipient.",
          "type": "string"
        },
        "Status": {
          "description": "The current workstep result status of the recipient.",
          "type": "string",
          "enum": [
            "NotSigned",
            "Signed",
            "Rejected",
            "Delegated"
          ],
          "x-ms-enum": {}
        },
        "StatusReason": {
          "type": "string"
        },
        "RecipientType": {
          "description": "The type of the recipient.",
          "type": "string",
          "enum": [
            "Signer",
            "Cc",
            "Acknowledge",
            "Pkcs7Signer",
            "Automatic"
          ],
          "x-ms-enum": {}
        },
        "SignedDate": {
          "description": "The date when the recipient finished its actions.",
          "type": "string",
          "format": "date-time"
        },
        "OpenedDate": {
          "description": "The date when the recipient opened the envelope.",
          "type": "string",
          "format": "date-time"
        },
        "WorkstepRedirectionUrl": {
          "description": "The url for generating a workstep for the recipient. Opens the viewer where the recipient has to perform his actions.",
          "type": "string"
        },
        "Warnings": {
          "description": "Occured warnings.",
          "items": {
            "$ref": "#/definitions/EnvelopeStatusWarning"
          },
          "xml": {
            "name": "EnvelopeStatusWarning",
            "wrapped": true
          },
          "type": "array"
        },
        "Authentication": {
          "description": "The possible authentication methods for the recipient.",
          "items": {
            "$ref": "#/definitions/SendEnvelopeAuthentication"
          },
          "xml": {
            "name": "SendEnvelopeAuthentication",
            "wrapped": true
          },
          "type": "array"
        },
        "IsParallel": {
          "description": "Defines if the recipient is parallel and the corresponding envelope has recipients with the same order index.",
          "type": "boolean"
        },
        "WorkstepConfiguration": {
          "$ref": "#/definitions/WorkstepConfiguration",
          "description": "WorkstepConfiguration."
        },
        "DisclaimerDocuments": {
          "description": "A list of disclaimer documents including their type for downloading.",
          "items": {
            "$ref": "#/definitions/DisclaimerDocument"
          },
          "xml": {
            "name": "DisclaimerDocument",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "EnvelopeStatusRecipient"
      },
      "type": "object"
    },
    "DocumentFormField": {
      "properties": {
        "Name": {
          "type": "string"
        },
        "Values": {
          "items": {
            "$ref": "#/definitions/KeyValuePair"
          },
          "xml": {
            "name": "KeyValuePair",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "DocumentFormField"
      },
      "type": "object"
    },
    "DocumentAttachment": {
      "properties": {
        "Name": {
          "type": "string"
        },
        "DocumentId": {
          "type": "string"
        }
      },
      "xml": {
        "name": "DocumentAttachment"
      },
      "type": "object"
    },
    "DocumentSignatureField": {
      "properties": {
        "Name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "DocumentSignatureField"
      },
      "type": "object"
    },
    "EnvelopeStatusWarning": {
      "description": "Occurred warnings of an recipient.",
      "properties": {
        "Type": {
          "description": "The warning type.",
          "type": "string",
          "enum": [
            "None",
            "LongLivedDisposableCertificateUsage"
          ],
          "x-ms-enum": {}
        },
        "ContentXmlList": {
          "description": "The warning contents.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "EnvelopeStatusWarning"
      },
      "type": "object"
    },
    "DisclaimerDocument": {
      "properties": {
        "DocumentId": {
          "description": "The Id of the document for downloading.",
          "type": "string"
        },
        "DisclaimerType": {
          "description": "The type of the document.",
          "type": "string",
          "enum": [
            "DisposableDisclaimer"
          ],
          "x-ms-enum": {}
        }
      },
      "xml": {
        "name": "DisclaimerDocument"
      },
      "type": "object"
    },
    "FindEnvelopesDescriptor": {
      "description": "Descriptor for filtering envelopes.",
      "properties": {
        "StartDate": {
          "description": "If set, filters for envelopes which where created (Status: Template, Draft) or sent after the start date.",
          "type": "string",
          "format": "date-time"
        },
        "EndDate": {
          "description": "If set, filters for envelopes which where created (Status: Template, Draft) or sent before the end date.",
          "type": "string",
          "format": "date-time"
        },
        "SearchText": {
          "description": "If set, filters for the given text in email subject/body, envelope name/description, sender first/lastname email and recipient first/lastname email.\r\nExpensive!",
          "type": "string"
        },
        "Status": {
          "description": "If set, filters for envelopes by status.",
          "type": "string",
          "enum": [
            "Draft",
            "Canceled",
            "Completed",
            "Expired",
            "Rejected",
            "Template",
            "ActionRequired",
            "WaitingForOthers",
            "ExpiringSoon",
            "Active"
          ],
          "x-ms-enum": {}
        },
        "InStatusSinceDays": {
          "description": "If set, filters for envelopes which have the given status for the given days.\r\nMust be combined with Status.",
          "type": "integer",
          "format": "int32"
        },
        "Senders": {
          "description": "If set, filters for the sender email adresses.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Signers": {
          "description": "If set, filters for the given sender email adresses.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Recipients": {
          "description": "If set, filters for the given recipient email adresses.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "WaitingForRecipient": {
          "description": "If set, filters for envelopes which are waiting for the given recipient email address.",
          "type": "string"
        },
        "Bulk": {
          "description": "If set, filters for envelopes for of the given bulk id.",
          "type": "string"
        }
      },
      "xml": {
        "name": "FindEnvelopesDescriptor"
      },
      "type": "object"
    },
    "ExtendedFindEnvelopesResult": {
      "description": "The search result of the found envelopes.",
      "properties": {
        "Envelopes": {
          "description": "The envelopes which match the searched criteria.",
          "items": {
            "$ref": "#/definitions/ExtendedFindEnvelopesResultEntry"
          },
          "xml": {
            "name": "ExtendedFindEnvelopesResultEntry",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "ExtendedFindEnvelopesResult"
      },
      "type": "object"
    },
    "ExtendedFindEnvelopesResultEntry": {
      "description": "Represents an envelope.",
      "properties": {
        "Status": {
          "description": "The status of the envelope.",
          "type": "string",
          "enum": [
            "Draft",
            "Started",
            "InProgress",
            "Canceled",
            "Completed",
            "Expired",
            "Rejected",
            "Template",
            "CompletedWithWarnings",
            "BulkCompleted",
            "BulkPartlyCompleted"
          ],
          "x-ms-enum": {}
        },
        "Id": {
          "description": "The envelope id.",
          "type": "string"
        },
        "Name": {
          "description": "The name of the envelope.",
          "type": "string"
        },
        "MetaDataXml": {
          "type": "string"
        },
        "Bulk": {
          "description": "The bulk id. \r\nOnly set if the envelope is part of a bulk.",
          "type": "string"
        }
      },
      "xml": {
        "name": "ExtendedFindEnvelopesResultEntry"
      },
      "type": "object"
    },
    "EnvelopePrepareModel": {
      "properties": {
        "SspFileIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "AdHocWorkstepConfiguration": {
          "$ref": "#/definitions/AdHocWorkstepConfiguration"
        },
        "PrepareSendEnvelopeStepsDescriptor": {
          "$ref": "#/definitions/PrepareSendEnvelopeStepsDescriptor"
        }
      },
      "xml": {
        "name": "EnvelopePrepareModel"
      },
      "type": "object"
    },
    "AdHocWorkstepConfiguration": {
      "description": "Configure the adhoc workstep creation.",
      "properties": {
        "WorkstepLabel": {
          "description": "A label for this workstep",
          "type": "string",
          "default": ""
        },
        "SmallTextZoomFactorPercent": {
          "description": "Defines a image generation correction factor. If for example this document contains very small text, which might not be readable with the standard image resolution of the client, this factor can be used to tell the client to get a higher resolution.",
          "type": "integer",
          "format": "int32",
          "default": 100
        },
        "WorkstepTimeToLiveInMinutes": {
          "description": "Defines the time to live of all the documents created by the workstep. After this time to live is expired, all documents are deleted. '0' sets the time to live to forever.",
          "type": "integer",
          "format": "int32",
          "default": 43200
        },
        "FinishAction": {
          "$ref": "#/definitions/FinishAction",
          "description": "Configure the actions done by the server and the by the clients when the workstep is finished."
        },
        "NoSequenceEnforced": {
          "description": "Define the sequence mode.",
          "type": "boolean",
          "default": true
        },
        "SigTemplate": {
          "$ref": "#/definitions/SigTemplate",
          "description": "A template for signature definitions."
        },
        "ParseFormFields": {
          "$ref": "#/definitions/ParseFormFields",
          "description": "Configuration for parsing the form fields."
        },
        "AdhocPolicies": {
          "$ref": "#/definitions/AdhocPolicies",
          "description": "If the workstep is not generated by hand but automatically generated by the Workstep Controller AdhocPolicies are specified."
        },
        "ViewerPreferences": {
          "$ref": "#/definitions/ViewerPreferences",
          "description": "The Viewer Preferences can be used to adapt the appearance and the behavior of the SignAnyWhere Viewer."
        },
        "SignatureConfigurations": {
          "description": "Configurate the signatures for this workstep. One default configuration has to be defined. The default configuration is used for flatten signatures, adhoc signatures and signature fields which do not reference a special signature plugin configuration. The default configuration does not contain the attribute 'spcId'. If the attribute 'spcId' is defined the signature plugin configuration does only apply to signature fields referencing the configuration by specifiying <param name=\"spcId\">id</param>.",
          "items": {
            "$ref": "#/definitions/SignatureConfiguration"
          },
          "xml": {
            "name": "SignatureConfiguration",
            "wrapped": true
          },
          "type": "array"
        },
        "SigStringParsingConfiguration": {
          "$ref": "#/definitions/SigStringParsingConfiguration",
          "description": "Configure the signature string parsing."
        },
        "GeneralPolicies": {
          "$ref": "#/definitions/GeneralPolicies",
          "description": "Defines general policies for this workstep."
        },
        "FinalizeActions": {
          "$ref": "#/definitions/FinalizeActions",
          "description": "Allows to define actions which will be executed when the workstep will be finished. Those actions are performed before the ServerAction will be called and, depending on the type of the action, it might change the documents according to the workstep!"
        },
        "TransactionCodeConfigurations": {
          "description": "Collection of TransactionCodeConfigurations",
          "items": {
            "$ref": "#/definitions/TransactionCodeConfiguration"
          },
          "xml": {
            "name": "TransactionCodeConfiguration",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "AdHocWorkstepConfiguration"
      },
      "type": "object"
    },
    "PrepareSendEnvelopeStepsDescriptor": {
      "properties": {
        "ClearFieldMarkupString": {
          "description": "Specifies if the parsed field markup string should be deleted from the pdf.",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "PrepareSendEnvelopeStepsDescriptor"
      },
      "type": "object"
    },
    "SigTemplate": {
      "description": "A template for signature definitions.",
      "properties": {
        "Size": {
          "$ref": "#/definitions/Size",
          "description": "Define width and height of the elements."
        },
        "AllowedSignatureTypes": {
          "description": "Allowed signatures types.",
          "items": {
            "$ref": "#/definitions/SigType"
          },
          "xml": {
            "name": "SigType",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "SigTemplate"
      },
      "type": "object"
    },
    "ParseFormFields": {
      "description": "Configuration for parsing the form fields.",
      "properties": {
        "MapRequiredFieldsToRequiredTask": {
          "description": "Maps required fields to required task.",
          "type": "boolean"
        },
        "FormsGrouping": {
          "description": "Defines how the forms are grouped.",
          "type": "string",
          "default": "PerPage",
          "enum": [
            "PerPage",
            "PerDocument",
            "PerEnvelope"
          ],
          "x-ms-enum": {}
        },
        "ReturnSimplifiedConfig": {
          "description": "Defines if the simplified configuration should be returned.",
          "type": "boolean",
          "default": true
        },
        "AddKeepExistingValueFlag": {
          "description": "Adds KeepExisitingValue flag.",
          "type": "boolean",
          "default": true
        },
        "ParseFormField": {
          "description": "Defines if form fields should be parsed.",
          "type": "boolean",
          "default": true
        }
      },
      "xml": {
        "name": "ParseFormFields"
      },
      "type": "object"
    },
    "AdhocPolicies": {
      "description": "If the workstep is not generated by hand but automatically generated by the Workstep Controller AdhocPolicies are specified",
      "properties": {
        "AllowModificationsAfterSignature": {
          "description": "Allows modification after the signature.",
          "type": "boolean",
          "default": true
        }
      },
      "xml": {
        "name": "AdhocPolicies"
      },
      "type": "object"
    },
    "SigStringParsingConfiguration": {
      "description": "Configure the signature string parsing.",
      "properties": {
        "SigStringsForParsings": {
          "description": "Collection of all SigStringsForParsing configurations.",
          "items": {
            "$ref": "#/definitions/SigStringsForParsing"
          },
          "xml": {
            "name": "SigStringsForParsing",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "SigStringParsingConfiguration"
      },
      "type": "object"
    },
    "SigType": {
      "description": "Abstract class, use the derived classes:\r\n- SigTypeAutomaticSignature\r\n- SigTypeBiometricSignature\r\n- SigTypeBiometricSignatureAndLocalCertificate\r\n- SigTypeExternalSigningProcess\r\n- SigTypeLocalCertificate\r\n- SigTypeClick2Sign\r\n- SigTypeDraw2Sign\r\n- SigTypeType2Sign\r\n- SigTypeTransactionCode\r\n- SigTypeTransactionCodeAndBiometricSignature\r\n- SigTypeTransactionCodeAndLocalCertificate\r\n- SigTypeTransactionCodeBiometricSignatureAndLocalCertificate\r\n            \r\nFor usage see sample code.",
      "required": [
        "DiscriminatorType"
      ],
      "properties": {
        "Id": {
          "description": "Define a identifier.",
          "type": "string"
        },
        "DiscriminatorType": {
          "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
          "type": "string"
        },
        "Preferred": {
          "description": "Define if this SigType is the preferred one.",
          "type": "boolean"
        },
        "StampImprintConfiguration": {
          "$ref": "#/definitions/StampImprintConfiguration",
          "description": "Confiugre StampImprintConfiguration."
        }
      },
      "discriminator": "DiscriminatorType",
      "xml": {
        "name": "SigType"
      },
      "type": "object"
    },
    "SigStringsForParsing": {
      "description": "Configure how a SigString should be parsed.",
      "properties": {
        "StartPattern": {
          "description": "Defines the start pattern.",
          "type": "string"
        },
        "EndPattern": {
          "description": "Defines the end pattern.",
          "type": "string"
        },
        "ClearSigString": {
          "description": "Configure if the SigString should be cleared.",
          "type": "boolean"
        },
        "SearchEntireWordOnly": {
          "description": "Configure if the entire word should be searched only.",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "SigStringsForParsing"
      },
      "type": "object"
    },
    "StampImprintConfiguration": {
      "description": "Configured StampImprintConfiguration.",
      "properties": {
        "DisplayExtraInformation": {
          "description": "Define if extra information should be displayed.",
          "type": "boolean"
        },
        "DisplayEmail": {
          "description": "Define if email should be displayed.",
          "type": "boolean"
        },
        "DisplayIp": {
          "description": "Define if ip should be displayed.",
          "type": "boolean"
        },
        "DisplayName": {
          "description": "Define if name should be displayed.",
          "type": "boolean"
        },
        "DisplaySignatureDate": {
          "description": "Define if signature date should be displayed.",
          "type": "boolean"
        },
        "FontFamily": {
          "description": "Define a font-family.",
          "type": "string"
        },
        "FontSize": {
          "description": "Define a font-size.",
          "type": "number",
          "format": "double"
        },
        "OverrideLegacyStampImprint": {
          "description": "If set to false everything behaves as it does now, if set to true all StampImprintConfiguration values are evaluated independent of the signature type",
          "type": "boolean",
          "default": false
        },
        "DisplayTransactionId": {
          "description": "Only useful for transaction code signatures.",
          "type": "boolean",
          "default": true
        },
        "DisplayTransaktionToken": {
          "description": "Only useful for transaction code signatures",
          "type": "boolean",
          "default": true
        },
        "DisplayPhoneNumber": {
          "description": "Only useful for transaction code signatures as they define phone numbers",
          "type": "boolean",
          "default": true
        }
      },
      "xml": {
        "name": "StampImprintConfiguration"
      },
      "type": "object"
    },
    "PrepareSendEnvelopeStepsResult": {
      "properties": {
        "AdHocWorkstepConfigResult": {
          "$ref": "#/definitions/WorkstepConfiguration"
        },
        "Steps": {
          "items": {
            "$ref": "#/definitions/SendEnvelopeStep"
          },
          "xml": {
            "name": "SendEnvelopeStep",
            "wrapped": true
          },
          "type": "array"
        },
        "AddFormFields": {
          "$ref": "#/definitions/AddFormFields"
        }
      },
      "xml": {
        "name": "PrepareSendEnvelopeStepsResult"
      },
      "type": "object"
    },
    "EnvelopeSendModel": {
      "description": "Model for sending envelopes.",
      "properties": {
        "SspFileIds": {
          "description": "The ids of uploaded files.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "SendEnvelopeDescription": {
          "$ref": "#/definitions/SendEnvelopeDescription",
          "description": "The description of the envelope."
        }
      },
      "xml": {
        "name": "EnvelopeSendModel"
      },
      "type": "object"
    },
    "SendEnvelopeResult": {
      "properties": {
        "BulkChildrenIds": {
          "items": {
            "$ref": "#/definitions/SendEnvelopeBulkResultEntry"
          },
          "xml": {
            "name": "SendEnvelopeBulkResultEntry",
            "wrapped": true
          },
          "type": "array"
        },
        "EnvelopeId": {
          "type": "string"
        }
      },
      "xml": {
        "name": "SendEnvelopeResult"
      },
      "type": "object"
    },
    "SendEnvelopeBulkResultEntry": {
      "properties": {
        "EnvelopeId": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        }
      },
      "xml": {
        "name": "SendEnvelopeBulkResultEntry"
      },
      "type": "object"
    },
    "EnvelopeSendFromTemplateModel": {
      "description": "Description for sending an envelope from a template.",
      "properties": {
        "TemplateId": {
          "description": "The Id of the template.",
          "type": "string"
        },
        "EnvelopeOverrideOptions": {
          "$ref": "#/definitions/EnvelopeOverrideOptions",
          "description": "Options which should be overriden for teh template."
        }
      },
      "xml": {
        "name": "EnvelopeSendFromTemplateModel"
      },
      "type": "object"
    },
    "SendRemindersResult": {
      "description": "Holds information about the sent reminders.",
      "properties": {
        "Count": {
          "description": "The number of reminder emails which were sent out.",
          "type": "integer",
          "format": "int32"
        },
        "AvoidedDueToRateLimitCount": {
          "description": "The number of not sent reminders due to rate limit.",
          "type": "integer",
          "format": "int32"
        },
        "AvoidedDueToDisabledEmailCount": {
          "description": "The number of not sent reminders due to disabled email sending.",
          "type": "integer",
          "format": "int32"
        }
      },
      "xml": {
        "name": "SendRemindersResult"
      },
      "type": "object"
    },
    "CopyDocumentFromTemplateResult": {
      "description": "CopyDocumentFromTemplateResult.",
      "properties": {
        "SspFileIds": {
          "description": "SspFileId.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "SendEnvelopeDescription": {
          "$ref": "#/definitions/SendEnvelopeDescriptionTemplate",
          "description": "SendEnvelopeDescription."
        }
      },
      "xml": {
        "name": "CopyDocumentFromTemplateResult"
      },
      "type": "object"
    },
    "SendEnvelopeDescriptionTemplate": {
      "properties": {
        "Name": {
          "description": "The name of the envelope.",
          "type": "string"
        },
        "EmailSubject": {
          "description": "The subject of the sent out emails.",
          "type": "string"
        },
        "EmailBody": {
          "description": "The body of the sent out emails.",
          "type": "string"
        },
        "DisplayedEmailSender": {
          "description": "The name of the email sender.",
          "type": "string"
        },
        "EnableReminders": {
          "description": "If true, reminders are used.",
          "type": "boolean"
        },
        "FirstReminderDayAmount": {
          "description": "Amount of days until the first reminder is sent out.",
          "type": "integer",
          "format": "int32"
        },
        "RecurrentReminderDayAmount": {
          "description": "Amount of days until all recurrent reminders are sent out.",
          "type": "integer",
          "format": "int32"
        },
        "BeforeExpirationDayAmount": {
          "description": "Amount of days until a reminder about the expiration is sent out.",
          "type": "integer",
          "format": "int32"
        },
        "DaysUntilExpire": {
          "description": "Amount of days until the envelope expires.",
          "type": "integer",
          "format": "int32",
          "default": 28
        },
        "CallbackUrl": {
          "description": "The callback url of the envelope.",
          "type": "string"
        },
        "StatusUpdateCallbackUrl": {
          "description": "The callback url of status changes for the envelope.",
          "type": "string"
        },
        "WorkstepEventCallback": {
          "$ref": "#/definitions/WorkstepEventCallback",
          "description": "Workstep event callback options."
        },
        "Steps": {
          "description": "The steps for the envelope.",
          "items": {
            "$ref": "#/definitions/SendEnvelopeStep"
          },
          "xml": {
            "name": "SendEnvelopeStep",
            "wrapped": true
          },
          "type": "array"
        },
        "AddFormFields": {
          "$ref": "#/definitions/AddFormFields",
          "description": "Added form fields."
        },
        "MetaDataXml": {
          "type": "string"
        }
      },
      "xml": {
        "name": "SendEnvelopeDescriptionTemplate"
      },
      "type": "object"
    },
    "LicenseInformation": {
      "properties": {
        "Type": {
          "description": "Type of license",
          "type": "string"
        },
        "ExpirationDateUtc": {
          "description": "ExpirationDate in UTC (-1 = unlimited)",
          "type": "string"
        },
        "Documents": {
          "$ref": "#/definitions/LicenseInformationAmount",
          "description": "Number of Documents total (limit) and used"
        },
        "Users": {
          "$ref": "#/definitions/LicenseInformationAmount",
          "description": "Number of Users total (limit) and used"
        },
        "RegisteredSigners": {
          "$ref": "#/definitions/LicenseInformationAmount",
          "description": "Number of RegisteredSigners total (limit) and used"
        }
      },
      "xml": {
        "name": "LicenseInformation"
      },
      "type": "object"
    },
    "LicenseInformationAmount": {
      "properties": {
        "Total": {
          "description": "Total (-1 = unlimited)",
          "type": "integer",
          "format": "int32"
        },
        "Used": {
          "description": "Used",
          "type": "integer",
          "format": "int32"
        }
      },
      "xml": {
        "name": "LicenseInformationAmount"
      },
      "type": "object"
    },
    "ReplaceRecipientData": {
      "description": "Describes the new recipient",
      "properties": {
        "Recipient": {
          "$ref": "#/definitions/SendEnvelopeRecipient",
          "description": "New information for the recipient which is replaced"
        },
        "WorkstepConfiguration": {
          "$ref": "#/definitions/WorkstepConfiguration",
          "description": "Optional, new workstep configuration for the recipient which is replaced\r\nOnly supported for <code>RecipientType</code> Signer and Pkcs7Signer."
        }
      },
      "xml": {
        "name": "ReplaceRecipientData"
      },
      "type": "object"
    },
    "UploadSspFileResult": {
      "description": "A result after uploading the file.",
      "properties": {
        "SspFileId": {
          "description": "The Id of the file. A <code>GUID</code> converted to a string.",
          "type": "string"
        }
      },
      "xml": {
        "name": "UploadSspFileResult"
      },
      "type": "object"
    },
    "Teams": {
      "description": "A List of Teams.",
      "properties": {
        "TeamList": {
          "description": "The Teams list.",
          "items": {
            "$ref": "#/definitions/Team"
          },
          "xml": {
            "name": "Team",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "Teams"
      },
      "type": "object"
    },
    "Team": {
      "description": "A representation of a team in eSignAnyWhere.",
      "properties": {
        "Name": {
          "description": "The name of the team.",
          "type": "string"
        },
        "AllowEnvelopeSharingWithinTeam": {
          "description": "Indicates if envelopes are shared among members of this team.",
          "type": "boolean",
          "default": false
        },
        "AllowTemplateSharingWithinTeam": {
          "description": "Indicates if templates are shared among members of this team.",
          "type": "boolean",
          "default": false
        },
        "Head": {
          "$ref": "#/definitions/TeamMember",
          "description": "The team leader."
        }
      },
      "xml": {
        "name": "Team"
      },
      "type": "object"
    },
    "TeamMember": {
      "description": "Representation of s team member.",
      "properties": {
        "Email": {
          "description": "The email of the team member.",
          "type": "string"
        },
        "Members": {
          "description": "The team members which are one hiarchy step deeper.",
          "items": {
            "$ref": "#/definitions/TeamMember"
          },
          "xml": {
            "name": "TeamMember",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "TeamMember"
      },
      "type": "object"
    },
    "UserCreateModel": {
      "properties": {
        "UserDescription": {
          "$ref": "#/definitions/UserDescription",
          "description": "The user which should be created."
        },
        "UserActivationDescriptor": {
          "$ref": "#/definitions/UserActivationDescriptor",
          "description": "Information about the user activation after the user creation."
        }
      },
      "xml": {
        "name": "UserCreateModel"
      },
      "type": "object"
    },
    "UserDescription": {
      "properties": {
        "Email": {
          "description": "The email address of the User.",
          "type": "string"
        },
        "FirstName": {
          "description": "The first name of the user.",
          "type": "string"
        },
        "LastName": {
          "description": "The last name of the user.",
          "type": "string"
        },
        "UserName": {
          "description": "username of the user (used for usersynchronisation and alternative logins)",
          "type": "string"
        },
        "Sid": {
          "description": "sid of the user (used for usersynchronisation and alternative logins)",
          "type": "string"
        },
        "JobTitle": {
          "description": "The job title of the user.",
          "type": "string"
        },
        "PhoneNumber": {
          "description": "The phone number of the user.",
          "type": "string"
        },
        "Role": {
          "description": "The role of the user, which defines its permissions.",
          "type": "string",
          "enum": [
            "None",
            "PowerUser",
            "RegisteredSigner"
          ],
          "x-ms-enum": {}
        },
        "IsUserManager": {
          "description": "Defines if the user can manage other users (add/delete/modify).",
          "type": "boolean"
        },
        "DefaultSubject": {
          "type": "string"
        },
        "DefaultMessage": {
          "type": "string"
        },
        "NotifyRecipientOnActionNeeded": {
          "description": "Defines if the user gets an email notification every time if his actions are needed for an envelope.",
          "type": "boolean"
        },
        "NotifySenderCompleteEnvelope": {
          "description": "Defines if the user gets an email notification when a dedicated envelope is finished.",
          "type": "boolean"
        },
        "NotifySenderDeclined": {
          "description": "Defines if the user gets an email notification when a recipient rejected an envelope.",
          "type": "boolean"
        },
        "NotifySenderDeliveryFailed": {
          "description": "Sends an email to the user when the delivery of the envelope failed.",
          "type": "boolean"
        },
        "NotifySenderViewed": {
          "description": "Sends an email when a recipient viewed an envelope of the user.",
          "type": "boolean"
        },
        "SignatureImage": {
          "description": "Base64 encoded byte array.",
          "type": "string",
          "format": "byte"
        },
        "Authentications": {
          "items": {
            "$ref": "#/definitions/UserAuthentication"
          },
          "xml": {
            "name": "UserAuthentication",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "UserDescription"
      },
      "type": "object"
    },
    "UserActivationDescriptor": {
      "properties": {
        "SendInvitationMail": {
          "description": "A email should be sent after the user creation.",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "UserActivationDescriptor"
      },
      "type": "object"
    },
    "UserAuthentication": {
      "description": "Abstract class, use the derived classes:\r\n- UserAuthenticationSaml\r\n            \r\nFor usage see sample code.",
      "properties": {
        "DiscriminatorType": {
          "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
          "type": "string"
        }
      },
      "xml": {
        "name": "UserAuthentication"
      },
      "type": "object"
    },
    "CreateUserResult": {
      "properties": {
        "CreatedUserIds": {
          "items": {
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string",
            "format": "uuid"
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "CreateUserResult"
      },
      "type": "object"
    },
    "UserUpdateDescription": {
      "description": "This object is used for updating an existing user. \r\nProperties, which are not set will not change the existing value.",
      "properties": {
        "Email": {
          "description": "The email address of the User.",
          "type": "string"
        },
        "FirstName": {
          "description": "The first name of the user.",
          "type": "string"
        },
        "LastName": {
          "description": "The last name of the user.",
          "type": "string"
        },
        "UserName": {
          "description": "username of the user (used for usersynchronisation and alternative logins)",
          "type": "string"
        },
        "Sid": {
          "description": "sid of the user (used for usersynchronisation and alternative logins)",
          "type": "string"
        },
        "JobTitle": {
          "description": "The job title of the user.",
          "type": "string"
        },
        "PhoneNumber": {
          "description": "The phone number of the user.",
          "type": "string"
        },
        "Role": {
          "description": "The role of the user, which defines its permissions.",
          "type": "string",
          "enum": [
            "None",
            "PowerUser",
            "RegisteredSigner"
          ],
          "x-ms-enum": {}
        },
        "IsUserManager": {
          "description": "Defines if the user can manage other users (add/delete/modify).",
          "type": "boolean"
        },
        "IsEnabled": {
          "description": "Defines if the user is enabled.",
          "type": "boolean"
        },
        "DefaultSubject": {
          "description": "Defines the default subject used for sending envelopes",
          "type": "string"
        },
        "DefaultMessage": {
          "description": "Defines the default message used for sending envelopes",
          "type": "string"
        },
        "NotifyRecipientOnActionNeeded": {
          "description": "Defines if the user gets an email notification every time if his actions are needed for an envelope.",
          "type": "boolean"
        },
        "NotifySenderCompleteEnvelope": {
          "description": "Defines if the user gets an email notification when a dedicated envelope is finished.",
          "type": "boolean"
        },
        "NotifySenderDeclined": {
          "description": "Defines if the user gets an email notification when a recipient rejected an envelope.",
          "type": "boolean"
        },
        "NotifySenderDeliveryFailed": {
          "description": "Sends an email to the user when the delivery of the envelope failed.",
          "type": "boolean"
        },
        "NotifySenderViewed": {
          "description": "Sends an email when a recipient viewed an envelope of the user.",
          "type": "boolean"
        },
        "AutomatedDelegationSettings": {
          "$ref": "#/definitions/AutomatedDelegationSettings",
          "description": "Automated delegation settings."
        },
        "SignatureImage": {
          "type": "string",
          "format": "byte"
        },
        "Authentications": {
          "items": {
            "$ref": "#/definitions/UserAuthentication"
          },
          "xml": {
            "name": "UserAuthentication",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "UserUpdateDescription"
      },
      "type": "object"
    },
    "AutomatedDelegationSettings": {
      "description": "Automated delegation settings.",
      "properties": {
        "Reason": {
          "description": "Reason for automated delagation.",
          "type": "string"
        },
        "EndDate": {
          "description": "Endtime of automated delegation.",
          "type": "string"
        },
        "DelegateeUserId": {
          "description": "Delegatee user id.",
          "type": "string"
        },
        "UtilizeAlsoOnCopyRecipients": {
          "description": "If cc recipient should be delgated.",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "AutomatedDelegationSettings"
      },
      "type": "object"
    },
    "DeleteUserReassignDescriptor": {
      "description": "Defines the reassignments after the deletion of a user.",
      "properties": {
        "UserId": {
          "description": "The id of the user which receives the assignments.",
          "type": "string"
        },
        "ReassignDrafts": {
          "description": "Reassigns drafts if true.",
          "type": "boolean"
        },
        "ReassignTemplates": {
          "description": "Reassigns templates if true.",
          "type": "boolean"
        },
        "ReassignClipboard": {
          "description": "Reassigns clipboard items if true.",
          "type": "boolean"
        },
        "ReassignAddressBook": {
          "description": "Reassigns address book entries if true.",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "DeleteUserReassignDescriptor"
      },
      "type": "object"
    },
    "FindUsersDescriptor": {
      "description": "Descriptor to filter users.",
      "properties": {
        "Role": {
          "description": "If set, filters by user role.",
          "type": "string",
          "enum": [
            "None",
            "PowerUser",
            "RegisteredSigner"
          ],
          "x-ms-enum": {}
        },
        "IsUserManager": {
          "description": "If set, filters if the user manager flag is set.",
          "type": "boolean"
        },
        "IsAutomatedDelegatedUser": {
          "description": "User call to find automated deligated users.",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "FindUsersDescriptor"
      },
      "type": "object"
    },
    "ExtendedFindUsersResult": {
      "properties": {
        "Entries": {
          "items": {
            "$ref": "#/definitions/ExtendedFindUsersResultEntry"
          },
          "xml": {
            "name": "ExtendedFindUsersResultEntry",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "ExtendedFindUsersResult"
      },
      "type": "object"
    },
    "ExtendedFindUsersResultEntry": {
      "properties": {
        "Id": {
          "description": "The id of the User.",
          "type": "string"
        },
        "Email": {
          "description": "The email address of the User.",
          "type": "string"
        },
        "FirstName": {
          "description": "The first name of the user.",
          "type": "string"
        },
        "LastName": {
          "description": "The last name of the user.",
          "type": "string"
        },
        "UserName": {
          "description": "username of the user (used for usersynchronisation and alternative logins)",
          "type": "string"
        },
        "Sid": {
          "description": "sid of the user (used for usersynchronisation and alternative logins)",
          "type": "string"
        },
        "Role": {
          "description": "The role of the user, which defines its permissions.",
          "type": "string",
          "enum": [
            "None",
            "PowerUser",
            "RegisteredSigner"
          ],
          "x-ms-enum": {}
        },
        "IsUserManager": {
          "description": "Defines if the user can manage other users (add/delete/modify).",
          "type": "boolean"
        },
        "IsEnabled": {
          "description": "Defines if the user is enabled and allowed to use the system.",
          "type": "boolean"
        },
        "Authentications": {
          "items": {
            "$ref": "#/definitions/UserAuthentication"
          },
          "xml": {
            "name": "UserAuthentication",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "ExtendedFindUsersResultEntry"
      },
      "type": "object"
    },
    "FlowApiResult": {
      "properties": {
        "Success": {
          "type": "boolean"
        },
        "Version": {
          "type": "string"
        }
      },
      "xml": {
        "name": "FlowApiResult"
      },
      "type": "object"
    },
    "Agreements": {
      "description": "Agreements task.",
      "allOf": [
        {
          "$ref": "#/definitions/WorkstepTask"
        },
        {
          "properties": {
            "Texts": {
              "description": "Collection of configured texts.",
              "items": {
                "$ref": "#/definitions/Text"
              },
              "xml": {
                "name": "Text",
                "wrapped": true
              },
              "type": "array"
            },
            "Headings": {
              "description": "Collection of configured headings.",
              "items": {
                "$ref": "#/definitions/Text"
              },
              "xml": {
                "name": "Text",
                "wrapped": true
              },
              "type": "array"
            },
            "IsRequired": {
              "description": "Define if the task is required.",
              "type": "boolean",
              "default": false
            },
            "Id": {
              "description": "Define the identifier for the task.",
              "type": "string"
            },
            "DisplayName": {
              "description": "Define the name to be displayed.",
              "type": "string"
            },
            "DocRefNumber": {
              "description": "Document number of the task.",
              "type": "integer",
              "format": "int32"
            },
            "AdditionalInformation": {
              "description": "Additional information for the client",
              "type": "string"
            },
            "BatchId": {
              "description": "Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "Agreements"
      },
      "type": "object"
    },
    "AppendPages": {
      "description": "AppendPages task.",
      "allOf": [
        {
          "$ref": "#/definitions/WorkstepTask"
        },
        {
          "properties": {
            "IsRequired": {
              "description": "Define if the task is required.",
              "type": "boolean",
              "default": false
            },
            "Id": {
              "description": "Define the identifier for the task.",
              "type": "string"
            },
            "DisplayName": {
              "description": "Define the name to be displayed.",
              "type": "string"
            },
            "DocRefNumber": {
              "description": "Document number of the task.",
              "type": "integer",
              "format": "int32"
            },
            "AdditionalInformation": {
              "description": "Additional information for the client",
              "type": "string"
            },
            "BatchId": {
              "description": "Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AppendPages"
      },
      "type": "object"
    },
    "Attachment": {
      "description": "Attachment task.",
      "allOf": [
        {
          "$ref": "#/definitions/WorkstepTask"
        },
        {
          "properties": {
            "PositionPage": {
              "description": "Page number for the attachment.",
              "type": "integer",
              "format": "int32"
            },
            "Position": {
              "$ref": "#/definitions/Position",
              "description": "Exact position for the attachment."
            },
            "Size": {
              "$ref": "#/definitions/Size",
              "description": "Width and Height of the object."
            },
            "IconName": {
              "description": "The name of the adobe default icon to be displayed. Values that should be displayed by most viewers are: 'Graph', 'PushPin', 'Paperclip' and 'Tag'. Others may be implemented by the pdf viewer. Default value: 'Paperclip' if no iconName or appearance image is given.",
              "type": "string"
            },
            "AppearanceImageDocumentId": {
              "description": "The document id of the image used for the appearance. If set this appearance overwrites the icon.",
              "type": "string"
            },
            "FileName": {
              "description": "A hint for the client to name the attachment, but the name has to be set by the client.",
              "readOnly": true,
              "type": "string"
            },
            "IsRequired": {
              "description": "Define if the task is required.",
              "type": "boolean",
              "default": false
            },
            "Id": {
              "description": "Define the identifier for the task.",
              "type": "string"
            },
            "DisplayName": {
              "description": "Define the name to be displayed.",
              "type": "string"
            },
            "DocRefNumber": {
              "description": "Document number of the task.",
              "type": "integer",
              "format": "int32"
            },
            "AdditionalInformation": {
              "description": "Additional information for the client",
              "type": "string"
            },
            "BatchId": {
              "description": "Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "Attachment"
      },
      "type": "object"
    },
    "Position": {
      "description": "Positioning of elements.",
      "properties": {
        "PositionX": {
          "description": "X position of the element.",
          "type": "number",
          "format": "double"
        },
        "PositionY": {
          "description": "Y position of the element.",
          "type": "number",
          "format": "double"
        }
      },
      "xml": {
        "name": "Position"
      },
      "type": "object"
    },
    "FormGroup": {
      "description": "Information about a forms group in this workstep.",
      "allOf": [
        {
          "$ref": "#/definitions/WorkstepTask"
        },
        {
          "properties": {
            "Forms": {
              "description": "Lists all the form elements which are part of this group.",
              "items": {
                "$ref": "#/definitions/Form"
              },
              "xml": {
                "name": "Form",
                "wrapped": true
              },
              "type": "array"
            },
            "IsRequired": {
              "description": "Define if the task is required.",
              "type": "boolean",
              "default": false
            },
            "Id": {
              "description": "Define the identifier for the task.",
              "type": "string"
            },
            "DisplayName": {
              "description": "Define the name to be displayed.",
              "type": "string"
            },
            "DocRefNumber": {
              "description": "Document number of the task.",
              "type": "integer",
              "format": "int32"
            },
            "AdditionalInformation": {
              "description": "Additional information for the client",
              "type": "string"
            },
            "BatchId": {
              "description": "Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "FormGroup"
      },
      "type": "object"
    },
    "Form": {
      "description": "Abstract class, use the derived classes:\r\n- BoxItem\r\n- CheckBox\r\n- ComboBox\r\n- ListBox\r\n- RadioButton\r\n- TextBox\r\n            \r\nFor usage see sample code.\r\n\r\nBase class Form of a FormGroup.",
      "required": [
        "DiscriminatorType"
      ],
      "properties": {
        "Id": {
          "description": "Identifier for the form.",
          "type": "string"
        },
        "PositionPage": {
          "description": "Page number for the form.",
          "type": "integer",
          "format": "int32",
          "default": 1
        },
        "DocRefNumber": {
          "description": "Document number for the form.",
          "type": "integer",
          "format": "int32"
        },
        "Position": {
          "$ref": "#/definitions/Position",
          "description": "Exact position of the form."
        },
        "Size": {
          "$ref": "#/definitions/Size",
          "description": "Width and Height of the object."
        },
        "IsHidden": {
          "description": "Define if it is hidden.",
          "type": "boolean",
          "default": false
        },
        "ExportValue": {
          "description": "The export value of the form field.",
          "type": "string"
        },
        "Description": {
          "description": "Description to provide details about the element.",
          "type": "string"
        },
        "KeepExistingValue": {
          "description": "If true, form value from Pdf is used.",
          "type": "boolean"
        },
        "CustomOrder": {
          "description": "Increasing order number. Can be used for tabbing through the form elements.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "DiscriminatorType": {
          "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
          "type": "string"
        }
      },
      "discriminator": "DiscriminatorType",
      "xml": {
        "name": "Form"
      },
      "type": "object"
    },
    "PictureAnnotationConfiguration": {
      "description": "Picture annotation tasks configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/WorkstepTask"
        },
        {
          "properties": {
            "ColorDepth": {
              "type": "string",
              "default": "Color16M",
              "enum": [
                "Color16M",
                "Grayscale256"
              ],
              "x-ms-enum": {}
            },
            "PageNumber": {
              "description": "The page number this element is on.",
              "type": "integer",
              "format": "int32"
            },
            "MinResolution": {
              "description": "Minimum resolution of the picture based on the target size. Default -1, means no min resolution.",
              "type": "integer",
              "format": "int32",
              "default": -1
            },
            "MaxResolution": {
              "description": "Maximum resolution of the picture based on the target size. Default -1, mans no max resolution.",
              "type": "integer",
              "format": "int32",
              "default": -1
            },
            "Name": {
              "description": "Defines the name that is used for the attachment.",
              "type": "string"
            },
            "Position": {
              "$ref": "#/definitions/Position",
              "description": "Exact position of this element."
            },
            "Size": {
              "$ref": "#/definitions/Size",
              "description": "Width and height of the element."
            },
            "AddAsAttachment": {
              "description": "Define if the picture should be added as attachment to the document as well.",
              "type": "boolean",
              "default": false
            },
            "IsRequired": {
              "description": "Define if the task is required.",
              "type": "boolean",
              "default": false
            },
            "Id": {
              "description": "Define the identifier for the task.",
              "type": "string"
            },
            "DisplayName": {
              "description": "Define the name to be displayed.",
              "type": "string"
            },
            "DocRefNumber": {
              "description": "Document number of the task.",
              "type": "integer",
              "format": "int32"
            },
            "AdditionalInformation": {
              "description": "Additional information for the client",
              "type": "string"
            },
            "BatchId": {
              "description": "Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "PictureAnnotationConfiguration"
      },
      "type": "object"
    },
    "ReadingTask": {
      "description": "Reading task.",
      "allOf": [
        {
          "$ref": "#/definitions/WorkstepTask"
        },
        {
          "properties": {
            "PositionPage": {
              "description": "Page number that has to be read.",
              "type": "integer",
              "format": "int32"
            },
            "AllPages": {
              "description": "Defines if all pages in the document have to be read.",
              "type": "boolean"
            },
            "AllDocuments": {
              "description": "Defines if all documents have to be read.",
              "type": "boolean"
            },
            "Position": {
              "$ref": "#/definitions/Position",
              "description": "Defines the exact position that has to be read."
            },
            "Size": {
              "$ref": "#/definitions/Size",
              "description": "Defines the width and height of the element that has to be read."
            },
            "IsRequired": {
              "description": "Define if the task is required.",
              "type": "boolean",
              "default": false
            },
            "Id": {
              "description": "Define the identifier for the task.",
              "type": "string"
            },
            "DisplayName": {
              "description": "Define the name to be displayed.",
              "type": "string"
            },
            "DocRefNumber": {
              "description": "Document number of the task.",
              "type": "integer",
              "format": "int32"
            },
            "AdditionalInformation": {
              "description": "Additional information for the client",
              "type": "string"
            },
            "BatchId": {
              "description": "Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "ReadingTask"
      },
      "type": "object"
    },
    "SignPkcs7": {
      "allOf": [
        {
          "$ref": "#/definitions/WorkstepTask"
        },
        {
          "properties": {
            "TargetDocuments": {
              "description": "Target documents. If TargetDocuments list is empty, all documents are targeted.",
              "items": {
                "$ref": "#/definitions/TargetDocument"
              },
              "xml": {
                "name": "TargetDocument",
                "wrapped": true
              },
              "type": "array"
            },
            "IsRequired": {
              "description": "Define if the task is required.",
              "type": "boolean",
              "default": false
            },
            "Id": {
              "description": "Define the identifier for the task.",
              "type": "string"
            },
            "DisplayName": {
              "description": "Define the name to be displayed.",
              "type": "string"
            },
            "DocRefNumber": {
              "description": "Document number of the task.",
              "type": "integer",
              "format": "int32"
            },
            "AdditionalInformation": {
              "description": "Additional information for the client",
              "type": "string"
            },
            "BatchId": {
              "description": "Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "SignPkcs7"
      },
      "type": "object"
    },
    "TargetDocument": {
      "properties": {
        "DocRefNumber": {
          "description": "Document number.",
          "type": "integer",
          "format": "int32"
        },
        "IsCompleted": {
          "description": "Define if it is completed.",
          "readOnly": true,
          "type": "boolean"
        }
      },
      "xml": {
        "name": "TargetDocument"
      },
      "type": "object"
    },
    "Signature": {
      "description": "Signature task.",
      "allOf": [
        {
          "$ref": "#/definitions/WorkstepTask"
        },
        {
          "properties": {
            "PositionPage": {
              "description": "Page number of the signature.",
              "type": "integer",
              "format": "int32"
            },
            "Position": {
              "$ref": "#/definitions/Position",
              "description": "Exact position of the signature."
            },
            "Size": {
              "$ref": "#/definitions/Size",
              "description": "Width and height of the signature."
            },
            "AdditionalParameters": {
              "description": "Collection of additional parameters, as KeyValue pair.",
              "items": {
                "$ref": "#/definitions/KeyValuePair"
              },
              "xml": {
                "name": "KeyValuePair",
                "wrapped": true
              },
              "type": "array"
            },
            "AllowedSignatureTypes": {
              "description": "Collection of allowed SigTypes.",
              "items": {
                "$ref": "#/definitions/SigType"
              },
              "xml": {
                "name": "SigType",
                "wrapped": true
              },
              "type": "array"
            },
            "AdditionalClientInformation": {
              "description": "Additional client information.",
              "type": "string"
            },
            "Pattern": {
              "description": "Pattern found from SigString parsing.",
              "type": "string"
            },
            "UseTimestamp": {
              "description": "Use timestamp",
              "type": "boolean",
              "default": false
            },
            "IsRequired": {
              "description": "Define if the task is required.",
              "type": "boolean",
              "default": false
            },
            "Id": {
              "description": "Define the identifier for the task.",
              "type": "string"
            },
            "DisplayName": {
              "description": "Define the name to be displayed.",
              "type": "string"
            },
            "DocRefNumber": {
              "description": "Document number of the task.",
              "type": "integer",
              "format": "int32"
            },
            "AdditionalInformation": {
              "description": "Additional information for the client",
              "type": "string"
            },
            "BatchId": {
              "description": "Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "Signature"
      },
      "type": "object"
    },
    "TypewriterAnnotation": {
      "description": "TypeWriterAnnotation task. Information about predefined typewriter annotation.",
      "allOf": [
        {
          "$ref": "#/definitions/WorkstepTask"
        },
        {
          "properties": {
            "PageNumber": {
              "description": "The page number the annotation is on.",
              "type": "integer",
              "format": "int32"
            },
            "TextAlign": {
              "description": "The typewriter annotation text alignment.",
              "type": "string",
              "default": "Left",
              "enum": [
                "Left",
                "Right",
                "Center"
              ],
              "x-ms-enum": {}
            },
            "Position": {
              "$ref": "#/definitions/Position",
              "description": "The position of the predefined text annotation in lower left points."
            },
            "DefaultText": {
              "description": "Default text shown by the client.",
              "type": "string"
            },
            "TextFormat": {
              "description": "The format of the text. For example if the text should be a date, the date format can be specified. The client can than format the text accordingly.",
              "type": "string"
            },
            "DefaultTextType": {
              "description": "The type of the predefined text annotation. If the client is familiar with the type it can display predefined values.",
              "type": "string"
            },
            "FontSettings": {
              "$ref": "#/definitions/FontSettings",
              "description": "FontSetting to be used."
            },
            "IsEditablePosition": {
              "description": "Defines if the position can be edited by the client.",
              "type": "boolean",
              "default": false
            },
            "IsEditableDefaultText": {
              "description": "Specifies if the text can be changed by the user, or if it should be autofilled by the client without user interaction.",
              "type": "boolean",
              "default": false
            },
            "IsEditableFontSettings": {
              "description": "Defines if the 'fontSettings' can be edited by the client.",
              "type": "boolean",
              "default": false
            },
            "IsRequired": {
              "description": "Define if the task is required.",
              "type": "boolean",
              "default": false
            },
            "Id": {
              "description": "Define the identifier for the task.",
              "type": "string"
            },
            "DisplayName": {
              "description": "Define the name to be displayed.",
              "type": "string"
            },
            "DocRefNumber": {
              "description": "Document number of the task.",
              "type": "integer",
              "format": "int32"
            },
            "AdditionalInformation": {
              "description": "Additional information for the client",
              "type": "string"
            },
            "BatchId": {
              "description": "Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "TypewriterAnnotation"
      },
      "type": "object"
    },
    "FontSettings": {
      "description": "Configure fontsettings.",
      "properties": {
        "Id": {
          "description": "Identification for the font.",
          "type": "string"
        },
        "TextColor": {
          "$ref": "#/definitions/TextColor",
          "description": "Choose the color for the text."
        },
        "Name": {
          "description": "Naming of the font.",
          "type": "string"
        },
        "Size": {
          "description": "Define the size.",
          "type": "number",
          "format": "double"
        },
        "IsBold": {
          "description": "Define if the font-style should be bold.",
          "type": "boolean"
        },
        "IsItalic": {
          "description": "Define if the font-style should be italic.",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "FontSettings"
      },
      "type": "object"
    },
    "TextColor": {
      "description": "Color of an text element.",
      "properties": {
        "A": {
          "description": "Defines A value of the color.",
          "type": "integer",
          "format": "int32"
        },
        "R": {
          "description": "Defines R value of the color.",
          "type": "integer",
          "format": "int32"
        },
        "G": {
          "description": "Defines G value of the color.",
          "type": "integer",
          "format": "int32"
        },
        "B": {
          "description": "Defines B value of the color.",
          "type": "integer",
          "format": "int32"
        }
      },
      "xml": {
        "name": "TextColor"
      },
      "type": "object"
    },
    "CheckBox": {
      "description": "CheckBox form.",
      "allOf": [
        {
          "$ref": "#/definitions/Form"
        },
        {
          "properties": {
            "IsReadonly": {
              "description": "Defines if the checkbox is readonly.",
              "type": "boolean",
              "default": false
            },
            "IsRequired": {
              "description": "Defines if the checkbox is required,",
              "type": "boolean",
              "default": false
            },
            "IsChecked": {
              "description": "Defines if the checkbos is checked.",
              "type": "boolean",
              "default": false
            },
            "RequiredEvalPolicy": {
              "description": "Defines the policy if the checkbox is required.",
              "type": "string",
              "default": "IsChecked",
              "enum": [
                "None",
                "IsChecked"
              ],
              "x-ms-enum": {}
            },
            "Id": {
              "description": "Identifier for the form.",
              "type": "string"
            },
            "PositionPage": {
              "description": "Page number for the form.",
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "DocRefNumber": {
              "description": "Document number for the form.",
              "type": "integer",
              "format": "int32"
            },
            "Position": {
              "$ref": "#/definitions/Position",
              "description": "Exact position of the form."
            },
            "Size": {
              "$ref": "#/definitions/Size",
              "description": "Width and Height of the object."
            },
            "IsHidden": {
              "description": "Define if it is hidden.",
              "type": "boolean",
              "default": false
            },
            "ExportValue": {
              "description": "The export value of the form field.",
              "type": "string"
            },
            "Description": {
              "description": "Description to provide details about the element.",
              "type": "string"
            },
            "KeepExistingValue": {
              "description": "If true, form value from Pdf is used.",
              "type": "boolean"
            },
            "CustomOrder": {
              "description": "Increasing order number. Can be used for tabbing through the form elements.",
              "readOnly": true,
              "type": "integer",
              "format": "int32"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "CheckBox"
      },
      "type": "object"
    },
    "ComboBox": {
      "description": "ComboBox form.",
      "allOf": [
        {
          "$ref": "#/definitions/Form"
        },
        {
          "properties": {
            "IsReadonly": {
              "description": "Defines if the combobox is readonly.",
              "type": "boolean",
              "default": false
            },
            "IsRequired": {
              "description": "Defines if the combobox is required.",
              "type": "boolean",
              "default": false
            },
            "IsEditable": {
              "description": "Defines if the combobox is editable.",
              "type": "boolean",
              "default": false
            },
            "Value": {
              "description": "Value of the combobox.",
              "type": "string"
            },
            "Items": {
              "description": "Collection of items in the combobox.",
              "items": {
                "$ref": "#/definitions/BoxItem"
              },
              "xml": {
                "name": "BoxItem",
                "wrapped": true
              },
              "type": "array"
            },
            "FontSettings": {
              "$ref": "#/definitions/FontSettingsAdvanced",
              "description": "Configure FontSettings for this combobox."
            },
            "Id": {
              "description": "Identifier for the form.",
              "type": "string"
            },
            "PositionPage": {
              "description": "Page number for the form.",
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "DocRefNumber": {
              "description": "Document number for the form.",
              "type": "integer",
              "format": "int32"
            },
            "Position": {
              "$ref": "#/definitions/Position",
              "description": "Exact position of the form."
            },
            "Size": {
              "$ref": "#/definitions/Size",
              "description": "Width and Height of the object."
            },
            "IsHidden": {
              "description": "Define if it is hidden.",
              "type": "boolean",
              "default": false
            },
            "ExportValue": {
              "description": "The export value of the form field.",
              "type": "string"
            },
            "Description": {
              "description": "Description to provide details about the element.",
              "type": "string"
            },
            "KeepExistingValue": {
              "description": "If true, form value from Pdf is used.",
              "type": "boolean"
            },
            "CustomOrder": {
              "description": "Increasing order number. Can be used for tabbing through the form elements.",
              "readOnly": true,
              "type": "integer",
              "format": "int32"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "ComboBox"
      },
      "type": "object"
    },
    "BoxItem": {
      "description": "Item in a form list.",
      "properties": {
        "Key": {
          "description": "Key of the item.",
          "type": "string"
        },
        "Value": {
          "description": "Value of the item.",
          "type": "string"
        },
        "IsSelected": {
          "description": "Defines if the item is selected.",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "BoxItem"
      },
      "type": "object"
    },
    "FontSettingsAdvanced": {
      "description": "Configure fontsettings for some formfields.",
      "properties": {
        "FontFamily": {
          "description": "Defines the font-family.",
          "type": "string"
        },
        "TextAlign": {
          "description": "Alignment of the text.",
          "type": "string",
          "enum": [
            "Left",
            "Right",
            "Center"
          ],
          "x-ms-enum": {}
        },
        "TextColor": {
          "$ref": "#/definitions/TextColor",
          "description": "Choose the color for the text."
        },
        "Name": {
          "description": "Naming of the font.",
          "type": "string"
        },
        "Size": {
          "description": "Define the size.",
          "type": "number",
          "format": "double"
        },
        "IsBold": {
          "description": "Define if the font-style should be bold.",
          "type": "boolean"
        },
        "IsItalic": {
          "description": "Define if the font-style should be italic.",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "FontSettingsAdvanced"
      },
      "type": "object"
    },
    "ListBox": {
      "description": "ListBox form.",
      "allOf": [
        {
          "$ref": "#/definitions/Form"
        },
        {
          "properties": {
            "Items": {
              "description": "Collection of items in the listbox.",
              "items": {
                "$ref": "#/definitions/BoxItem"
              },
              "xml": {
                "name": "BoxItem",
                "wrapped": true
              },
              "type": "array"
            },
            "FontSettings": {
              "$ref": "#/definitions/FontSettingsAdvanced",
              "description": "Configure FontSettings for this listbox."
            },
            "IsRequired": {
              "description": "Defines if the checkbox is required,",
              "type": "boolean",
              "default": false
            },
            "Id": {
              "description": "Identifier for the form.",
              "type": "string"
            },
            "PositionPage": {
              "description": "Page number for the form.",
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "DocRefNumber": {
              "description": "Document number for the form.",
              "type": "integer",
              "format": "int32"
            },
            "Position": {
              "$ref": "#/definitions/Position",
              "description": "Exact position of the form."
            },
            "Size": {
              "$ref": "#/definitions/Size",
              "description": "Width and Height of the object."
            },
            "IsHidden": {
              "description": "Define if it is hidden.",
              "type": "boolean",
              "default": false
            },
            "ExportValue": {
              "description": "The export value of the form field.",
              "type": "string"
            },
            "Description": {
              "description": "Description to provide details about the element.",
              "type": "string"
            },
            "KeepExistingValue": {
              "description": "If true, form value from Pdf is used.",
              "type": "boolean"
            },
            "CustomOrder": {
              "description": "Increasing order number. Can be used for tabbing through the form elements.",
              "readOnly": true,
              "type": "integer",
              "format": "int32"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "ListBox"
      },
      "type": "object"
    },
    "RadioButton": {
      "description": "RadioButton form.",
      "allOf": [
        {
          "$ref": "#/definitions/Form"
        },
        {
          "properties": {
            "Value": {
              "description": "Value of the radiobutton.",
              "type": "string"
            },
            "RadioButtonGroupId": {
              "description": "Configure if the radiobutton group identifier.",
              "type": "string"
            },
            "IsRequired": {
              "description": "Defines if the checkbox is required,",
              "type": "boolean",
              "default": false
            },
            "Id": {
              "description": "Identifier for the form.",
              "type": "string"
            },
            "PositionPage": {
              "description": "Page number for the form.",
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "DocRefNumber": {
              "description": "Document number for the form.",
              "type": "integer",
              "format": "int32"
            },
            "Position": {
              "$ref": "#/definitions/Position",
              "description": "Exact position of the form."
            },
            "Size": {
              "$ref": "#/definitions/Size",
              "description": "Width and Height of the object."
            },
            "IsHidden": {
              "description": "Define if it is hidden.",
              "type": "boolean",
              "default": false
            },
            "ExportValue": {
              "description": "The export value of the form field.",
              "type": "string"
            },
            "Description": {
              "description": "Description to provide details about the element.",
              "type": "string"
            },
            "KeepExistingValue": {
              "description": "If true, form value from Pdf is used.",
              "type": "boolean"
            },
            "CustomOrder": {
              "description": "Increasing order number. Can be used for tabbing through the form elements.",
              "readOnly": true,
              "type": "integer",
              "format": "int32"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "RadioButton"
      },
      "type": "object"
    },
    "TextBox": {
      "description": "TextBox form.",
      "allOf": [
        {
          "$ref": "#/definitions/Form"
        },
        {
          "properties": {
            "IsScrollAllowed": {
              "description": "Define if scrolling is allowed.",
              "type": "boolean",
              "default": false
            },
            "IsComb": {
              "description": "Define if the field is automatically divided into as many equally spaced positions, or combs, as the value of 'MaxLength', and the text is laid out into those combs.",
              "type": "boolean",
              "default": false
            },
            "Value": {
              "description": "Value of the textbox.",
              "type": "string"
            },
            "MaxLength": {
              "description": "The maximum of characters in the textBox. -1 means it is not limited.",
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "IsMultiLine": {
              "description": "Define if the textbox is multiline.",
              "type": "boolean",
              "default": false
            },
            "IsPassword": {
              "description": "Define if the textbox is a password.",
              "type": "boolean",
              "default": false
            },
            "IsFileSelect": {
              "description": "Define if it is a file selection.",
              "type": "boolean",
              "default": false
            },
            "FontSettings": {
              "$ref": "#/definitions/FontSettingsAdvanced",
              "description": "Configure FontSettings for this textbox."
            },
            "FormFieldValidation": {
              "$ref": "#/definitions/FormFieldValidation",
              "description": "Configure FormFieldValidation for this textbox."
            },
            "IsRequired": {
              "description": "Defines if the checkbox is required,",
              "type": "boolean",
              "default": false
            },
            "Id": {
              "description": "Identifier for the form.",
              "type": "string"
            },
            "PositionPage": {
              "description": "Page number for the form.",
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "DocRefNumber": {
              "description": "Document number for the form.",
              "type": "integer",
              "format": "int32"
            },
            "Position": {
              "$ref": "#/definitions/Position",
              "description": "Exact position of the form."
            },
            "Size": {
              "$ref": "#/definitions/Size",
              "description": "Width and Height of the object."
            },
            "IsHidden": {
              "description": "Define if it is hidden.",
              "type": "boolean",
              "default": false
            },
            "ExportValue": {
              "description": "The export value of the form field.",
              "type": "string"
            },
            "Description": {
              "description": "Description to provide details about the element.",
              "type": "string"
            },
            "KeepExistingValue": {
              "description": "If true, form value from Pdf is used.",
              "type": "boolean"
            },
            "CustomOrder": {
              "description": "Increasing order number. Can be used for tabbing through the form elements.",
              "readOnly": true,
              "type": "integer",
              "format": "int32"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "TextBox"
      },
      "type": "object"
    },
    "FormFieldValidation": {
      "description": "Abstract class, use the derived classes:\r\n- FormFieldValidationDate\r\n- FormFieldValidationEmail\r\n- FormFieldValidationNumber\r\n- FormFieldValidationPhone\r\n- FormFieldValidationTime\r\n            \r\nFor usage see sample code.\r\n\r\nBase class for",
      "required": [
        "DiscriminatorType"
      ],
      "properties": {
        "DiscriminatorType": {
          "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
          "type": "string"
        }
      },
      "discriminator": "DiscriminatorType",
      "xml": {
        "name": "FormFieldValidation"
      },
      "type": "object"
    },
    "SigTypeAutomaticSignature": {
      "description": "Automatic signature SigType.",
      "allOf": [
        {
          "$ref": "#/definitions/SigType"
        },
        {
          "properties": {
            "TrModType": {
              "description": "Transaction code modul type.",
              "type": "string"
            },
            "SealingProfileId": {
              "type": "string"
            },
            "RenderingLanguage": {
              "description": "ISO language code",
              "type": "string"
            },
            "Id": {
              "description": "Define a identifier.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            },
            "Preferred": {
              "description": "Define if this SigType is the preferred one.",
              "type": "boolean"
            },
            "StampImprintConfiguration": {
              "$ref": "#/definitions/StampImprintConfiguration",
              "description": "Confiugre StampImprintConfiguration."
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "SigTypeAutomaticSignature"
      },
      "type": "object"
    },
    "SigTypeBiometricSignature": {
      "description": "Define a BiometricSignature.",
      "allOf": [
        {
          "$ref": "#/definitions/SigType"
        },
        {
          "properties": {
            "IsBio": {
              "description": "Define if the BiometricSignature has a BioServerVerification.",
              "type": "boolean",
              "default": false
            },
            "Uid": {
              "description": "Uid for verification.",
              "type": "string"
            },
            "AllowSkipBiometricVerification": {
              "description": "Allow skipping biometric verification.",
              "type": "boolean",
              "default": false
            },
            "AllowBiometricStoringOnly": {
              "description": "Allow biometric storing only.",
              "type": "boolean",
              "default": false
            },
            "SignedResponseWithoutBioData": {
              "description": "Signed response without bio data.",
              "type": "boolean",
              "default": false
            },
            "Id": {
              "description": "Define a identifier.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            },
            "Preferred": {
              "description": "Define if this SigType is the preferred one.",
              "type": "boolean"
            },
            "StampImprintConfiguration": {
              "$ref": "#/definitions/StampImprintConfiguration",
              "description": "Confiugre StampImprintConfiguration."
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "SigTypeBiometricSignature"
      },
      "type": "object"
    },
    "SigTypeBiometricSignatureAndLocalCertificate": {
      "description": "BiometricSignatureAndLocalCertificate SigType.",
      "allOf": [
        {
          "$ref": "#/definitions/SigType"
        },
        {
          "properties": {
            "Ly": {
              "description": "Define the layout of the local certificate.",
              "type": "string",
              "default": ""
            },
            "IsBio": {
              "description": "Define if the BiometricSignature has a BioServerVerification.",
              "type": "boolean",
              "default": false
            },
            "Id": {
              "description": "Define a identifier.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            },
            "Preferred": {
              "description": "Define if this SigType is the preferred one.",
              "type": "boolean"
            },
            "StampImprintConfiguration": {
              "$ref": "#/definitions/StampImprintConfiguration",
              "description": "Confiugre StampImprintConfiguration."
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "SigTypeBiometricSignatureAndLocalCertificate"
      },
      "type": "object"
    },
    "SigTypeExternalSigningProcess": {
      "allOf": [
        {
          "$ref": "#/definitions/SigType"
        },
        {
          "properties": {
            "TrConfId": {
              "description": "Reference to transcation code configuration id for signing.",
              "type": "string"
            },
            "TrModType": {
              "description": "Transaction mod type.",
              "type": "string"
            },
            "Id": {
              "description": "Define a identifier.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            },
            "Preferred": {
              "description": "Define if this SigType is the preferred one.",
              "type": "boolean"
            },
            "StampImprintConfiguration": {
              "$ref": "#/definitions/StampImprintConfiguration",
              "description": "Confiugre StampImprintConfiguration."
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "SigTypeExternalSigningProcess"
      },
      "type": "object"
    },
    "SigTypeLocalCertificate": {
      "description": "LocalCertificate SigType.",
      "allOf": [
        {
          "$ref": "#/definitions/SigType"
        },
        {
          "properties": {
            "Ly": {
              "description": "Define the layout of the local certificate.",
              "type": "string",
              "default": ""
            },
            "Id": {
              "description": "Define a identifier.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            },
            "Preferred": {
              "description": "Define if this SigType is the preferred one.",
              "type": "boolean"
            },
            "StampImprintConfiguration": {
              "$ref": "#/definitions/StampImprintConfiguration",
              "description": "Confiugre StampImprintConfiguration."
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "SigTypeLocalCertificate"
      },
      "type": "object"
    },
    "SigTypePicture": {
      "description": "Picture SigType.",
      "required": [
        "DiscriminatorType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/SigType"
        },
        {
          "properties": {
            "AllowedCapturingMethod": {
              "description": "List of allowed capturing methods.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Click2Sign",
                "Draw2Sign",
                "Type2Sign"
              ],
              "x-ms-enum": {}
            },
            "Id": {
              "description": "Define a identifier.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            },
            "Preferred": {
              "description": "Define if this SigType is the preferred one.",
              "type": "boolean"
            },
            "StampImprintConfiguration": {
              "$ref": "#/definitions/StampImprintConfiguration",
              "description": "Confiugre StampImprintConfiguration."
            }
          },
          "type": "object"
        }
      ],
      "properties": {
        "DiscriminatorType": {
          "type": "string"
        }
      },
      "discriminator": "DiscriminatorType",
      "xml": {
        "name": "SigTypePicture"
      },
      "type": "object"
    },
    "SigTypeClick2Sign": {
      "allOf": [
        {
          "$ref": "#/definitions/SigTypePicture"
        },
        {
          "properties": {},
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "SigTypeClick2Sign"
      },
      "type": "object"
    },
    "SigTypeDraw2Sign": {
      "allOf": [
        {
          "$ref": "#/definitions/SigTypePicture"
        },
        {
          "properties": {},
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "SigTypeDraw2Sign"
      },
      "type": "object"
    },
    "SigTypeType2Sign": {
      "allOf": [
        {
          "$ref": "#/definitions/SigTypePicture"
        },
        {
          "properties": {},
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "SigTypeType2Sign"
      },
      "type": "object"
    },
    "SigTypeTransactionCode": {
      "description": "TransactionCode SigType.",
      "allOf": [
        {
          "$ref": "#/definitions/SigType"
        },
        {
          "properties": {
            "TrModType": {
              "description": "Transaction code modul type.",
              "type": "string"
            },
            "TrModTypeId": {
              "description": "Transaction code modul type identifier.",
              "type": "string"
            },
            "TrValidityInSeconds": {
              "description": "Validation of transaction in seconds.",
              "type": "integer",
              "format": "int32",
              "default": 300
            },
            "Ly": {
              "description": "Layout of the transaction code.",
              "type": "string",
              "default": ""
            },
            "TrConfIdIssueCertificate": {
              "description": "Reference to transaction code configuration for issuing the certificate and signing.",
              "type": "string"
            },
            "TrConfId": {
              "description": "Reference to transcation code configuration id for signing.",
              "type": "string"
            },
            "IsPhoneNumberRequired": {
              "description": "Define if the phone number should be required.",
              "readOnly": true,
              "type": "boolean"
            },
            "Id": {
              "description": "Define a identifier.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            },
            "Preferred": {
              "description": "Define if this SigType is the preferred one.",
              "type": "boolean"
            },
            "StampImprintConfiguration": {
              "$ref": "#/definitions/StampImprintConfiguration",
              "description": "Confiugre StampImprintConfiguration."
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "SigTypeTransactionCode"
      },
      "type": "object"
    },
    "SigTypeTransactionCodeAndBiometricSignature": {
      "description": "TransactionCodeAndBiometricSignature SigType.",
      "allOf": [
        {
          "$ref": "#/definitions/SigType"
        },
        {
          "properties": {
            "IsBio": {
              "description": "Define if the BiometricSignature has a BioServerVerification.",
              "type": "boolean",
              "default": false
            },
            "TrModType": {
              "description": "Transaction code modul type.",
              "type": "string"
            },
            "TrModTypeId": {
              "description": "Transaction code modul type identifier.",
              "type": "string"
            },
            "TrValidityInSeconds": {
              "description": "Validation of transaction in seconds.",
              "type": "integer",
              "format": "int32",
              "default": 300
            },
            "Ly": {
              "description": "Layout of the transaction code.",
              "type": "string",
              "default": ""
            },
            "TrConfIdIssueCertificate": {
              "description": "Reference to transaction code configuration for issuing the certificate and signing.",
              "type": "string"
            },
            "TrConfId": {
              "description": "Reference to transcation code configuration id for signing.",
              "type": "string"
            },
            "IsPhoneNumberRequired": {
              "description": "Define if the phonenumber should be required.",
              "readOnly": true,
              "type": "boolean"
            },
            "Id": {
              "description": "Define a identifier.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            },
            "Preferred": {
              "description": "Define if this SigType is the preferred one.",
              "type": "boolean"
            },
            "StampImprintConfiguration": {
              "$ref": "#/definitions/StampImprintConfiguration",
              "description": "Confiugre StampImprintConfiguration."
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "SigTypeTransactionCodeAndBiometricSignature"
      },
      "type": "object"
    },
    "SigTypeTransactionCodeAndLocalCertificate": {
      "description": "TransactionCodeAndLocalCertificate SigType.",
      "allOf": [
        {
          "$ref": "#/definitions/SigType"
        },
        {
          "properties": {
            "TrModType": {
              "description": "Transaction code modul type.",
              "type": "string"
            },
            "TrModTypeId": {
              "description": "Transaction code modul type identifier.",
              "type": "string"
            },
            "TrValidityInSeconds": {
              "description": "Validation of transaction in seconds.",
              "type": "integer",
              "format": "int32",
              "default": 300
            },
            "Ly": {
              "description": "Layout of the transaction code.",
              "type": "string",
              "default": ""
            },
            "TrConfIdIssueCertificate": {
              "description": "Reference to transaction code configuration for issuing the certificate and signing.",
              "type": "string"
            },
            "TrConfId": {
              "description": "Reference to transcation code configuration id for signing.",
              "type": "string"
            },
            "IsPhoneNumberRequired": {
              "description": "Define if the phonenumber should be required.",
              "type": "boolean"
            },
            "Id": {
              "description": "Define a identifier.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            },
            "Preferred": {
              "description": "Define if this SigType is the preferred one.",
              "type": "boolean"
            },
            "StampImprintConfiguration": {
              "$ref": "#/definitions/StampImprintConfiguration",
              "description": "Confiugre StampImprintConfiguration."
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "SigTypeTransactionCodeAndLocalCertificate"
      },
      "type": "object"
    },
    "SigTypeTransactionCodeBiometricSignatureAndLocalCertificate": {
      "allOf": [
        {
          "$ref": "#/definitions/SigType"
        },
        {
          "properties": {
            "IsBio": {
              "description": "Define if the BiometricSignature has a BioServerVerification.",
              "type": "boolean",
              "default": false
            },
            "TrModType": {
              "description": "Transaction code modul type.",
              "type": "string"
            },
            "TrModTypeId": {
              "description": "Transaction code modul type identifier.",
              "type": "string"
            },
            "TrValidityInSeconds": {
              "description": "Validation of transaction in seconds.",
              "type": "integer",
              "format": "int32",
              "default": 300
            },
            "Ly": {
              "description": "Layout of the transaction code.",
              "type": "string",
              "default": ""
            },
            "TrConfIdIssueCertificate": {
              "description": "Reference to transaction code configuration for issuing the certificate and signing.",
              "type": "string"
            },
            "TrConfId": {
              "description": "Reference to transcation code configuration id for signing.",
              "type": "string"
            },
            "IsPhoneNumberRequired": {
              "description": "Define if the phonenumber should be required.",
              "type": "boolean"
            },
            "Id": {
              "description": "Define a identifier.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            },
            "Preferred": {
              "description": "Define if this SigType is the preferred one.",
              "type": "boolean"
            },
            "StampImprintConfiguration": {
              "$ref": "#/definitions/StampImprintConfiguration",
              "description": "Confiugre StampImprintConfiguration."
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "SigTypeTransactionCodeBiometricSignatureAndLocalCertificate"
      },
      "type": "object"
    },
    "AuthenticationMethodBankId": {
      "description": "Uses a pin as authentication method.",
      "allOf": [
        {
          "$ref": "#/definitions/AuthenticationMethod"
        },
        {
          "properties": {
            "PersonalNumber": {
              "description": "PersonalNumber to authenticate.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AuthenticationMethodBankId"
      },
      "type": "object"
    },
    "AuthenticationMethodCertificate": {
      "description": "Authentication via certificate.",
      "allOf": [
        {
          "$ref": "#/definitions/AuthenticationMethod"
        },
        {
          "properties": {
            "CertificateFilter": {
              "$ref": "#/definitions/CertificateFilter",
              "description": "Certificate filter for authentication."
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AuthenticationMethodCertificate"
      },
      "type": "object"
    },
    "AuthenticationMethodFacebook": {
      "description": "Authentication with Facebook.",
      "allOf": [
        {
          "$ref": "#/definitions/AuthenticationMethod"
        },
        {
          "properties": {
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AuthenticationMethodFacebook"
      },
      "type": "object"
    },
    "AuthenticationMethodGenericOAuthClient": {
      "description": "Authentication with generic OAuthentication.",
      "allOf": [
        {
          "$ref": "#/definitions/AuthenticationMethod"
        },
        {
          "properties": {
            "Scope": {
              "description": "Scope of the authentication.",
              "type": "string"
            },
            "ProviderIdentifier": {
              "description": "Provider identifier.",
              "type": "string"
            },
            "ResourceUris": {
              "description": "Resource uris of the authentication.",
              "items": {
                "$ref": "#/definitions/AuthenticationMethodResourceUri"
              },
              "xml": {
                "name": "AuthenticationMethodResourceUri",
                "wrapped": true
              },
              "type": "array"
            },
            "Checks": {
              "description": "Checks for the authentication.",
              "items": {
                "$ref": "#/definitions/AuthenticationMethodCheck"
              },
              "xml": {
                "name": "AuthenticationMethodCheck",
                "wrapped": true
              },
              "type": "array"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AuthenticationMethodGenericOAuthClient"
      },
      "type": "object"
    },
    "AuthenticationMethodResourceUri": {
      "description": "ResourceUri for GenericOAuthClient",
      "properties": {
        "Uri": {
          "description": "Uri for the resource.",
          "type": "string"
        },
        "AccessTokenParamName": {
          "description": "AccessTokenParamName for the uri.",
          "type": "string"
        },
        "Field": {
          "description": "Field of the resource uri.",
          "type": "string"
        },
        "FieldId": {
          "description": "Id for the field.",
          "type": "string"
        }
      },
      "xml": {
        "name": "AuthenticationMethodResourceUri"
      },
      "type": "object"
    },
    "AuthenticationMethodCheck": {
      "description": "Checks for OAuth and Saml",
      "properties": {
        "FieldId": {
          "description": "Field id",
          "type": "string"
        },
        "CompareOperation": {
          "description": "Compare operator.",
          "type": "string",
          "enum": [
            "Equal",
            "NotEqual"
          ],
          "x-ms-enum": {}
        },
        "Value": {
          "description": "Value of the check.",
          "type": "string"
        }
      },
      "xml": {
        "name": "AuthenticationMethodCheck"
      },
      "type": "object"
    },
    "AuthenticationMethodGenericSamlClient": {
      "description": "Authentication with generic Saml.",
      "allOf": [
        {
          "$ref": "#/definitions/AuthenticationMethod"
        },
        {
          "properties": {
            "ProviderIdentifier": {
              "description": "Provider identifier.",
              "type": "string"
            },
            "Checks": {
              "description": "Checks for the authentication.",
              "items": {
                "$ref": "#/definitions/AuthenticationMethodCheck"
              },
              "xml": {
                "name": "AuthenticationMethodCheck",
                "wrapped": true
              },
              "type": "array"
            },
            "Fields": {
              "description": "Fields for the authentication.",
              "items": {
                "$ref": "#/definitions/KeyValuePair"
              },
              "xml": {
                "name": "KeyValuePair",
                "wrapped": true
              },
              "type": "array"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AuthenticationMethodGenericSamlClient"
      },
      "type": "object"
    },
    "AuthenticationMethodGoogle": {
      "description": "Authentication with Google.",
      "allOf": [
        {
          "$ref": "#/definitions/AuthenticationMethod"
        },
        {
          "properties": {
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AuthenticationMethodGoogle"
      },
      "type": "object"
    },
    "AuthenticationMethodIdentityServer": {
      "description": "Uses the identity server as authentication method.",
      "allOf": [
        {
          "$ref": "#/definitions/AuthenticationMethod"
        },
        {
          "properties": {
            "IdentityId": {
              "description": "Defines the id of the identity.",
              "type": "string"
            },
            "ModuleId": {
              "description": "Defines the id of the module.",
              "type": "string"
            },
            "TrConfId": {
              "description": "Defines the id of the trConfiguration",
              "type": "string"
            },
            "NeedsToPrepare": {
              "description": "Defines if preparation is needed.",
              "type": "boolean"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AuthenticationMethodIdentityServer"
      },
      "type": "object"
    },
    "AuthenticationMethodNamirialRemoteSignature": {
      "description": "Authentication with NamirialRemoteSignature.",
      "allOf": [
        {
          "$ref": "#/definitions/AuthenticationMethod"
        },
        {
          "properties": {
            "DeviceId": {
              "description": "Device identifier.",
              "type": "string"
            },
            "UserId": {
              "description": "User identifier.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AuthenticationMethodNamirialRemoteSignature"
      },
      "type": "object"
    },
    "AuthenticationMethodPin": {
      "description": "Uses a pin as authentication method.",
      "allOf": [
        {
          "$ref": "#/definitions/AuthenticationMethod"
        },
        {
          "properties": {
            "Pin": {
              "description": "Pin to authenticate.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AuthenticationMethodPin"
      },
      "type": "object"
    },
    "AuthenticationMethodSms": {
      "description": "Uses sms authentication as authentication method.",
      "allOf": [
        {
          "$ref": "#/definitions/AuthenticationMethod"
        },
        {
          "properties": {
            "Code": {
              "description": "Code for the authentication.",
              "readOnly": true,
              "type": "string"
            },
            "CodeGenerationTime": {
              "description": "Time the code is generated.",
              "readOnly": true,
              "type": "string"
            },
            "Phonenumber": {
              "description": "Phonenumber for authentication.",
              "type": "string"
            },
            "TransactionId": {
              "description": "Defines the id of the transaction.",
              "readOnly": true,
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AuthenticationMethodSms"
      },
      "type": "object"
    },
    "AuthenticationMethodUserId": {
      "description": "Uses  UserIds as authentication method.",
      "allOf": [
        {
          "$ref": "#/definitions/AuthenticationMethod"
        },
        {
          "properties": {
            "UserIds": {
              "description": "The list of userids that are allowed to access the document.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AuthenticationMethodUserId"
      },
      "type": "object"
    },
    "AuthenticationMethodWindowsLive": {
      "description": "Uses WindowsLive as authentication method.",
      "allOf": [
        {
          "$ref": "#/definitions/AuthenticationMethod"
        },
        {
          "properties": {
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AuthenticationMethodWindowsLive"
      },
      "type": "object"
    },
    "FormFieldValidationDate": {
      "description": "FormFieldValidation for dates.",
      "allOf": [
        {
          "$ref": "#/definitions/FormFieldValidation"
        },
        {
          "properties": {
            "Format": {
              "description": "Defines the format of the format. (e.g. \"dd. MMMM yyyy\")",
              "type": "string"
            },
            "Range": {
              "$ref": "#/definitions/FormFieldValidationRange",
              "description": "Define the range of the date. Has to be in the specified format. Optional."
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "FormFieldValidationDate"
      },
      "type": "object"
    },
    "FormFieldValidationRange": {
      "description": "Range to define in",
      "properties": {
        "From": {
          "description": "Defines a value for the start of the range.",
          "type": "string"
        },
        "To": {
          "description": "Defines a value for the end of the range.",
          "type": "string"
        }
      },
      "xml": {
        "name": "FormFieldValidationRange"
      },
      "type": "object"
    },
    "FormFieldValidationEmail": {
      "description": "FormFieldValidation for emails.",
      "allOf": [
        {
          "$ref": "#/definitions/FormFieldValidation"
        },
        {
          "properties": {
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "FormFieldValidationEmail"
      },
      "type": "object"
    },
    "FormFieldValidationNumber": {
      "description": "FormFieldValidation for numbers.",
      "allOf": [
        {
          "$ref": "#/definitions/FormFieldValidation"
        },
        {
          "properties": {
            "DecimalPlaces": {
              "description": "Defines the allowed decimal places.",
              "type": "integer",
              "format": "int32"
            },
            "DecimalSeparator": {
              "description": "Defines the decimal separator. Must be different to ThousandsSeparator. Required if DecimalPlaces is greater than 0.",
              "type": "string",
              "enum": [
                "Comma",
                "Point",
                "Apostrophe"
              ],
              "x-ms-enum": {}
            },
            "ThousandsSeparator": {
              "description": "Defines the thousands separator. Must be different to DecimalSeparator.",
              "type": "string",
              "enum": [
                "Comma",
                "Point",
                "Apostrophe",
                "Blank"
              ],
              "x-ms-enum": {}
            },
            "Symbol": {
              "description": "Defines the symbol for this number. E.g. currency.",
              "type": "string"
            },
            "SymbolLocation": {
              "description": "Defines the location of this symbol. Required if Symbol is set.",
              "type": "string",
              "enum": [
                "Start",
                "StartWithBlank",
                "End",
                "EndWithBlank"
              ],
              "x-ms-enum": {}
            },
            "Range": {
              "$ref": "#/definitions/FormFieldValidationRange"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "FormFieldValidationNumber"
      },
      "type": "object"
    },
    "FormFieldValidationPhone": {
      "description": "FormFieldValidation for phones.",
      "allOf": [
        {
          "$ref": "#/definitions/FormFieldValidation"
        },
        {
          "properties": {
            "PhoneType": {
              "description": "Defines the PhoneType.",
              "type": "string",
              "enum": [
                "International",
                "InternationalLeadingZeros",
                "InternationalLeadingPlus"
              ],
              "x-ms-enum": {}
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "FormFieldValidationPhone"
      },
      "type": "object"
    },
    "FormFieldValidationTime": {
      "description": "FormFieldValidation for times.",
      "allOf": [
        {
          "$ref": "#/definitions/FormFieldValidation"
        },
        {
          "properties": {
            "Format": {
              "description": "Defines the format of this time. (e.g. \"HH:mm\")",
              "type": "string"
            },
            "Range": {
              "$ref": "#/definitions/FormFieldValidationRange",
              "description": "Defines a allowed range for this time. Must match the specified format. Optional."
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "FormFieldValidationTime"
      },
      "type": "object"
    },
    "AutomaticSignature": {
      "description": "Finalizeaction configuration for automatic signature",
      "allOf": [
        {
          "$ref": "#/definitions/FinalizeAction"
        },
        {
          "properties": {
            "SigId": {
              "description": "Signature Id from automatic signature.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "DiscriminatorType.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AutomaticSignature"
      },
      "type": "object"
    },
    "Timemark": {
      "description": "Timestamp for FinalizeActions. The timestamp allows you to add an invisible signature using a trusted timestamp service to the configured documents when finishing the workstep.",
      "allOf": [
        {
          "$ref": "#/definitions/FinalizeAction"
        },
        {
          "properties": {
            "DocRefNumbers": {
              "description": "Document number for this timestamp.",
              "type": "string",
              "default": "*"
            },
            "SpcId": {
              "description": "SignaturePluginConfiguration Id for this timestamp.",
              "type": "string",
              "default": ""
            },
            "DiscriminatorType": {
              "description": "DiscriminatorType.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "Timestamp"
      },
      "type": "object"
    },
    "FillCheckBoxFormDescriptor": {
      "allOf": [
        {
          "$ref": "#/definitions/FillFormDescriptor"
        },
        {
          "properties": {
            "IsChecked": {
              "description": "Specifies if the checkbox should be checked.",
              "type": "boolean",
              "default": false
            },
            "Name": {
              "description": "Abstract class, use the derived classes:\r\n- FillCheckBoxFormDescriptor\r\n- FillComboBoxFormDescriptor\r\n- FillListBoxFormDescriptor\r\n- FillRadioButtonFormDescriptor\r\n- FillTextBoxFormDescriptor\r\n            \r\nFor usage see sample code.\r\n\r\nThe name of the form field.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "FillCheckBoxFormDescriptor"
      },
      "type": "object"
    },
    "FillComboBoxFormDescriptor": {
      "allOf": [
        {
          "$ref": "#/definitions/FillFormDescriptor"
        },
        {
          "properties": {
            "Value": {
              "description": "The selected value of the combobox.",
              "type": "string",
              "default": ""
            },
            "Name": {
              "description": "Abstract class, use the derived classes:\r\n- FillCheckBoxFormDescriptor\r\n- FillComboBoxFormDescriptor\r\n- FillListBoxFormDescriptor\r\n- FillRadioButtonFormDescriptor\r\n- FillTextBoxFormDescriptor\r\n            \r\nFor usage see sample code.\r\n\r\nThe name of the form field.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "FillComboBoxFormDescriptor"
      },
      "type": "object"
    },
    "FillListBoxFormDescriptor": {
      "allOf": [
        {
          "$ref": "#/definitions/FillFormDescriptor"
        },
        {
          "properties": {
            "SelectedItems": {
              "description": "The items which are selected in the listbox. Has to hold at least one value.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "Name": {
              "description": "Abstract class, use the derived classes:\r\n- FillCheckBoxFormDescriptor\r\n- FillComboBoxFormDescriptor\r\n- FillListBoxFormDescriptor\r\n- FillRadioButtonFormDescriptor\r\n- FillTextBoxFormDescriptor\r\n            \r\nFor usage see sample code.\r\n\r\nThe name of the form field.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "FillListBoxFormDescriptor"
      },
      "type": "object"
    },
    "FillRadioButtonFormDescriptor": {
      "allOf": [
        {
          "$ref": "#/definitions/FillFormDescriptor"
        },
        {
          "properties": {
            "SelectedItem": {
              "description": "The selected Item in an radiobutton group.",
              "type": "string"
            },
            "Name": {
              "description": "Abstract class, use the derived classes:\r\n- FillCheckBoxFormDescriptor\r\n- FillComboBoxFormDescriptor\r\n- FillListBoxFormDescriptor\r\n- FillRadioButtonFormDescriptor\r\n- FillTextBoxFormDescriptor\r\n            \r\nFor usage see sample code.\r\n\r\nThe name of the form field.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "FillRadioButtonFormDescriptor"
      },
      "type": "object"
    },
    "FillTextBoxFormDescriptor": {
      "allOf": [
        {
          "$ref": "#/definitions/FillFormDescriptor"
        },
        {
          "properties": {
            "Value": {
              "description": "The value of the TextBox.",
              "type": "string",
              "default": ""
            },
            "Name": {
              "description": "Abstract class, use the derived classes:\r\n- FillCheckBoxFormDescriptor\r\n- FillComboBoxFormDescriptor\r\n- FillListBoxFormDescriptor\r\n- FillRadioButtonFormDescriptor\r\n- FillTextBoxFormDescriptor\r\n            \r\nFor usage see sample code.\r\n\r\nThe name of the form field.",
              "type": "string"
            },
            "DiscriminatorType": {
              "description": "Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "FillTextBoxFormDescriptor"
      },
      "type": "object"
    },
    "AddCheckBoxFormFieldDescriptor": {
      "allOf": [
        {
          "$ref": "#/definitions/AddFormFieldDescriptor"
        },
        {
          "properties": {
            "IsChecked": {
              "description": "Boolean indicating if the checkbox should be checked initially.",
              "type": "boolean",
              "default": false
            },
            "ExportValue": {
              "description": "The textual description of the checkbox.",
              "type": "string",
              "default": ""
            },
            "Name": {
              "description": "The name of the form field.",
              "type": "string"
            },
            "ReadOnly": {
              "description": "Specifies if the form field is readonly.",
              "type": "boolean",
              "default": false
            },
            "Required": {
              "description": "Specifies if the form field is required.",
              "type": "boolean",
              "default": false
            },
            "X": {
              "description": "The X coordinate in points.",
              "type": "number",
              "format": "double"
            },
            "Y": {
              "description": "The Y coordinate in points.",
              "type": "number",
              "format": "double"
            },
            "Width": {
              "description": "The width of the form field in points.",
              "type": "number",
              "format": "double"
            },
            "Height": {
              "description": "The height of the form field in points.",
              "type": "number",
              "format": "double"
            },
            "Page": {
              "description": "The page number of the form field. (Starting with 1)",
              "type": "integer",
              "format": "int32"
            },
            "DiscriminatorType": {
              "description": "To differentiate between childs.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AddCheckBoxFormFieldDescriptor"
      },
      "type": "object"
    },
    "AddComboBoxFormFieldDescriptor": {
      "allOf": [
        {
          "$ref": "#/definitions/AddFormFieldChoiceItemsDescriptor"
        },
        {
          "properties": {},
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AddComboBoxFormFieldDescriptor"
      },
      "type": "object"
    },
    "AddFormFieldChoiceItemDescriptor": {
      "properties": {
        "ExportValue": {
          "description": "The technical textual description.",
          "type": "string"
        },
        "DisplayValue": {
          "description": "The visual textual description.",
          "type": "string"
        },
        "IsSelected": {
          "description": "Boolean indicating if the item is selected by default.",
          "type": "boolean",
          "default": false
        }
      },
      "xml": {
        "name": "AddFormFieldChoiceItemDescriptor"
      },
      "type": "object"
    },
    "AddFormFieldChoiceItemsDescriptor": {
      "required": [
        "DiscriminatorType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AddFormFieldDescriptor"
        },
        {
          "properties": {
            "Items": {
              "description": "A list of choice items.",
              "items": {
                "$ref": "#/definitions/AddFormFieldChoiceItemDescriptor"
              },
              "xml": {
                "name": "AddFormFieldChoiceItemDescriptor",
                "wrapped": true
              },
              "type": "array"
            },
            "TextColor": {
              "description": "Font color. Default is black.",
              "type": "string",
              "default": "Red"
            },
            "FontSize": {
              "description": "Font size.",
              "type": "number",
              "format": "double"
            },
            "FontName": {
              "description": "Font name.",
              "type": "string"
            },
            "Bold": {
              "description": "Flag if font is bold. Default false;",
              "type": "boolean",
              "default": false
            },
            "Italic": {
              "description": "Flag if font is italic. Default is false.",
              "type": "boolean",
              "default": false
            },
            "TextAlign": {
              "description": "Text alignment. Default is left.",
              "type": "string",
              "default": "Left",
              "enum": [
                "Left",
                "Center",
                "Right"
              ],
              "x-ms-enum": {}
            },
            "Name": {
              "description": "The name of the form field.",
              "type": "string"
            },
            "ReadOnly": {
              "description": "Specifies if the form field is readonly.",
              "type": "boolean",
              "default": false
            },
            "Required": {
              "description": "Specifies if the form field is required.",
              "type": "boolean",
              "default": false
            },
            "X": {
              "description": "The X coordinate in points.",
              "type": "number",
              "format": "double"
            },
            "Y": {
              "description": "The Y coordinate in points.",
              "type": "number",
              "format": "double"
            },
            "Width": {
              "description": "The width of the form field in points.",
              "type": "number",
              "format": "double"
            },
            "Height": {
              "description": "The height of the form field in points.",
              "type": "number",
              "format": "double"
            },
            "Page": {
              "description": "The page number of the form field. (Starting with 1)",
              "type": "integer",
              "format": "int32"
            },
            "DiscriminatorType": {
              "description": "To differentiate between childs.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {
        "DiscriminatorType": {
          "type": "string"
        }
      },
      "discriminator": "DiscriminatorType",
      "xml": {
        "name": "AddFormFieldChoiceItemsDescriptor"
      },
      "type": "object"
    },
    "AddFormFieldWithFontSettingsDescriptor": {
      "required": [
        "DiscriminatorType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AddFormFieldDescriptor"
        },
        {
          "properties": {
            "TextColor": {
              "description": "Font color. Default is black.",
              "type": "string",
              "default": "Red"
            },
            "FontSize": {
              "description": "Font size.",
              "type": "number",
              "format": "double"
            },
            "FontName": {
              "description": "Font name.",
              "type": "string"
            },
            "Bold": {
              "description": "Flag if font is bold. Default false;",
              "type": "boolean",
              "default": false
            },
            "Italic": {
              "description": "Flag if font is italic. Default is false.",
              "type": "boolean",
              "default": false
            },
            "TextAlign": {
              "description": "Text alignment. Default is left.",
              "type": "string",
              "default": "Left",
              "enum": [
                "Left",
                "Center",
                "Right"
              ],
              "x-ms-enum": {}
            },
            "Name": {
              "description": "The name of the form field.",
              "type": "string"
            },
            "ReadOnly": {
              "description": "Specifies if the form field is readonly.",
              "type": "boolean",
              "default": false
            },
            "Required": {
              "description": "Specifies if the form field is required.",
              "type": "boolean",
              "default": false
            },
            "X": {
              "description": "The X coordinate in points.",
              "type": "number",
              "format": "double"
            },
            "Y": {
              "description": "The Y coordinate in points.",
              "type": "number",
              "format": "double"
            },
            "Width": {
              "description": "The width of the form field in points.",
              "type": "number",
              "format": "double"
            },
            "Height": {
              "description": "The height of the form field in points.",
              "type": "number",
              "format": "double"
            },
            "Page": {
              "description": "The page number of the form field. (Starting with 1)",
              "type": "integer",
              "format": "int32"
            },
            "DiscriminatorType": {
              "description": "To differentiate between childs.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {
        "DiscriminatorType": {
          "type": "string"
        }
      },
      "discriminator": "DiscriminatorType",
      "xml": {
        "name": "AddFormFieldWithFontSettingsDescriptor"
      },
      "type": "object"
    },
    "AddListBoxFormFieldDescriptor": {
      "allOf": [
        {
          "$ref": "#/definitions/AddFormFieldChoiceItemsDescriptor"
        },
        {
          "properties": {},
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AddListBoxFormFieldDescriptor"
      },
      "type": "object"
    },
    "AddRadioButtonFormFieldDescriptor": {
      "allOf": [
        {
          "$ref": "#/definitions/AddFormFieldDescriptor"
        },
        {
          "properties": {
            "ExportValue": {
              "description": "The technical textual description of the radio button.",
              "type": "string",
              "default": ""
            },
            "IsChecked": {
              "description": "Boolean indicating wether the radio button is checked by default.",
              "type": "boolean",
              "default": false
            },
            "IsSelectUnison": {
              "description": "Boolean indicating if radio buttons with the same <code>ExportValue</code> are checked and unchecked together.",
              "type": "boolean",
              "default": false
            },
            "Name": {
              "description": "The name of the form field.",
              "type": "string"
            },
            "ReadOnly": {
              "description": "Specifies if the form field is readonly.",
              "type": "boolean",
              "default": false
            },
            "Required": {
              "description": "Specifies if the form field is required.",
              "type": "boolean",
              "default": false
            },
            "X": {
              "description": "The X coordinate in points.",
              "type": "number",
              "format": "double"
            },
            "Y": {
              "description": "The Y coordinate in points.",
              "type": "number",
              "format": "double"
            },
            "Width": {
              "description": "The width of the form field in points.",
              "type": "number",
              "format": "double"
            },
            "Height": {
              "description": "The height of the form field in points.",
              "type": "number",
              "format": "double"
            },
            "Page": {
              "description": "The page number of the form field. (Starting with 1)",
              "type": "integer",
              "format": "int32"
            },
            "DiscriminatorType": {
              "description": "To differentiate between childs.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AddRadioButtonFormFieldDescriptor"
      },
      "type": "object"
    },
    "AddTextBoxFormFieldDescriptor": {
      "allOf": [
        {
          "$ref": "#/definitions/AddFormFieldDescriptor"
        },
        {
          "properties": {
            "Value": {
              "description": "The default text of the textbox.",
              "type": "string",
              "default": ""
            },
            "MaxLength": {
              "description": "The maximum length of characters inside the textbox.",
              "type": "integer",
              "format": "int32",
              "default": -1
            },
            "IsMultiline": {
              "description": "Boolean indicating if the textbox can have multiple lines.",
              "type": "boolean",
              "default": false
            },
            "IsPassword": {
              "description": "Boolean indicating if the textbox behaves as password input.",
              "type": "boolean",
              "default": false
            },
            "IsFileSelect": {
              "description": "Boolean indicating if the textbox behaves as a file upload.",
              "type": "boolean",
              "default": false
            },
            "IsScrollAllowed": {
              "description": "Boolean indicating if scrolling is allowed inside the textbox.",
              "type": "boolean",
              "default": false
            },
            "IsComb": {
              "description": "Boolean indicating if TextBox is combined.",
              "type": "boolean",
              "default": false
            },
            "TextColor": {
              "description": "Font color. Default is black.",
              "type": "string",
              "default": "Red"
            },
            "FontSize": {
              "description": "Font size.",
              "type": "number",
              "format": "double"
            },
            "FontName": {
              "description": "Font name.",
              "type": "string"
            },
            "Bold": {
              "description": "Flag if font is bold. Default false;",
              "type": "boolean",
              "default": false
            },
            "Italic": {
              "description": "Flag if font is italic. Default is false.",
              "type": "boolean",
              "default": false
            },
            "TextAlign": {
              "description": "Text alignment. Default is left.",
              "type": "string",
              "default": "Left",
              "enum": [
                "Left",
                "Center",
                "Right"
              ],
              "x-ms-enum": {}
            },
            "Name": {
              "description": "The name of the form field.",
              "type": "string"
            },
            "ReadOnly": {
              "description": "Specifies if the form field is readonly.",
              "type": "boolean",
              "default": false
            },
            "Required": {
              "description": "Specifies if the form field is required.",
              "type": "boolean",
              "default": false
            },
            "X": {
              "description": "The X coordinate in points.",
              "type": "number",
              "format": "double"
            },
            "Y": {
              "description": "The Y coordinate in points.",
              "type": "number",
              "format": "double"
            },
            "Width": {
              "description": "The width of the form field in points.",
              "type": "number",
              "format": "double"
            },
            "Height": {
              "description": "The height of the form field in points.",
              "type": "number",
              "format": "double"
            },
            "Page": {
              "description": "The page number of the form field. (Starting with 1)",
              "type": "integer",
              "format": "int32"
            },
            "DiscriminatorType": {
              "description": "To differentiate between childs.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "properties": {},
      "xml": {
        "name": "AddTextBoxFormFieldDescriptor"
      },
      "type": "object"
    }
  },
  "securityDefinitions": {
    "organizationKey": {
      "type": "apiKey",
      "description": "API Key Authentication",
      "name": "organizationKey",
      "in": "header"
    },
    "userLoginName": {
      "type": "apiKey",
      "description": "User Login Authentication",
      "name": "userLoginName",
      "in": "header"
    }
  },
  "tags": [
    {
      "name": "Authorization"
    },
    {
      "name": "Envelope"
    },
    {
      "name": "License"
    },
    {
      "name": "Recipient"
    },
    {
      "name": "SspFile"
    },
    {
      "name": "Team"
    },
    {
      "name": "User"
    },
    {
      "name": "Version"
    }
  ]
}